(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("BrowserImageResizer", [], factory);
	else if(typeof exports === 'object')
		exports["BrowserImageResizer"] = factory();
	else
		root["BrowserImageResizer"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n} // Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\n\n\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\n\nfunction getLens(b64) {\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4');\n  } // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n\n\n  var validLen = b64.indexOf('=');\n  if (validLen === -1) validLen = len;\n  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n  return [validLen, placeHoldersLen];\n} // base64 is 4/3 + up to two characters of the original data\n\n\nfunction byteLength(b64) {\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction toByteArray(b64) {\n  var tmp;\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars\n\n  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n  var i;\n\n  for (i = 0; i < len; i += 4) {\n    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n    arr[curByte++] = tmp >> 16 & 0xFF;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  return arr;\n}\n\nfunction tripletToBase64(num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\n\nfunction encodeChunk(uint8, start, end) {\n  var tmp;\n  var output = [];\n\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n    output.push(tripletToBase64(tmp));\n  }\n\n  return output.join('');\n}\n\nfunction fromByteArray(uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n  // go through the array every three bytes, we'll deal with trailing stuff later\n\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n  } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\n  }\n\n  return parts.join('');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/base64-js/index.js\n");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n\n/* eslint-disable no-proto */\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\");\n\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\");\n\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\");\n\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\n\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();\n/*\n * Export kMaxLength after typed array support is determined.\n */\n\nexports.kMaxLength = kMaxLength();\n\nfunction typedArraySupport() {\n  try {\n    var arr = new Uint8Array(1);\n    arr.__proto__ = {\n      __proto__: Uint8Array.prototype,\n      foo: function foo() {\n        return 42;\n      }\n    };\n    return arr.foo() === 42 && // typed array instances can be augmented\n    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction kMaxLength() {\n  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\n}\n\nfunction createBuffer(that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length');\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length);\n    }\n\n    that.length = length;\n  }\n\n  return that;\n}\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\n\nfunction Buffer(arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length);\n  } // Common case.\n\n\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error('If encoding is specified then the first argument must be a string');\n    }\n\n    return allocUnsafe(this, arg);\n  }\n\n  return from(this, arg, encodingOrOffset, length);\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n// TODO: Legacy, not needed anymore. Remove in next major version.\n\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr;\n};\n\nfunction from(that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length);\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset);\n  }\n\n  return fromObject(that, value);\n}\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\n\n\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length);\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n\n  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    });\n  }\n}\n\nfunction assertSize(size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number');\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative');\n  }\n}\n\nfunction alloc(that, size, fill, encoding) {\n  assertSize(size);\n\n  if (size <= 0) {\n    return createBuffer(that, size);\n  }\n\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);\n  }\n\n  return createBuffer(that, size);\n}\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\n\n\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding);\n};\n\nfunction allocUnsafe(that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n\n  return that;\n}\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\n\n\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\n\n\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size);\n};\n\nfunction fromString(that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding');\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual);\n  }\n\n  return that;\n}\n\nfunction fromArrayLike(that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n\n  return that;\n}\n\nfunction fromArrayBuffer(that, array, byteOffset, length) {\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds');\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds');\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array);\n  }\n\n  return that;\n}\n\nfunction fromObject(that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that;\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that;\n  }\n\n  if (obj) {\n    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0);\n      }\n\n      return fromArrayLike(that, obj);\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\n}\n\nfunction checked(length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');\n  }\n\n  return length | 0;\n}\n\nfunction SlowBuffer(length) {\n  if (+length != length) {\n    // eslint-disable-line eqeqeq\n    length = 0;\n  }\n\n  return Buffer.alloc(+length);\n}\n\nBuffer.isBuffer = function isBuffer(b) {\n  return !!(b != null && b._isBuffer);\n};\n\nBuffer.compare = function compare(a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers');\n  }\n\n  if (a === b) return 0;\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\n\nBuffer.isEncoding = function isEncoding(encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true;\n\n    default:\n      return false;\n  }\n};\n\nBuffer.concat = function concat(list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers');\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0);\n  }\n\n  var i;\n\n  if (length === undefined) {\n    length = 0;\n\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n\n  return buffer;\n};\n\nfunction byteLength(string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length;\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength;\n  }\n\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0; // Use a for loop to avoid recursion\n\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len;\n\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length;\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2;\n\n      case 'hex':\n        return len >>> 1;\n\n      case 'base64':\n        return base64ToBytes(string).length;\n\n      default:\n        if (loweredCase) return utf8ToBytes(string).length; // assume utf8\n\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\nBuffer.byteLength = byteLength;\n\nfunction slowToString(encoding, start, end) {\n  var loweredCase = false; // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\n  if (start === undefined || start < 0) {\n    start = 0;\n  } // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n\n\n  if (start > this.length) {\n    return '';\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return '';\n  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\n\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return '';\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end);\n\n      case 'ascii':\n        return asciiSlice(this, start, end);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end);\n\n      case 'base64':\n        return base64Slice(this, start, end);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\n\n\nBuffer.prototype._isBuffer = true;\n\nfunction swap(b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16() {\n  var len = this.length;\n\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits');\n  }\n\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap32 = function swap32() {\n  var len = this.length;\n\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits');\n  }\n\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap64 = function swap64() {\n  var len = this.length;\n\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits');\n  }\n\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n\n  return this;\n};\n\nBuffer.prototype.toString = function toString() {\n  var length = this.length | 0;\n  if (length === 0) return '';\n  if (arguments.length === 0) return utf8Slice(this, 0, length);\n  return slowToString.apply(this, arguments);\n};\n\nBuffer.prototype.equals = function equals(b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n  if (this === b) return true;\n  return Buffer.compare(this, b) === 0;\n};\n\nBuffer.prototype.inspect = function inspect() {\n  var str = '';\n  var max = exports.INSPECT_MAX_BYTES;\n\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n\n  return '<Buffer ' + str + '>';\n};\n\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer');\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index');\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0;\n  }\n\n  if (thisStart >= thisEnd) {\n    return -1;\n  }\n\n  if (start >= end) {\n    return 1;\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n  if (this === target) return 0;\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\n\n\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1; // Normalize byteOffset\n\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n\n  byteOffset = +byteOffset; // Coerce to Number.\n\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : buffer.length - 1;\n  } // Normalize byteOffset: negative offsets start from the end of the buffer\n\n\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1;else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;else return -1;\n  } // Normalize val\n\n\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  } // Finally, search either indexOf (if dir is true) or lastIndexOf\n\n\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1;\n    }\n\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n\n    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n      }\n    }\n\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n  }\n\n  throw new TypeError('val must be string, number or Buffer');\n}\n\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n\n    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1;\n      }\n\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read(buf, i) {\n    if (indexSize === 1) {\n      return buf[i];\n    } else {\n      return buf.readUInt16BE(i * indexSize);\n    }\n  }\n\n  var i;\n\n  if (dir) {\n    var foundIndex = -1;\n\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break;\n        }\n      }\n\n      if (found) return i;\n    }\n  }\n\n  return -1;\n}\n\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1;\n};\n\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\n\nfunction hexWrite(buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n\n    if (length > remaining) {\n      length = remaining;\n    }\n  } // must be an even number of digits\n\n\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i;\n    buf[offset + i] = parsed;\n  }\n\n  return i;\n}\n\nfunction utf8Write(buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nfunction asciiWrite(buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\n\nfunction latin1Write(buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length);\n}\n\nfunction base64Write(buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\n\nfunction ucs2Write(buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0; // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0; // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    } // legacy write(string, encoding, offset, length) - remove in v0.13\n\n  } else {\n    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds');\n  }\n\n  if (!encoding) encoding = 'utf8';\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length);\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length);\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON() {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  };\n};\n\nfunction base64Slice(buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf);\n  } else {\n    return base64.fromByteArray(buf.slice(start, end));\n  }\n}\n\nfunction utf8Slice(buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n  var i = start;\n\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n\n          break;\n\n        case 2:\n          secondByte = buf[i + 1];\n\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res);\n} // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\n\n\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray(codePoints) {\n  var len = codePoints.length;\n\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n  } // Decode in chunks to avoid \"call stack size exceeded\".\n\n\n  var res = '';\n  var i = 0;\n\n  while (i < len) {\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n  }\n\n  return res;\n}\n\nfunction asciiSlice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n\n  return ret;\n}\n\nfunction latin1Slice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n\n  return ret;\n}\n\nfunction hexSlice(buf, start, end) {\n  var len = buf.length;\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n  var out = '';\n\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n\n  return out;\n}\n\nfunction utf16leSlice(buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n\n  return res;\n}\n\nBuffer.prototype.slice = function slice(start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n  var newBuf;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf;\n};\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\n\n\nfunction checkOffset(offset, ext, length) {\n  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset];\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | this[offset + 1] << 8;\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] << 8 | this[offset + 1];\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\n\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return this[offset];\n  return (0xff - this[offset] + 1) * -1;\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | this[offset + 1] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | this[offset] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, true, 23, 4);\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, false, 23, 4);\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, true, 52, 8);\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, false, 52, 8);\n};\n\nfunction checkInt(buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nfunction objectWriteUInt16(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n\n  return offset + 2;\n};\n\nfunction objectWriteUInt32(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n\n  return offset + 4;\n};\n\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  if (offset < 0) throw new RangeError('Index out of range');\n}\n\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4;\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert);\n};\n\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8;\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert);\n}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\n\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done\n\n  if (end === start) return 0;\n  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions\n\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds');\n  }\n\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\n  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?\n\n  if (end > this.length) end = this.length;\n\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\n  }\n\n  return len;\n}; // Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\n\n\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n\n      if (code < 256) {\n        val = code;\n      }\n    }\n\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string');\n    }\n\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding);\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  } // Invalid ranges are not set to a default, so can range check early.\n\n\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index');\n  }\n\n  if (end <= start) {\n    return this;\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n  if (!val) val = 0;\n  var i;\n\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this;\n}; // HELPER FUNCTIONS\n// ================\n\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean(str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''\n\n  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n\n  return str;\n}\n\nfunction stringtrim(str) {\n  if (str.trim) return str.trim();\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16);\n  return n.toString(16);\n}\n\nfunction utf8ToBytes(string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i); // is surrogate component\n\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } // valid lead\n\n\n        leadSurrogate = codePoint;\n        continue;\n      } // 2 leads in a row\n\n\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue;\n      } // valid surrogate pair\n\n\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null; // encode utf8\n\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break;\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break;\n      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break;\n      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break;\n      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n\n  return bytes;\n}\n\nfunction asciiToBytes(str) {\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n\n  return byteArray;\n}\n\nfunction utf16leToBytes(str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break;\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray;\n}\n\nfunction base64ToBytes(str) {\n  return base64.toByteArray(base64clean(str));\n}\n\nfunction blitBuffer(src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if (i + offset >= dst.length || i >= src.length) break;\n    dst[i + offset] = src[i];\n  }\n\n  return i;\n}\n\nfunction isnan(val) {\n  return val !== val; // eslint-disable-line no-self-compare\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/buffer/index.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/byte-order.js":
/*!***************************************************!*\
  !*** ./node_modules/exifreader/src/byte-order.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\nvar LITTLE_ENDIAN = 0x4949;\nvar BIG_ENDIAN = 0x4d4d;\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  BIG_ENDIAN: BIG_ENDIAN,\n  LITTLE_ENDIAN: LITTLE_ENDIAN,\n  getByteOrder: getByteOrder\n});\n\nfunction getByteOrder(dataView, tiffHeaderOffset) {\n  if (dataView.getUint16(tiffHeaderOffset) === LITTLE_ENDIAN) {\n    return LITTLE_ENDIAN;\n  } else if (dataView.getUint16(tiffHeaderOffset) === BIG_ENDIAN) {\n    return BIG_ENDIAN;\n  }\n\n  throw new Error('Illegal byte order value. Faulty image.');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL2J5dGUtb3JkZXIuanM/YTNmNSJdLCJuYW1lcyI6WyJMSVRUTEVfRU5ESUFOIiwiQklHX0VORElBTiIsImdldEJ5dGVPcmRlciIsImRhdGFWaWV3IiwidGlmZkhlYWRlck9mZnNldCIsImdldFVpbnQxNiIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBOzs7QUFJQSxJQUFNQSxhQUFhLEdBQUcsTUFBdEI7QUFDQSxJQUFNQyxVQUFVLEdBQUcsTUFBbkI7QUFFZTtBQUNYQSxZQUFVLEVBQVZBLFVBRFc7QUFFWEQsZUFBYSxFQUFiQSxhQUZXO0FBR1hFLGNBQVksRUFBWkE7QUFIVyxDQUFmOztBQU1BLFNBQVNBLFlBQVQsQ0FBc0JDLFFBQXRCLEVBQWdDQyxnQkFBaEMsRUFBa0Q7QUFDOUMsTUFBSUQsUUFBUSxDQUFDRSxTQUFULENBQW1CRCxnQkFBbkIsTUFBeUNKLGFBQTdDLEVBQTREO0FBQ3hELFdBQU9BLGFBQVA7QUFDSCxHQUZELE1BRU8sSUFBSUcsUUFBUSxDQUFDRSxTQUFULENBQW1CRCxnQkFBbkIsTUFBeUNILFVBQTdDLEVBQXlEO0FBQzVELFdBQU9BLFVBQVA7QUFDSDs7QUFDRCxRQUFNLElBQUlLLEtBQUosQ0FBVSx5Q0FBVixDQUFOO0FBQ0giLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXhpZnJlYWRlci9zcmMvYnl0ZS1vcmRlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwczovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5jb25zdCBMSVRUTEVfRU5ESUFOID0gMHg0OTQ5O1xuY29uc3QgQklHX0VORElBTiA9IDB4NGQ0ZDtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIEJJR19FTkRJQU4sXG4gICAgTElUVExFX0VORElBTixcbiAgICBnZXRCeXRlT3JkZXJcbn07XG5cbmZ1bmN0aW9uIGdldEJ5dGVPcmRlcihkYXRhVmlldywgdGlmZkhlYWRlck9mZnNldCkge1xuICAgIGlmIChkYXRhVmlldy5nZXRVaW50MTYodGlmZkhlYWRlck9mZnNldCkgPT09IExJVFRMRV9FTkRJQU4pIHtcbiAgICAgICAgcmV0dXJuIExJVFRMRV9FTkRJQU47XG4gICAgfSBlbHNlIGlmIChkYXRhVmlldy5nZXRVaW50MTYodGlmZkhlYWRlck9mZnNldCkgPT09IEJJR19FTkRJQU4pIHtcbiAgICAgICAgcmV0dXJuIEJJR19FTkRJQU47XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBieXRlIG9yZGVyIHZhbHVlLiBGYXVsdHkgaW1hZ2UuJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/byte-order.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/constants.js":
/*!**************************************************!*\
  !*** ./node_modules/exifreader/src/constants.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  USE_FILE: true,\n  USE_PNG_FILE: true,\n  USE_EXIF: true,\n  USE_IPTC: true,\n  USE_XMP: true,\n  USE_ICC: true,\n  USE_MPF: true,\n  USE_THUMBNAIL: true,\n  USE_TIFF: true,\n  USE_JPEG: true,\n  USE_PNG: true,\n  USE_HEIC: true,\n  USE_WEBP: true\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL2NvbnN0YW50cy5qcz8xODI0Il0sIm5hbWVzIjpbIlVTRV9GSUxFIiwiVVNFX1BOR19GSUxFIiwiVVNFX0VYSUYiLCJVU0VfSVBUQyIsIlVTRV9YTVAiLCJVU0VfSUNDIiwiVVNFX01QRiIsIlVTRV9USFVNQk5BSUwiLCJVU0VfVElGRiIsIlVTRV9KUEVHIiwiVVNFX1BORyIsIlVTRV9IRUlDIiwiVVNFX1dFQlAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7OztBQUllO0FBQ1hBLFVBQVEsRUFBRSxJQURDO0FBRVhDLGNBQVksRUFBRSxJQUZIO0FBR1hDLFVBQVEsRUFBRSxJQUhDO0FBSVhDLFVBQVEsRUFBRSxJQUpDO0FBS1hDLFNBQU8sRUFBRSxJQUxFO0FBTVhDLFNBQU8sRUFBRSxJQU5FO0FBT1hDLFNBQU8sRUFBRSxJQVBFO0FBUVhDLGVBQWEsRUFBRSxJQVJKO0FBU1hDLFVBQVEsRUFBRSxJQVRDO0FBVVhDLFVBQVEsRUFBRSxJQVZDO0FBV1hDLFNBQU8sRUFBRSxJQVhFO0FBWVhDLFVBQVEsRUFBRSxJQVpDO0FBYVhDLFVBQVEsRUFBRTtBQWJDLENBQWYiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXhpZnJlYWRlci9zcmMvY29uc3RhbnRzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICogZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHBzOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBVU0VfRklMRTogdHJ1ZSxcbiAgICBVU0VfUE5HX0ZJTEU6IHRydWUsXG4gICAgVVNFX0VYSUY6IHRydWUsXG4gICAgVVNFX0lQVEM6IHRydWUsXG4gICAgVVNFX1hNUDogdHJ1ZSxcbiAgICBVU0VfSUNDOiB0cnVlLFxuICAgIFVTRV9NUEY6IHRydWUsXG4gICAgVVNFX1RIVU1CTkFJTDogdHJ1ZSxcbiAgICBVU0VfVElGRjogdHJ1ZSxcbiAgICBVU0VfSlBFRzogdHJ1ZSxcbiAgICBVU0VfUE5HOiB0cnVlLFxuICAgIFVTRV9IRUlDOiB0cnVlLFxuICAgIFVTRV9XRUJQOiB0cnVlXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/constants.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/dataview.js":
/*!*************************************************!*\
  !*** ./node_modules/exifreader/src/dataview.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return DataView; });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar DataView = /*#__PURE__*/function () {\n  function DataView(buffer) {\n    _classCallCheck(this, DataView);\n\n    if (bufferTypeIsUnsupported(buffer)) {\n      throw new Error('DataView: Passed buffer type is unsupported.');\n    }\n\n    this.buffer = buffer;\n    this.byteLength = this.buffer.length;\n  }\n\n  _createClass(DataView, [{\n    key: \"getUint8\",\n    value: function getUint8(offset) {\n      return this.buffer.readUInt8(offset);\n    }\n  }, {\n    key: \"getUint16\",\n    value: function getUint16(offset, littleEndian) {\n      if (littleEndian) {\n        return this.buffer.readUInt16LE(offset);\n      }\n\n      return this.buffer.readUInt16BE(offset);\n    }\n  }, {\n    key: \"getUint32\",\n    value: function getUint32(offset, littleEndian) {\n      if (littleEndian) {\n        return this.buffer.readUInt32LE(offset);\n      }\n\n      return this.buffer.readUInt32BE(offset);\n    }\n  }, {\n    key: \"getInt32\",\n    value: function getInt32(offset, littleEndian) {\n      if (littleEndian) {\n        return this.buffer.readInt32LE(offset);\n      }\n\n      return this.buffer.readInt32BE(offset);\n    }\n  }]);\n\n  return DataView;\n}();\n\n\n\nfunction bufferTypeIsUnsupported(buffer) {\n  return _typeof(buffer) !== 'object' || buffer.length === undefined || buffer.readUInt8 === undefined || buffer.readUInt16LE === undefined || buffer.readUInt16BE === undefined || buffer.readUInt32LE === undefined || buffer.readUInt32BE === undefined || buffer.readInt32LE === undefined || buffer.readInt32BE === undefined;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL2RhdGF2aWV3LmpzPzczNzMiXSwibmFtZXMiOlsiRGF0YVZpZXciLCJidWZmZXIiLCJidWZmZXJUeXBlSXNVbnN1cHBvcnRlZCIsIkVycm9yIiwiYnl0ZUxlbmd0aCIsImxlbmd0aCIsIm9mZnNldCIsInJlYWRVSW50OCIsImxpdHRsZUVuZGlhbiIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MTZCRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLFE7QUFDakIsb0JBQVlDLE1BQVosRUFBb0I7QUFBQTs7QUFDaEIsUUFBSUMsdUJBQXVCLENBQUNELE1BQUQsQ0FBM0IsRUFBcUM7QUFDakMsWUFBTSxJQUFJRSxLQUFKLENBQVUsOENBQVYsQ0FBTjtBQUNIOztBQUVELFNBQUtGLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtHLFVBQUwsR0FBa0IsS0FBS0gsTUFBTCxDQUFZSSxNQUE5QjtBQUNIOzs7OzZCQUVRQyxNLEVBQVE7QUFDYixhQUFPLEtBQUtMLE1BQUwsQ0FBWU0sU0FBWixDQUFzQkQsTUFBdEIsQ0FBUDtBQUNIOzs7OEJBRVNBLE0sRUFBUUUsWSxFQUFjO0FBQzVCLFVBQUlBLFlBQUosRUFBa0I7QUFDZCxlQUFPLEtBQUtQLE1BQUwsQ0FBWVEsWUFBWixDQUF5QkgsTUFBekIsQ0FBUDtBQUNIOztBQUNELGFBQU8sS0FBS0wsTUFBTCxDQUFZUyxZQUFaLENBQXlCSixNQUF6QixDQUFQO0FBQ0g7Ozs4QkFFU0EsTSxFQUFRRSxZLEVBQWM7QUFDNUIsVUFBSUEsWUFBSixFQUFrQjtBQUNkLGVBQU8sS0FBS1AsTUFBTCxDQUFZVSxZQUFaLENBQXlCTCxNQUF6QixDQUFQO0FBQ0g7O0FBQ0QsYUFBTyxLQUFLTCxNQUFMLENBQVlXLFlBQVosQ0FBeUJOLE1BQXpCLENBQVA7QUFDSDs7OzZCQUVRQSxNLEVBQVFFLFksRUFBYztBQUMzQixVQUFJQSxZQUFKLEVBQWtCO0FBQ2QsZUFBTyxLQUFLUCxNQUFMLENBQVlZLFdBQVosQ0FBd0JQLE1BQXhCLENBQVA7QUFDSDs7QUFDRCxhQUFPLEtBQUtMLE1BQUwsQ0FBWWEsV0FBWixDQUF3QlIsTUFBeEIsQ0FBUDtBQUNIOzs7Ozs7OztBQUdMLFNBQVNKLHVCQUFULENBQWlDRCxNQUFqQyxFQUF5QztBQUNyQyxTQUFPLFFBQU9BLE1BQVAsTUFBa0IsUUFBbEIsSUFDQUEsTUFBTSxDQUFDSSxNQUFQLEtBQWtCVSxTQURsQixJQUVBZCxNQUFNLENBQUNNLFNBQVAsS0FBcUJRLFNBRnJCLElBR0FkLE1BQU0sQ0FBQ1EsWUFBUCxLQUF3Qk0sU0FIeEIsSUFJQWQsTUFBTSxDQUFDUyxZQUFQLEtBQXdCSyxTQUp4QixJQUtBZCxNQUFNLENBQUNVLFlBQVAsS0FBd0JJLFNBTHhCLElBTUFkLE1BQU0sQ0FBQ1csWUFBUCxLQUF3QkcsU0FOeEIsSUFPQWQsTUFBTSxDQUFDWSxXQUFQLEtBQXVCRSxTQVB2QixJQVFBZCxNQUFNLENBQUNhLFdBQVAsS0FBdUJDLFNBUjlCO0FBU0giLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXhpZnJlYWRlci9zcmMvZGF0YXZpZXcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRhVmlldyB7XG4gICAgY29uc3RydWN0b3IoYnVmZmVyKSB7XG4gICAgICAgIGlmIChidWZmZXJUeXBlSXNVbnN1cHBvcnRlZChidWZmZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFWaWV3OiBQYXNzZWQgYnVmZmVyIHR5cGUgaXMgdW5zdXBwb3J0ZWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gdGhpcy5idWZmZXIubGVuZ3RoO1xuICAgIH1cblxuICAgIGdldFVpbnQ4KG9mZnNldCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIucmVhZFVJbnQ4KG9mZnNldCk7XG4gICAgfVxuXG4gICAgZ2V0VWludDE2KG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gICAgICAgIGlmIChsaXR0bGVFbmRpYW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5yZWFkVUludDE2TEUob2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIucmVhZFVJbnQxNkJFKG9mZnNldCk7XG4gICAgfVxuXG4gICAgZ2V0VWludDMyKG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gICAgICAgIGlmIChsaXR0bGVFbmRpYW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5yZWFkVUludDMyTEUob2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIucmVhZFVJbnQzMkJFKG9mZnNldCk7XG4gICAgfVxuXG4gICAgZ2V0SW50MzIob2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgICAgICAgaWYgKGxpdHRsZUVuZGlhbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnJlYWRJbnQzMkxFKG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnJlYWRJbnQzMkJFKG9mZnNldCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBidWZmZXJUeXBlSXNVbnN1cHBvcnRlZChidWZmZXIpIHtcbiAgICByZXR1cm4gdHlwZW9mIGJ1ZmZlciAhPT0gJ29iamVjdCdcbiAgICAgICAgfHwgYnVmZmVyLmxlbmd0aCA9PT0gdW5kZWZpbmVkXG4gICAgICAgIHx8IGJ1ZmZlci5yZWFkVUludDggPT09IHVuZGVmaW5lZFxuICAgICAgICB8fCBidWZmZXIucmVhZFVJbnQxNkxFID09PSB1bmRlZmluZWRcbiAgICAgICAgfHwgYnVmZmVyLnJlYWRVSW50MTZCRSA9PT0gdW5kZWZpbmVkXG4gICAgICAgIHx8IGJ1ZmZlci5yZWFkVUludDMyTEUgPT09IHVuZGVmaW5lZFxuICAgICAgICB8fCBidWZmZXIucmVhZFVJbnQzMkJFID09PSB1bmRlZmluZWRcbiAgICAgICAgfHwgYnVmZmVyLnJlYWRJbnQzMkxFID09PSB1bmRlZmluZWRcbiAgICAgICAgfHwgYnVmZmVyLnJlYWRJbnQzMkJFID09PSB1bmRlZmluZWQ7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/dataview.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/dom-parser.js":
/*!***************************************************!*\
  !*** ./node_modules/exifreader/src/dom-parser.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  get: get\n});\n\nfunction get() {\n  if (typeof DOMParser !== 'undefined') {\n    return DOMParser;\n  }\n\n  try {\n    return eval('require')('xmldom').DOMParser; // This stops Webpack from replacing the require with a generic import and bundling the module.\n  } catch (error) {\n    return undefined;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL2RvbS1wYXJzZXIuanM/NmYzNyJdLCJuYW1lcyI6WyJnZXQiLCJET01QYXJzZXIiLCJldmFsIiwiZXJyb3IiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7OztBQUllO0FBQ1hBLEtBQUcsRUFBSEE7QUFEVyxDQUFmOztBQUlBLFNBQVNBLEdBQVQsR0FBZTtBQUNYLE1BQUksT0FBT0MsU0FBUCxLQUFxQixXQUF6QixFQUFzQztBQUNsQyxXQUFPQSxTQUFQO0FBQ0g7O0FBQ0QsTUFBSTtBQUNBLFdBQU9DLElBQUksQ0FBQyxTQUFELENBQUosQ0FBZ0IsUUFBaEIsRUFBMEJELFNBQWpDLENBREEsQ0FDNEM7QUFDL0MsR0FGRCxDQUVFLE9BQU9FLEtBQVAsRUFBYztBQUNaLFdBQU9DLFNBQVA7QUFDSDtBQUNKIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL2RvbS1wYXJzZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGdldFxufTtcblxuZnVuY3Rpb24gZ2V0KCkge1xuICAgIGlmICh0eXBlb2YgRE9NUGFyc2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gRE9NUGFyc2VyO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZXZhbCgncmVxdWlyZScpKCd4bWxkb20nKS5ET01QYXJzZXI7IC8vIFRoaXMgc3RvcHMgV2VicGFjayBmcm9tIHJlcGxhY2luZyB0aGUgcmVxdWlyZSB3aXRoIGEgZ2VuZXJpYyBpbXBvcnQgYW5kIGJ1bmRsaW5nIHRoZSBtb2R1bGUuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/dom-parser.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/errors.js":
/*!***********************************************!*\
  !*** ./node_modules/exifreader/src/errors.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n/**\n * Thrown when no Exif metadata was found for the given image.\n *\n * @param {string} message The error message.\n */\nfunction MetadataMissingError(message) {\n  this.name = 'MetadataMissingError';\n  this.message = message || 'No Exif data';\n  this.stack = new Error().stack;\n}\n\nMetadataMissingError.prototype = new Error();\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  MetadataMissingError: MetadataMissingError\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL2Vycm9ycy5qcz84OTM1Il0sIm5hbWVzIjpbIk1ldGFkYXRhTWlzc2luZ0Vycm9yIiwibWVzc2FnZSIsIm5hbWUiLCJzdGFjayIsIkVycm9yIiwicHJvdG90eXBlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBOzs7O0FBSUE7Ozs7O0FBS0EsU0FBU0Esb0JBQVQsQ0FBOEJDLE9BQTlCLEVBQXVDO0FBQ25DLE9BQUtDLElBQUwsR0FBWSxzQkFBWjtBQUNBLE9BQUtELE9BQUwsR0FBZUEsT0FBTyxJQUFJLGNBQTFCO0FBQ0EsT0FBS0UsS0FBTCxHQUFjLElBQUlDLEtBQUosRUFBRCxDQUFjRCxLQUEzQjtBQUNIOztBQUVESCxvQkFBb0IsQ0FBQ0ssU0FBckIsR0FBaUMsSUFBSUQsS0FBSixFQUFqQztBQUVlO0FBQ1hKLHNCQUFvQixFQUFwQkE7QUFEVyxDQUFmIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL2Vycm9ycy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwczovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG4vKipcbiAqIFRocm93biB3aGVuIG5vIEV4aWYgbWV0YWRhdGEgd2FzIGZvdW5kIGZvciB0aGUgZ2l2ZW4gaW1hZ2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIE1ldGFkYXRhTWlzc2luZ0Vycm9yKG1lc3NhZ2UpIHtcbiAgICB0aGlzLm5hbWUgPSAnTWV0YWRhdGFNaXNzaW5nRXJyb3InO1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UgfHwgJ05vIEV4aWYgZGF0YSc7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG59XG5cbk1ldGFkYXRhTWlzc2luZ0Vycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIE1ldGFkYXRhTWlzc2luZ0Vycm9yLFxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/errors.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/exif-reader.js":
/*!****************************************************!*\
  !*** ./node_modules/exifreader/src/exif-reader.js ***!
  \****************************************************/
/*! exports provided: default, errors, load, loadView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"errors\", function() { return errors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"load\", function() { return load; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadView\", function() { return loadView; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/exifreader/src/utils.js\");\n/* harmony import */ var _dataview_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataview.js */ \"./node_modules/exifreader/src/dataview.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/exifreader/src/constants.js\");\n/* harmony import */ var _tag_names_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tag-names-utils.js */ \"./node_modules/exifreader/src/tag-names-utils.js\");\n/* harmony import */ var _image_header_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./image-header.js */ \"./node_modules/exifreader/src/image-header.js\");\n/* harmony import */ var _tags_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tags.js */ \"./node_modules/exifreader/src/tags.js\");\n/* harmony import */ var _file_tags_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./file-tags.js */ \"./node_modules/exifreader/src/file-tags.js\");\n/* harmony import */ var _iptc_tags_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./iptc-tags.js */ \"./node_modules/exifreader/src/iptc-tags.js\");\n/* harmony import */ var _xmp_tags_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./xmp-tags.js */ \"./node_modules/exifreader/src/xmp-tags.js\");\n/* harmony import */ var _icc_tags_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./icc-tags.js */ \"./node_modules/exifreader/src/icc-tags.js\");\n/* harmony import */ var _png_file_tags_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./png-file-tags.js */ \"./node_modules/exifreader/src/png-file-tags.js\");\n/* harmony import */ var _thumbnail_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./thumbnail.js */ \"./node_modules/exifreader/src/thumbnail.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/exifreader/src/errors.js\");\n/**\n * ExifReader\n * http://github.com/mattiasw/exifreader\n * Copyright (C) 2011-2020  Mattias Wallander <mattias@wallander.eu>\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  load: load,\n  loadView: loadView,\n  errors: _errors_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"]\n});\nvar errors = _errors_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"];\nfunction load(data) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    expanded: false\n  };\n\n  if (isNodeBuffer(data)) {\n    // File data read in Node can share the underlying buffer with other\n    // data. Therefore it's safest to get a new one to avoid weird bugs.\n    data = new Uint8Array(data).buffer;\n  }\n\n  return loadView(getDataView(data), options);\n}\n\nfunction isNodeBuffer(data) {\n  try {\n    return Buffer.isBuffer(data); // eslint-disable-line no-undef\n  } catch (error) {\n    return false;\n  }\n}\n\nfunction getDataView(data) {\n  try {\n    return new DataView(data);\n  } catch (error) {\n    return new _dataview_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](data);\n  }\n}\n\nfunction loadView(dataView) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    expanded: false\n  };\n  var foundMetaData = false;\n  var tags = {};\n\n  var _ImageHeader$parseApp = _image_header_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].parseAppMarkers(dataView),\n      fileDataOffset = _ImageHeader$parseApp.fileDataOffset,\n      tiffHeaderOffset = _ImageHeader$parseApp.tiffHeaderOffset,\n      iptcDataOffset = _ImageHeader$parseApp.iptcDataOffset,\n      xmpChunks = _ImageHeader$parseApp.xmpChunks,\n      iccChunks = _ImageHeader$parseApp.iccChunks,\n      mpfDataOffset = _ImageHeader$parseApp.mpfDataOffset,\n      pngHeaderOffset = _ImageHeader$parseApp.pngHeaderOffset;\n\n  if (_constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_JPEG && _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_FILE && hasFileData(fileDataOffset)) {\n    foundMetaData = true;\n    var readTags = _file_tags_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].read(dataView, fileDataOffset);\n\n    if (options.expanded) {\n      tags.file = readTags;\n    } else {\n      tags = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])({}, tags, readTags);\n    }\n  }\n\n  if (_constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_EXIF && hasExifData(tiffHeaderOffset)) {\n    foundMetaData = true;\n\n    var _readTags = _tags_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].read(dataView, tiffHeaderOffset);\n\n    if (_readTags.Thumbnail) {\n      tags.Thumbnail = _readTags.Thumbnail;\n      delete _readTags.Thumbnail;\n    }\n\n    if (options.expanded) {\n      tags.exif = _readTags;\n      addGpsGroup(tags);\n    } else {\n      tags = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])({}, tags, _readTags);\n    }\n\n    if (_constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_TIFF && _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_IPTC && _readTags['IPTC-NAA'] && !hasIptcData(iptcDataOffset)) {\n      var readIptcTags = _iptc_tags_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].read(_readTags['IPTC-NAA'].value, 0);\n\n      if (options.expanded) {\n        tags.iptc = readIptcTags;\n      } else {\n        tags = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])({}, tags, readIptcTags);\n      }\n    }\n\n    if (_constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_TIFF && _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_XMP && _readTags['ApplicationNotes'] && !hasXmpData(xmpChunks)) {\n      var readXmpTags = _xmp_tags_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"].read(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValueFromArray\"])(_readTags['ApplicationNotes'].value));\n\n      if (options.expanded) {\n        tags.xmp = readXmpTags;\n      } else {\n        tags = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])({}, tags, readXmpTags);\n      }\n    }\n\n    if (_constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_TIFF && _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_ICC && _readTags['ICC_Profile'] && !hasIccData(iccChunks)) {\n      var readIccTags = _icc_tags_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].read(_readTags['ICC_Profile'].value, [{\n        offset: 0,\n        length: _readTags['ICC_Profile'].value.length,\n        chunkNumber: 1,\n        chunksTotal: 1\n      }]);\n\n      if (options.expanded) {\n        tags.icc = readIccTags;\n      } else {\n        tags = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])({}, tags, readIccTags);\n      }\n    }\n  }\n\n  if (_constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_JPEG && _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_IPTC && hasIptcData(iptcDataOffset)) {\n    foundMetaData = true;\n\n    var _readTags2 = _iptc_tags_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].read(dataView, iptcDataOffset);\n\n    if (options.expanded) {\n      tags.iptc = _readTags2;\n    } else {\n      tags = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])({}, tags, _readTags2);\n    }\n  }\n\n  if (_constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_XMP && hasXmpData(xmpChunks)) {\n    foundMetaData = true;\n\n    var _readTags3 = _xmp_tags_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"].read(dataView, xmpChunks);\n\n    if (options.expanded) {\n      tags.xmp = _readTags3;\n    } else {\n      tags = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])({}, tags, _readTags3);\n    }\n  }\n\n  if ((_constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_JPEG || _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_WEBP) && _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_ICC && hasIccData(iccChunks)) {\n    foundMetaData = true;\n\n    var _readTags4 = _icc_tags_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].read(dataView, iccChunks);\n\n    if (options.expanded) {\n      tags.icc = _readTags4;\n    } else {\n      tags = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])({}, tags, _readTags4);\n    }\n  }\n\n  if (_constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_MPF && hasMpfData(mpfDataOffset)) {\n    foundMetaData = true;\n    var readMpfTags = _tags_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].readMpf(dataView, mpfDataOffset);\n\n    if (options.expanded) {\n      tags.mpf = readMpfTags;\n    } else {\n      tags = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])({}, tags, readMpfTags);\n    }\n  }\n\n  if (_constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_PNG && _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_PNG_FILE && hasPngFileData(pngHeaderOffset)) {\n    foundMetaData = true;\n\n    var _readTags5 = _png_file_tags_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].read(dataView, pngHeaderOffset);\n\n    if (options.expanded) {\n      tags.pngFile = _readTags5;\n    } else {\n      tags = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])({}, tags, _readTags5);\n    }\n  }\n\n  var thumbnail = (_constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_JPEG || _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_WEBP) && _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_EXIF && _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].USE_THUMBNAIL && _thumbnail_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"].get(dataView, tags.Thumbnail, tiffHeaderOffset);\n\n  if (thumbnail) {\n    foundMetaData = true;\n    tags.Thumbnail = thumbnail;\n  } else {\n    delete tags.Thumbnail;\n  }\n\n  if (!foundMetaData) {\n    throw new _errors_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"].MetadataMissingError();\n  }\n\n  return tags;\n}\n\nfunction hasFileData(fileDataOffset) {\n  return fileDataOffset !== undefined;\n}\n\nfunction hasExifData(tiffHeaderOffset) {\n  return tiffHeaderOffset !== undefined;\n}\n\nfunction addGpsGroup(tags) {\n  if (tags.exif) {\n    if (tags.exif.GPSLatitude && tags.exif.GPSLatitudeRef) {\n      try {\n        tags.gps = tags.gps || {};\n        tags.gps.Latitude = Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"getCalculatedGpsValue\"])(tags.exif.GPSLatitude.value);\n\n        if (tags.exif.GPSLatitudeRef.value.join('') === 'S') {\n          tags.gps.Latitude = -tags.gps.Latitude;\n        }\n      } catch (error) {// Ignore.\n      }\n    }\n\n    if (tags.exif.GPSLongitude && tags.exif.GPSLongitudeRef) {\n      try {\n        tags.gps = tags.gps || {};\n        tags.gps.Longitude = Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"getCalculatedGpsValue\"])(tags.exif.GPSLongitude.value);\n\n        if (tags.exif.GPSLongitudeRef.value.join('') === 'W') {\n          tags.gps.Longitude = -tags.gps.Longitude;\n        }\n      } catch (error) {// Ignore.\n      }\n    }\n\n    if (tags.exif.GPSAltitude && tags.exif.GPSAltitudeRef) {\n      try {\n        tags.gps = tags.gps || {};\n        tags.gps.Altitude = tags.exif.GPSAltitude.value[0] / tags.exif.GPSAltitude.value[1];\n\n        if (tags.exif.GPSAltitudeRef.value === 1) {\n          tags.gps.Altitude = -tags.gps.Altitude;\n        }\n      } catch (error) {// Ignore.\n      }\n    }\n  }\n}\n\nfunction hasIptcData(iptcDataOffset) {\n  return iptcDataOffset !== undefined;\n}\n\nfunction hasXmpData(xmpChunks) {\n  return Array.isArray(xmpChunks) && xmpChunks.length > 0;\n}\n\nfunction hasIccData(iccDataOffsets) {\n  return Array.isArray(iccDataOffsets) && iccDataOffsets.length > 0;\n}\n\nfunction hasMpfData(mpfDataOffset) {\n  return mpfDataOffset !== undefined;\n}\n\nfunction hasPngFileData(pngFileDataOffset) {\n  return pngFileDataOffset !== undefined;\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/exif-reader.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/file-tags.js":
/*!**************************************************!*\
  !*** ./node_modules/exifreader/src/file-tags.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"./node_modules/exifreader/src/types.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  read: read\n});\n\nfunction read(dataView, fileDataOffset) {\n  var length = getLength(dataView, fileDataOffset);\n  var numberOfColorComponents = getNumberOfColorComponents(dataView, fileDataOffset, length);\n  return {\n    'Bits Per Sample': getDataPrecision(dataView, fileDataOffset, length),\n    'Image Height': getImageHeight(dataView, fileDataOffset, length),\n    'Image Width': getImageWidth(dataView, fileDataOffset, length),\n    'Color Components': numberOfColorComponents,\n    'Subsampling': numberOfColorComponents && getSubsampling(dataView, fileDataOffset, numberOfColorComponents.value, length)\n  };\n}\n\nfunction getLength(dataView, fileDataOffset) {\n  return _types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getShortAt(dataView, fileDataOffset);\n}\n\nfunction getDataPrecision(dataView, fileDataOffset, length) {\n  var OFFSET = 2;\n  var SIZE = 1;\n\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n\n  var value = _types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getByteAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value: value,\n    description: '' + value\n  };\n}\n\nfunction getImageHeight(dataView, fileDataOffset, length) {\n  var OFFSET = 3;\n  var SIZE = 2;\n\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n\n  var value = _types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getShortAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value: value,\n    description: \"\".concat(value, \"px\")\n  };\n}\n\nfunction getImageWidth(dataView, fileDataOffset, length) {\n  var OFFSET = 5;\n  var SIZE = 2;\n\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n\n  var value = _types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getShortAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value: value,\n    description: \"\".concat(value, \"px\")\n  };\n}\n\nfunction getNumberOfColorComponents(dataView, fileDataOffset, length) {\n  var OFFSET = 7;\n  var SIZE = 1;\n\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n\n  var value = _types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getByteAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value: value,\n    description: '' + value\n  };\n}\n\nfunction getSubsampling(dataView, fileDataOffset, numberOfColorComponents, length) {\n  var OFFSET = 8;\n  var SIZE = 3 * numberOfColorComponents;\n\n  if (OFFSET + SIZE > length) {\n    return undefined;\n  }\n\n  var components = [];\n\n  for (var i = 0; i < numberOfColorComponents; i++) {\n    var componentOffset = fileDataOffset + OFFSET + i * 3;\n    components.push([_types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getByteAt(dataView, componentOffset), _types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getByteAt(dataView, componentOffset + 1), _types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getByteAt(dataView, componentOffset + 2)]);\n  }\n\n  return {\n    value: components,\n    description: components.length > 1 ? getComponentIds(components) + getSamplingType(components) : ''\n  };\n}\n\nfunction getComponentIds(components) {\n  var ids = {\n    0x01: 'Y',\n    0x02: 'Cb',\n    0x03: 'Cr',\n    0x04: 'I',\n    0x05: 'Q'\n  };\n  return components.map(function (compontent) {\n    return ids[compontent[0]];\n  }).join('');\n}\n\nfunction getSamplingType(components) {\n  var types = {\n    0x11: '4:4:4 (1 1)',\n    0x12: '4:4:0 (1 2)',\n    0x14: '4:4:1 (1 4)',\n    0x21: '4:2:2 (2 1)',\n    0x22: '4:2:0 (2 2)',\n    0x24: '4:2:1 (2 4)',\n    0x41: '4:1:1 (4 1)',\n    0x42: '4:1:0 (4 2)'\n  };\n\n  if (components.length === 0 || components[0][1] === undefined || types[components[0][1]] === undefined) {\n    return '';\n  }\n\n  return types[components[0][1]];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/file-tags.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/icc-tag-names.js":
/*!******************************************************!*\
  !*** ./node_modules/exifreader/src/icc-tag-names.js ***!
  \******************************************************/
/*! exports provided: iccTags, iccProfile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"iccTags\", function() { return iccTags; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"iccProfile\", function() { return iccProfile; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/exifreader/src/utils.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nvar iccTags = {\n  'desc': {\n    'name': 'ICC Description'\n  },\n  'cprt': {\n    'name': 'ICC Copyright'\n  },\n  'dmdd': {\n    'name': 'ICC Device Model Description'\n  },\n  'vued': {\n    'name': 'ICC Viewing Conditions Description'\n  },\n  'dmnd': {\n    'name': 'ICC Device Manufacturer for Display'\n  },\n  'tech': {\n    'name': 'Technology'\n  }\n};\nvar iccProfile = {\n  4: {\n    'name': 'Preferred CMM type',\n    'value': function value(dataView, offset) {\n      return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset, 4);\n    },\n    'description': function description(value) {\n      return value !== null ? toCompany(value) : '';\n    }\n  },\n  8: {\n    'name': 'Profile Version',\n    'value': function value(dataView, offset) {\n      return dataView.getUint8(offset).toString(10) + '.' + (dataView.getUint8(offset + 1) >> 4).toString(10) + '.' + (dataView.getUint8(offset + 1) % 16).toString(10);\n    }\n  },\n  12: {\n    'name': 'Profile/Device class',\n    'value': function value(dataView, offset) {\n      return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset, 4);\n    },\n    'description': function description(value) {\n      switch (value.toLowerCase()) {\n        case 'scnr':\n          return 'Input Device profile';\n\n        case 'mntr':\n          return 'Display Device profile';\n\n        case 'prtr':\n          return 'Output Device profile';\n\n        case 'link':\n          return 'DeviceLink profile';\n\n        case 'abst':\n          return 'Abstract profile';\n\n        case 'spac':\n          return 'ColorSpace profile';\n\n        case 'nmcl':\n          return 'NamedColor profile';\n\n        case 'cenc':\n          return 'ColorEncodingSpace profile';\n\n        case 'mid ':\n          return 'MultiplexIdentification profile';\n\n        case 'mlnk':\n          return 'MultiplexLink profile';\n\n        case 'mvis':\n          return 'MultiplexVisualization profile';\n\n        default:\n          return value;\n      }\n    }\n  },\n  16: {\n    'name': 'Color Space',\n    'value': function value(dataView, offset) {\n      return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset, 4);\n    }\n  },\n  20: {\n    'name': 'Connection Space',\n    'value': function value(dataView, offset) {\n      return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset, 4);\n    }\n  },\n  24: {\n    'name': 'ICC Profile Date',\n    'value': function value(dataView, offset) {\n      return parseDate(dataView, offset).toISOString();\n    }\n  },\n  36: {\n    'name': 'ICC Signature',\n    'value': function value(dataView, offset) {\n      return sliceToString(dataView.buffer.slice(offset, offset + 4));\n    }\n  },\n  40: {\n    'name': 'Primary Platform',\n    'value': function value(dataView, offset) {\n      return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset, 4);\n    },\n    'description': function description(value) {\n      return toCompany(value);\n    }\n  },\n  48: {\n    'name': 'Device Manufacturer',\n    'value': function value(dataView, offset) {\n      return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset, 4);\n    },\n    'description': function description(value) {\n      return toCompany(value);\n    }\n  },\n  52: {\n    'name': 'Device Model Number',\n    'value': function value(dataView, offset) {\n      return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset, 4);\n    }\n  },\n  64: {\n    'name': 'Rendering Intent',\n    'value': function value(dataView, offset) {\n      return dataView.getUint32(offset);\n    },\n    'description': function description(value) {\n      switch (value) {\n        case 0:\n          return 'Perceptual';\n\n        case 1:\n          return 'Relative Colorimetric';\n\n        case 2:\n          return 'Saturation';\n\n        case 3:\n          return 'Absolute Colorimetric';\n\n        default:\n          return value;\n      }\n    }\n  },\n  80: {\n    'name': 'Profile Creator',\n    'value': function value(dataView, offset) {\n      return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset, 4);\n    }\n  }\n};\n\nfunction parseDate(dataView, offset) {\n  var year = dataView.getUint16(offset);\n  var month = dataView.getUint16(offset + 2) - 1;\n  var day = dataView.getUint16(offset + 4);\n  var hours = dataView.getUint16(offset + 6);\n  var minutes = dataView.getUint16(offset + 8);\n  var seconds = dataView.getUint16(offset + 10);\n  return new Date(Date.UTC(year, month, day, hours, minutes, seconds));\n}\n\nfunction sliceToString(slice) {\n  return String.fromCharCode.apply(null, new Uint8Array(slice));\n}\n\nfunction toCompany(value) {\n  switch (value.toLowerCase()) {\n    case 'appl':\n      return 'Apple';\n\n    case 'adbe':\n      return 'Adobe';\n\n    case 'msft':\n      return 'Microsoft';\n\n    case 'sunw':\n      return 'Sun Microsystems';\n\n    case 'sgi':\n      return 'Silicon Graphics';\n\n    case 'tgnt':\n      return 'Taligent';\n\n    default:\n      return value;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/icc-tag-names.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/icc-tags.js":
/*!*************************************************!*\
  !*** ./node_modules/exifreader/src/icc-tags.js ***!
  \*************************************************/
/*! exports provided: default, parseTags */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseTags\", function() { return parseTags; });\n/* harmony import */ var _icc_tag_names_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./icc-tag-names.js */ \"./node_modules/exifreader/src/icc-tag-names.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/exifreader/src/utils.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  read: read\n});\nvar PROFILE_HEADER_LENGTH = 84;\nvar ICC_TAG_COUNT_OFFSET = 128;\nvar ICC_SIGNATURE = 'acsp';\nvar TAG_TYPE_DESC = 'desc';\nvar TAG_TYPE_MULTI_LOCALIZED_UNICODE_TYPE = 'mluc';\nvar TAG_TYPE_TEXT = 'text';\nvar TAG_TYPE_SIGNATURE = 'sig ';\nvar TAG_TABLE_SINGLE_TAG_DATA = 12; // ICC profile data can be longer than application segment max length of ~64k.\n// so it can be split into multiple APP2 segments. Each segment includes\n// total chunk count and chunk number.\n// Here we read all chunks into single continious array of bytes.\n\nfunction read(dataView, iccData) {\n  try {\n    var totalIccProfileLength = iccData.reduce(function (sum, icc) {\n      return sum + icc.length;\n    }, 0);\n    var iccBinaryData = new Uint8Array(totalIccProfileLength);\n    var offset = 0;\n    var buffer = getBuffer(dataView);\n\n    var _loop = function _loop(chunkNumber) {\n      var iccDataChunk = iccData.find(function (x) {\n        return x.chunkNumber === chunkNumber;\n      });\n\n      if (!iccDataChunk) {\n        throw new Error(\"ICC chunk \".concat(chunkNumber, \" not found\"));\n      }\n\n      var data = buffer.slice(iccDataChunk.offset, iccDataChunk.offset + iccDataChunk.length);\n      var chunkData = new Uint8Array(data);\n      iccBinaryData.set(chunkData, offset);\n      offset += chunkData.length;\n    };\n\n    for (var chunkNumber = 1; chunkNumber <= iccData.length; chunkNumber++) {\n      _loop(chunkNumber);\n    }\n\n    return parseTags(new DataView(iccBinaryData.buffer));\n  } catch (error) {\n    return {};\n  }\n}\n\nfunction getBuffer(dataView) {\n  if (Array.isArray(dataView)) {\n    return new DataView(Uint8Array.from(dataView).buffer).buffer;\n  }\n\n  return dataView.buffer;\n}\n\nfunction iccDoesNotHaveTagCount(buffer) {\n  return buffer.length < ICC_TAG_COUNT_OFFSET + 4;\n}\n\nfunction hasTagsData(buffer, tagHeaderOffset) {\n  return buffer.length < tagHeaderOffset + TAG_TABLE_SINGLE_TAG_DATA;\n}\n\nfunction parseTags(dataView) {\n  var buffer = dataView.buffer;\n  var length = dataView.getUint32();\n\n  if (dataView.byteLength !== length) {\n    throw new Error('ICC profile length not matching');\n  }\n\n  if (dataView.length < PROFILE_HEADER_LENGTH) {\n    throw new Error('ICC profile too short');\n  }\n\n  var tags = {};\n  var iccProfileKeys = Object.keys(_icc_tag_names_js__WEBPACK_IMPORTED_MODULE_0__[\"iccProfile\"]);\n\n  for (var i = 0; i < iccProfileKeys.length; i++) {\n    var offset = iccProfileKeys[i];\n    var profileEntry = _icc_tag_names_js__WEBPACK_IMPORTED_MODULE_0__[\"iccProfile\"][offset];\n    var value = profileEntry.value(dataView, parseInt(offset, 10));\n    var description = value;\n\n    if (profileEntry.description) {\n      description = profileEntry.description(value);\n    }\n\n    tags[profileEntry.name] = {\n      value: value,\n      description: description\n    };\n  }\n\n  var signature = sliceToString(buffer.slice(36, 40));\n\n  if (signature !== ICC_SIGNATURE) {\n    throw new Error('ICC profile: missing signature');\n  }\n  /* ICC data is incomplete but we have header parsed so lets return it */\n\n\n  if (iccDoesNotHaveTagCount(buffer)) {\n    return tags;\n  }\n\n  var tagCount = dataView.getUint32(128);\n  var tagHeaderOffset = 132;\n\n  for (var _i = 0; _i < tagCount; _i++) {\n    if (hasTagsData(buffer, tagHeaderOffset)) {\n      // Tags are corrupted (offset too far), return what we parsed until now\n      return tags;\n    }\n\n    var tagSignature = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"getStringFromDataView\"])(dataView, tagHeaderOffset, 4);\n    var tagOffset = dataView.getUint32(tagHeaderOffset + 4);\n    var tagSize = dataView.getUint32(tagHeaderOffset + 8);\n\n    if (tagOffset > buffer.length) {\n      // Tag data is invalid, lets return what we managed to parse\n      return tags;\n    }\n\n    var tagType = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"getStringFromDataView\"])(dataView, tagOffset, 4);\n\n    if (tagType === TAG_TYPE_DESC) {\n      var tagValueSize = dataView.getUint32(tagOffset + 8);\n\n      if (tagValueSize > tagSize) {\n        // Tag data is invalid, lets return what we managed to parse\n        return tags;\n      }\n\n      var val = sliceToString(buffer.slice(tagOffset + 12, tagOffset + tagValueSize + 11));\n      addTag(tags, tagSignature, val);\n    } else if (tagType === TAG_TYPE_MULTI_LOCALIZED_UNICODE_TYPE) {\n      var numRecords = dataView.getUint32(tagOffset + 8);\n      var recordSize = dataView.getUint32(tagOffset + 12);\n\n      var _offset = tagOffset + 16;\n\n      var _val = [];\n\n      for (var recordNum = 0; recordNum < numRecords; recordNum++) {\n        var languageCode = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"getStringFromDataView\"])(dataView, _offset + 0, 2);\n        var countryCode = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"getStringFromDataView\"])(dataView, _offset + 2, 2);\n        var textLength = dataView.getUint32(_offset + 4);\n        var textOffset = dataView.getUint32(_offset + 8);\n        var text = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"getUnicodeStringFromDataView\"])(dataView, tagOffset + textOffset, textLength);\n\n        _val.push({\n          languageCode: languageCode,\n          countryCode: countryCode,\n          text: text\n        });\n\n        _offset += recordSize;\n      }\n\n      if (numRecords === 1) {\n        addTag(tags, tagSignature, _val[0].text);\n      } else {\n        var valObj = {};\n\n        for (var valIndex = 0; valIndex < _val.length; valIndex++) {\n          valObj[\"\".concat(_val[valIndex].languageCode, \"-\").concat(_val[valIndex].countryCode)] = _val[valIndex].text;\n        }\n\n        addTag(tags, tagSignature, valObj);\n      }\n    } else if (tagType === TAG_TYPE_TEXT) {\n      var _val2 = sliceToString(buffer.slice(tagOffset + 8, tagOffset + tagSize - 7));\n\n      addTag(tags, tagSignature, _val2);\n    } else if (tagType === TAG_TYPE_SIGNATURE) {\n      var _val3 = sliceToString(buffer.slice(tagOffset + 8, tagOffset + 12));\n\n      addTag(tags, tagSignature, _val3);\n    }\n\n    tagHeaderOffset = tagHeaderOffset + 12;\n  }\n\n  return tags;\n}\n\nfunction sliceToString(slice) {\n  return String.fromCharCode.apply(null, new Uint8Array(slice));\n}\n\nfunction addTag(tags, tagSignature, value) {\n  if (_icc_tag_names_js__WEBPACK_IMPORTED_MODULE_0__[\"iccTags\"][tagSignature]) {\n    tags[_icc_tag_names_js__WEBPACK_IMPORTED_MODULE_0__[\"iccTags\"][tagSignature].name] = {\n      value: value,\n      description: value\n    };\n  } else {\n    tags[tagSignature] = {\n      value: value,\n      description: value\n    };\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/icc-tags.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/image-header-heic.js":
/*!**********************************************************!*\
  !*** ./node_modules/exifreader/src/image-header-heic.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/exifreader/src/utils.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/exifreader/src/constants.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  isHeicFile: isHeicFile,\n  findHeicOffsets: findHeicOffsets\n});\n\nfunction isHeicFile(dataView) {\n  var HEIC_ID = 'ftyp';\n  var HEIC_ID_OFFSET = 4;\n  var HEIC_MAJOR_BRANDS = ['heic', 'heix', 'hevc', 'hevx', 'heim', 'heis', 'hevm', 'hevs', 'mif1'];\n  var HEIC_MAJOR_BRAND_LENGTH = 4;\n  var heicMajorBrand = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, HEIC_ID_OFFSET + HEIC_ID.length, HEIC_MAJOR_BRAND_LENGTH);\n  return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, HEIC_ID_OFFSET, HEIC_ID.length) === HEIC_ID && HEIC_MAJOR_BRANDS.indexOf(heicMajorBrand) !== -1;\n}\n\nfunction findHeicOffsets(dataView) {\n  if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_EXIF || _constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_ICC) {\n    var _findMetaAtom = findMetaAtom(dataView),\n        metaOffset = _findMetaAtom.offset,\n        metaLength = _findMetaAtom.length;\n\n    if (metaOffset === undefined) {\n      return {\n        hasAppMarkers: false\n      };\n    }\n\n    var metaEndOffset = Math.min(metaOffset + metaLength, dataView.byteLength);\n\n    var _findMetaItems = findMetaItems(dataView, metaOffset, metaEndOffset),\n        exifItemOffset = _findMetaItems.exifItemOffset,\n        ilocOffset = _findMetaItems.ilocOffset,\n        colrOffset = _findMetaItems.colrOffset;\n\n    var exifOffset = findExifOffset(dataView, exifItemOffset, ilocOffset, metaEndOffset);\n    var iccChunks = findIccChunks(dataView, colrOffset, metaEndOffset);\n    return {\n      hasAppMarkers: exifOffset !== undefined || iccChunks !== undefined,\n      tiffHeaderOffset: exifOffset,\n      iccChunks: iccChunks\n    };\n  }\n\n  return {\n    hasAppMarkers: false\n  };\n}\n\nfunction findMetaAtom(dataView) {\n  var ATOM_LENGTH_SIZE = 4;\n  var ATOM_TYPE_SIZE = 4;\n  var ATOM_MIN_LENGTH = 8;\n  var ATOM_TYPE_OFFSET = 4;\n  var offset = 0;\n\n  while (offset + ATOM_LENGTH_SIZE + ATOM_TYPE_SIZE <= dataView.byteLength) {\n    var atomLength = getAtomLength(dataView, offset);\n\n    if (atomLength >= ATOM_MIN_LENGTH) {\n      var atomType = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset + ATOM_TYPE_OFFSET, ATOM_TYPE_SIZE);\n\n      if (atomType === 'meta') {\n        return {\n          offset: offset,\n          length: atomLength\n        };\n      }\n    }\n\n    offset += atomLength;\n  }\n\n  return {\n    offset: undefined,\n    length: 0\n  };\n}\n\nfunction getAtomLength(dataView, offset) {\n  var ATOM_EXTENDED_SIZE_LOW_OFFSET = 12;\n  var atomLength = dataView.getUint32(offset);\n\n  if (extendsToEndOfFile(atomLength)) {\n    return dataView.byteLength - offset;\n  }\n\n  if (hasExtendedSize(atomLength)) {\n    if (hasEmptyHighBits(dataView, offset)) {\n      // It's a bit tricky to handle 64 bit numbers in JavaScript. Let's\n      // wait until there are real-world examples where it is necessary.\n      return dataView.getUint32(offset + ATOM_EXTENDED_SIZE_LOW_OFFSET);\n    }\n  }\n\n  return atomLength;\n}\n\nfunction extendsToEndOfFile(atomLength) {\n  return atomLength === 0;\n}\n\nfunction hasExtendedSize(atomLength) {\n  return atomLength === 1;\n}\n\nfunction hasEmptyHighBits(dataView, offset) {\n  var ATOM_EXTENDED_SIZE_OFFSET = 8;\n  return dataView.getUint32(offset + ATOM_EXTENDED_SIZE_OFFSET) === 0;\n}\n\nfunction findMetaItems(dataView, offset, metaEndOffset) {\n  var STRING_SIZE = 4;\n  var ITEM_INDEX_REL_OFFSET = -4;\n  var offsets = {\n    ilocOffset: undefined,\n    exifItemOffset: undefined,\n    colrOffset: undefined\n  };\n\n  while (offset + STRING_SIZE <= metaEndOffset && (!offsets.ilocOffset || !offsets.exifItemOffset || !offsets.colrOffset)) {\n    var itemName = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset, STRING_SIZE);\n\n    if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_EXIF && itemName === 'iloc') {\n      offsets.ilocOffset = offset;\n    } else if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_EXIF && itemName === 'Exif') {\n      offsets.exifItemOffset = offset + ITEM_INDEX_REL_OFFSET;\n    } else if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_ICC && itemName === 'colr') {\n      offsets.colrOffset = offset + ITEM_INDEX_REL_OFFSET;\n    }\n\n    offset++;\n  }\n\n  return offsets;\n}\n\nfunction findExifOffset(dataView, exifItemOffset, offset, metaEndOffset) {\n  var EXIF_ITEM_OFFSET_SIZE = 2;\n  var ILOC_DATA_OFFSET = 12;\n  var EXIF_POINTER_OFFSET = 8;\n  var EXIF_POINTER_SIZE = 4;\n  var EXIF_PREFIX_LENGTH_OFFSET = 4;\n  var ILOC_ITEM_SIZE = 16;\n\n  if (!offset || !exifItemOffset || exifItemOffset + EXIF_ITEM_OFFSET_SIZE > metaEndOffset) {\n    return undefined;\n  }\n\n  var exifItemIndex = dataView.getUint16(exifItemOffset);\n  offset += ILOC_DATA_OFFSET;\n\n  while (offset + ILOC_ITEM_SIZE <= metaEndOffset) {\n    var itemIndex = dataView.getUint16(offset);\n\n    if (itemIndex === exifItemIndex) {\n      var exifPointer = dataView.getUint32(offset + EXIF_POINTER_OFFSET);\n\n      if (exifPointer + EXIF_POINTER_SIZE <= dataView.byteLength) {\n        var exifOffset = dataView.getUint32(exifPointer);\n        var prefixLength = exifOffset + EXIF_PREFIX_LENGTH_OFFSET;\n        return exifPointer + prefixLength;\n      }\n    }\n\n    offset += ILOC_ITEM_SIZE;\n  }\n\n  return undefined;\n}\n\nfunction findIccChunks(dataView, offset, metaEndOffset) {\n  var ITEM_TYPE_OFFSET = 8;\n  var ITEM_TYPE_SIZE = 4;\n  var ITEM_CONTENT_OFFSET = 12;\n\n  if (!offset || offset + ITEM_CONTENT_OFFSET > metaEndOffset) {\n    return undefined;\n  }\n\n  var colorType = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset + ITEM_TYPE_OFFSET, ITEM_TYPE_SIZE);\n\n  if (colorType !== 'prof' && colorType !== 'rICC') {\n    return undefined;\n  }\n\n  return [{\n    offset: offset + ITEM_CONTENT_OFFSET,\n    length: getAtomLength(dataView, offset) - ITEM_CONTENT_OFFSET,\n    chunkNumber: 1,\n    chunksTotal: 1\n  }];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/image-header-heic.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/image-header-jpeg.js":
/*!**********************************************************!*\
  !*** ./node_modules/exifreader/src/image-header-jpeg.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/exifreader/src/utils.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/exifreader/src/constants.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  isJpegFile: isJpegFile,\n  findJpegOffsets: findJpegOffsets\n});\nvar MIN_JPEG_DATA_BUFFER_LENGTH = 2;\nvar JPEG_ID = 0xffd8;\nvar JPEG_ID_SIZE = 2;\nvar APP_ID_OFFSET = 4;\nvar APP_MARKER_SIZE = 2;\nvar TIFF_HEADER_OFFSET = 10; // From start of APP1 marker.\n\nvar IPTC_DATA_OFFSET = 18; // From start of APP13 marker.\n\nvar XMP_DATA_OFFSET = 33; // From start of APP1 marker.\n\nvar XMP_EXTENDED_DATA_OFFSET = 79; // From start of APP1 marker including GUID, total length, and offset.\n\nvar APP2_ICC_DATA_OFFSET = 18; // From start of APP2 marker including marker and chunk/chunk total numbers.\n\nvar MPF_DATA_OFFSET = 8;\nvar APP2_ICC_IDENTIFIER = 'ICC_PROFILE\\0';\nvar ICC_CHUNK_NUMBER_OFFSET = APP_ID_OFFSET + APP2_ICC_IDENTIFIER.length;\nvar ICC_TOTAL_CHUNKS_OFFSET = ICC_CHUNK_NUMBER_OFFSET + 1;\nvar APP2_MPF_IDENTIFIER = 'MPF\\0';\nvar SOF0_MARKER = 0xffc0;\nvar SOF2_MARKER = 0xffc2;\nvar DHT_MARKER = 0xffc4;\nvar DQT_MARKER = 0xffdb;\nvar DRI_MARKER = 0xffdd;\nvar SOS_MARKER = 0xffda;\nvar APP0_MARKER = 0xffe0;\nvar APP1_MARKER = 0xffe1;\nvar APP2_MARKER = 0xffe2;\nvar APP13_MARKER = 0xffed;\nvar APP15_MARKER = 0xffef;\nvar COMMENT_MARKER = 0xfffe;\nvar APP1_EXIF_IDENTIFIER = 'Exif';\nvar APP1_XMP_IDENTIFIER = 'http://ns.adobe.com/xap/1.0/\\x00';\nvar APP1_XMP_EXTENDED_IDENTIFIER = 'http://ns.adobe.com/xmp/extension/\\x00';\nvar APP13_IPTC_IDENTIFIER = 'Photoshop 3.0';\n\nfunction isJpegFile(dataView) {\n  return dataView.byteLength >= MIN_JPEG_DATA_BUFFER_LENGTH && dataView.getUint16(0) === JPEG_ID;\n}\n\nfunction findJpegOffsets(dataView) {\n  var appMarkerPosition = JPEG_ID_SIZE;\n  var fieldLength;\n  var sof0DataOffset;\n  var sof2DataOffset;\n  var tiffHeaderOffset;\n  var iptcDataOffset;\n  var xmpChunks;\n  var iccChunks;\n  var mpfDataOffset;\n\n  while (appMarkerPosition + APP_ID_OFFSET + 5 <= dataView.byteLength) {\n    if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_FILE && isSOF0Marker(dataView, appMarkerPosition)) {\n      sof0DataOffset = appMarkerPosition + APP_MARKER_SIZE;\n    } else if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_FILE && isSOF2Marker(dataView, appMarkerPosition)) {\n      sof2DataOffset = appMarkerPosition + APP_MARKER_SIZE;\n    } else if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_EXIF && isApp1ExifMarker(dataView, appMarkerPosition)) {\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      tiffHeaderOffset = appMarkerPosition + TIFF_HEADER_OFFSET;\n    } else if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_XMP && isApp1XmpMarker(dataView, appMarkerPosition)) {\n      if (!xmpChunks) {\n        xmpChunks = [];\n      }\n\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      xmpChunks.push(getXmpChunkDetails(appMarkerPosition, fieldLength));\n    } else if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_XMP && isApp1ExtendedXmpMarker(dataView, appMarkerPosition)) {\n      if (!xmpChunks) {\n        xmpChunks = [];\n      }\n\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      xmpChunks.push(getExtendedXmpChunkDetails(appMarkerPosition, fieldLength));\n    } else if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_IPTC && isApp13PhotoshopMarker(dataView, appMarkerPosition)) {\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      iptcDataOffset = appMarkerPosition + IPTC_DATA_OFFSET;\n    } else if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_ICC && isApp2ICCMarker(dataView, appMarkerPosition)) {\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      var iccDataOffset = appMarkerPosition + APP2_ICC_DATA_OFFSET;\n      var iccDataLength = fieldLength - (APP2_ICC_DATA_OFFSET - APP_MARKER_SIZE);\n      var iccChunkNumber = dataView.getUint8(appMarkerPosition + ICC_CHUNK_NUMBER_OFFSET);\n      var iccChunksTotal = dataView.getUint8(appMarkerPosition + ICC_TOTAL_CHUNKS_OFFSET);\n\n      if (!iccChunks) {\n        iccChunks = [];\n      }\n\n      iccChunks.push({\n        offset: iccDataOffset,\n        length: iccDataLength,\n        chunkNumber: iccChunkNumber,\n        chunksTotal: iccChunksTotal\n      });\n    } else if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_MPF && isApp2MPFMarker(dataView, appMarkerPosition)) {\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n      mpfDataOffset = appMarkerPosition + MPF_DATA_OFFSET;\n    } else if (isAppMarker(dataView, appMarkerPosition)) {\n      fieldLength = dataView.getUint16(appMarkerPosition + APP_MARKER_SIZE);\n    } else {\n      break;\n    }\n\n    appMarkerPosition += APP_MARKER_SIZE + fieldLength;\n  }\n\n  return {\n    hasAppMarkers: appMarkerPosition > JPEG_ID_SIZE,\n    fileDataOffset: sof0DataOffset || sof2DataOffset,\n    tiffHeaderOffset: tiffHeaderOffset,\n    iptcDataOffset: iptcDataOffset,\n    xmpChunks: xmpChunks,\n    iccChunks: iccChunks,\n    mpfDataOffset: mpfDataOffset\n  };\n}\n\nfunction isSOF0Marker(dataView, appMarkerPosition) {\n  return dataView.getUint16(appMarkerPosition) === SOF0_MARKER;\n}\n\nfunction isSOF2Marker(dataView, appMarkerPosition) {\n  return dataView.getUint16(appMarkerPosition) === SOF2_MARKER;\n}\n\nfunction isApp2ICCMarker(dataView, appMarkerPosition) {\n  var markerIdLength = APP2_ICC_IDENTIFIER.length;\n  return dataView.getUint16(appMarkerPosition) === APP2_MARKER && Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, appMarkerPosition + APP_ID_OFFSET, markerIdLength) === APP2_ICC_IDENTIFIER;\n}\n\nfunction isApp2MPFMarker(dataView, appMarkerPosition) {\n  var markerIdLength = APP2_MPF_IDENTIFIER.length;\n  return dataView.getUint16(appMarkerPosition) === APP2_MARKER && Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, appMarkerPosition + APP_ID_OFFSET, markerIdLength) === APP2_MPF_IDENTIFIER;\n}\n\nfunction isApp1ExifMarker(dataView, appMarkerPosition) {\n  var markerIdLength = APP1_EXIF_IDENTIFIER.length;\n  return dataView.getUint16(appMarkerPosition) === APP1_MARKER && Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, appMarkerPosition + APP_ID_OFFSET, markerIdLength) === APP1_EXIF_IDENTIFIER && dataView.getUint8(appMarkerPosition + APP_ID_OFFSET + markerIdLength) === 0x00;\n}\n\nfunction isApp1XmpMarker(dataView, appMarkerPosition) {\n  return dataView.getUint16(appMarkerPosition) === APP1_MARKER && isXmpIdentifier(dataView, appMarkerPosition);\n}\n\nfunction isXmpIdentifier(dataView, appMarkerPosition) {\n  var markerIdLength = APP1_XMP_IDENTIFIER.length;\n  return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, appMarkerPosition + APP_ID_OFFSET, markerIdLength) === APP1_XMP_IDENTIFIER;\n}\n\nfunction isApp1ExtendedXmpMarker(dataView, appMarkerPosition) {\n  return dataView.getUint16(appMarkerPosition) === APP1_MARKER && isExtendedXmpIdentifier(dataView, appMarkerPosition);\n}\n\nfunction isExtendedXmpIdentifier(dataView, appMarkerPosition) {\n  var markerIdLength = APP1_XMP_EXTENDED_IDENTIFIER.length;\n  return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, appMarkerPosition + APP_ID_OFFSET, markerIdLength) === APP1_XMP_EXTENDED_IDENTIFIER;\n}\n\nfunction getXmpChunkDetails(appMarkerPosition, fieldLength) {\n  return {\n    dataOffset: appMarkerPosition + XMP_DATA_OFFSET,\n    length: fieldLength - (XMP_DATA_OFFSET - APP_MARKER_SIZE)\n  };\n}\n\nfunction getExtendedXmpChunkDetails(appMarkerPosition, fieldLength) {\n  return {\n    dataOffset: appMarkerPosition + XMP_EXTENDED_DATA_OFFSET,\n    length: fieldLength - (XMP_EXTENDED_DATA_OFFSET - APP_MARKER_SIZE)\n  };\n}\n\nfunction isApp13PhotoshopMarker(dataView, appMarkerPosition) {\n  var markerIdLength = APP13_IPTC_IDENTIFIER.length;\n  return dataView.getUint16(appMarkerPosition) === APP13_MARKER && Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, appMarkerPosition + APP_ID_OFFSET, markerIdLength) === APP13_IPTC_IDENTIFIER && dataView.getUint8(appMarkerPosition + APP_ID_OFFSET + markerIdLength) === 0x00;\n}\n\nfunction isAppMarker(dataView, appMarkerPosition) {\n  var appMarker = dataView.getUint16(appMarkerPosition);\n  return appMarker >= APP0_MARKER && appMarker <= APP15_MARKER || appMarker === COMMENT_MARKER || appMarker === SOF0_MARKER || appMarker === SOF2_MARKER || appMarker === DHT_MARKER || appMarker === DQT_MARKER || appMarker === DRI_MARKER || appMarker === SOS_MARKER;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/image-header-jpeg.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/image-header-png.js":
/*!*********************************************************!*\
  !*** ./node_modules/exifreader/src/image-header-png.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/exifreader/src/utils.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/exifreader/src/constants.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  isPngFile: isPngFile,\n  findPngOffsets: findPngOffsets\n});\nvar PNG_ID = '\\x89\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a';\nvar PNG_CHUNK_LENGTH_SIZE = 4;\nvar PNG_CHUNK_TYPE_SIZE = 4;\nvar PNG_CHUNK_LENGTH_OFFSET = 0;\nvar PNG_CHUNK_TYPE_OFFSET = PNG_CHUNK_LENGTH_SIZE;\nvar PNG_CHUNK_DATA_OFFSET = PNG_CHUNK_LENGTH_SIZE + PNG_CHUNK_TYPE_SIZE;\nvar PNG_XMP_PREFIX = 'XML:com.adobe.xmp\\x00';\n\nfunction isPngFile(dataView) {\n  return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, 0, PNG_ID.length) === PNG_ID;\n}\n\nfunction findPngOffsets(dataView) {\n  var PNG_CRC_SIZE = 4;\n  var offsets = {\n    hasAppMarkers: false\n  };\n  var offset = PNG_ID.length;\n\n  while (offset + PNG_CHUNK_LENGTH_SIZE + PNG_CHUNK_TYPE_SIZE <= dataView.byteLength) {\n    if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_PNG_FILE && isPngImageHeaderChunk(dataView, offset)) {\n      offsets.hasAppMarkers = true;\n      offsets.pngHeaderOffset = offset + PNG_CHUNK_DATA_OFFSET;\n    } else if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_XMP && isPngXmpChunk(dataView, offset)) {\n      var dataOffset = getPngXmpDataOffset(dataView, offset);\n\n      if (dataOffset !== undefined) {\n        offsets.hasAppMarkers = true;\n        offsets.xmpChunks = [{\n          dataOffset: dataOffset,\n          length: dataView.getUint32(offset + PNG_CHUNK_LENGTH_OFFSET) - (dataOffset - (offset + PNG_CHUNK_DATA_OFFSET))\n        }];\n      }\n    }\n\n    offset += dataView.getUint32(offset + PNG_CHUNK_LENGTH_OFFSET) + PNG_CHUNK_LENGTH_SIZE + PNG_CHUNK_TYPE_SIZE + PNG_CRC_SIZE;\n  }\n\n  return offsets;\n}\n\nfunction isPngImageHeaderChunk(dataView, offset) {\n  var PNG_CHUNK_TYPE_IMAGE_HEADER = 'IHDR';\n  return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset + PNG_CHUNK_TYPE_OFFSET, PNG_CHUNK_TYPE_SIZE) === PNG_CHUNK_TYPE_IMAGE_HEADER;\n}\n\nfunction isPngXmpChunk(dataView, offset) {\n  var PNG_CHUNK_TYPE_INTERNATIONAL_TEXT = 'iTXt';\n  return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset + PNG_CHUNK_TYPE_OFFSET, PNG_CHUNK_TYPE_SIZE) === PNG_CHUNK_TYPE_INTERNATIONAL_TEXT && Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset + PNG_CHUNK_DATA_OFFSET, PNG_XMP_PREFIX.length) === PNG_XMP_PREFIX;\n}\n\nfunction getPngXmpDataOffset(dataView, offset) {\n  var COMPRESSION_FLAG_SIZE = 1;\n  var COMPRESSION_METHOD_SIZE = 1;\n  offset += PNG_CHUNK_DATA_OFFSET + PNG_XMP_PREFIX.length + COMPRESSION_FLAG_SIZE + COMPRESSION_METHOD_SIZE;\n  var numberOfNullSeparators = 0;\n\n  while (numberOfNullSeparators < 2 && offset < dataView.byteLength) {\n    if (dataView.getUint8(offset) === 0x00) {\n      numberOfNullSeparators++;\n    }\n\n    offset++;\n  }\n\n  if (numberOfNullSeparators < 2) {\n    return undefined;\n  }\n\n  return offset;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL2ltYWdlLWhlYWRlci1wbmcuanM/MjQ3MCJdLCJuYW1lcyI6WyJpc1BuZ0ZpbGUiLCJmaW5kUG5nT2Zmc2V0cyIsIlBOR19JRCIsIlBOR19DSFVOS19MRU5HVEhfU0laRSIsIlBOR19DSFVOS19UWVBFX1NJWkUiLCJQTkdfQ0hVTktfTEVOR1RIX09GRlNFVCIsIlBOR19DSFVOS19UWVBFX09GRlNFVCIsIlBOR19DSFVOS19EQVRBX09GRlNFVCIsIlBOR19YTVBfUFJFRklYIiwiZGF0YVZpZXciLCJnZXRTdHJpbmdGcm9tRGF0YVZpZXciLCJsZW5ndGgiLCJQTkdfQ1JDX1NJWkUiLCJvZmZzZXRzIiwiaGFzQXBwTWFya2VycyIsIm9mZnNldCIsImJ5dGVMZW5ndGgiLCJDb25zdGFudHMiLCJVU0VfUE5HX0ZJTEUiLCJpc1BuZ0ltYWdlSGVhZGVyQ2h1bmsiLCJwbmdIZWFkZXJPZmZzZXQiLCJVU0VfWE1QIiwiaXNQbmdYbXBDaHVuayIsImRhdGFPZmZzZXQiLCJnZXRQbmdYbXBEYXRhT2Zmc2V0IiwidW5kZWZpbmVkIiwieG1wQ2h1bmtzIiwiZ2V0VWludDMyIiwiUE5HX0NIVU5LX1RZUEVfSU1BR0VfSEVBREVSIiwiUE5HX0NIVU5LX1RZUEVfSU5URVJOQVRJT05BTF9URVhUIiwiQ09NUFJFU1NJT05fRkxBR19TSVpFIiwiQ09NUFJFU1NJT05fTUVUSE9EX1NJWkUiLCJudW1iZXJPZk51bGxTZXBhcmF0b3JzIiwiZ2V0VWludDgiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUFJQTtBQUNBO0FBRWU7QUFDWEEsV0FBUyxFQUFUQSxTQURXO0FBRVhDLGdCQUFjLEVBQWRBO0FBRlcsQ0FBZjtBQUtBLElBQU1DLE1BQU0sR0FBRyxrQ0FBZjtBQUNBLElBQU1DLHFCQUFxQixHQUFHLENBQTlCO0FBQ0EsSUFBTUMsbUJBQW1CLEdBQUcsQ0FBNUI7QUFDQSxJQUFNQyx1QkFBdUIsR0FBRyxDQUFoQztBQUNBLElBQU1DLHFCQUFxQixHQUFHSCxxQkFBOUI7QUFDQSxJQUFNSSxxQkFBcUIsR0FBR0oscUJBQXFCLEdBQUdDLG1CQUF0RDtBQUNBLElBQU1JLGNBQWMsR0FBRyx1QkFBdkI7O0FBRUEsU0FBU1IsU0FBVCxDQUFtQlMsUUFBbkIsRUFBNkI7QUFDekIsU0FBT0MsdUVBQXFCLENBQUNELFFBQUQsRUFBVyxDQUFYLEVBQWNQLE1BQU0sQ0FBQ1MsTUFBckIsQ0FBckIsS0FBc0RULE1BQTdEO0FBQ0g7O0FBRUQsU0FBU0QsY0FBVCxDQUF3QlEsUUFBeEIsRUFBa0M7QUFDOUIsTUFBTUcsWUFBWSxHQUFHLENBQXJCO0FBRUEsTUFBTUMsT0FBTyxHQUFHO0FBQ1pDLGlCQUFhLEVBQUU7QUFESCxHQUFoQjtBQUlBLE1BQUlDLE1BQU0sR0FBR2IsTUFBTSxDQUFDUyxNQUFwQjs7QUFFQSxTQUFPSSxNQUFNLEdBQUdaLHFCQUFULEdBQWlDQyxtQkFBakMsSUFBd0RLLFFBQVEsQ0FBQ08sVUFBeEUsRUFBb0Y7QUFDaEYsUUFBSUMscURBQVMsQ0FBQ0MsWUFBVixJQUEwQkMscUJBQXFCLENBQUNWLFFBQUQsRUFBV00sTUFBWCxDQUFuRCxFQUF1RTtBQUNuRUYsYUFBTyxDQUFDQyxhQUFSLEdBQXdCLElBQXhCO0FBQ0FELGFBQU8sQ0FBQ08sZUFBUixHQUEwQkwsTUFBTSxHQUFHUixxQkFBbkM7QUFDSCxLQUhELE1BR08sSUFBSVUscURBQVMsQ0FBQ0ksT0FBVixJQUFxQkMsYUFBYSxDQUFDYixRQUFELEVBQVdNLE1BQVgsQ0FBdEMsRUFBMEQ7QUFDN0QsVUFBTVEsVUFBVSxHQUFHQyxtQkFBbUIsQ0FBQ2YsUUFBRCxFQUFXTSxNQUFYLENBQXRDOztBQUNBLFVBQUlRLFVBQVUsS0FBS0UsU0FBbkIsRUFBOEI7QUFDMUJaLGVBQU8sQ0FBQ0MsYUFBUixHQUF3QixJQUF4QjtBQUNBRCxlQUFPLENBQUNhLFNBQVIsR0FBb0IsQ0FBQztBQUNqQkgsb0JBQVUsRUFBVkEsVUFEaUI7QUFFakJaLGdCQUFNLEVBQUVGLFFBQVEsQ0FBQ2tCLFNBQVQsQ0FBbUJaLE1BQU0sR0FBR1YsdUJBQTVCLEtBQXdEa0IsVUFBVSxJQUFJUixNQUFNLEdBQUdSLHFCQUFiLENBQWxFO0FBRlMsU0FBRCxDQUFwQjtBQUlIO0FBQ0o7O0FBRURRLFVBQU0sSUFBSU4sUUFBUSxDQUFDa0IsU0FBVCxDQUFtQlosTUFBTSxHQUFHVix1QkFBNUIsSUFDSkYscUJBREksR0FFSkMsbUJBRkksR0FHSlEsWUFITjtBQUlIOztBQUVELFNBQU9DLE9BQVA7QUFDSDs7QUFFRCxTQUFTTSxxQkFBVCxDQUErQlYsUUFBL0IsRUFBeUNNLE1BQXpDLEVBQWlEO0FBQzdDLE1BQU1hLDJCQUEyQixHQUFHLE1BQXBDO0FBQ0EsU0FBT2xCLHVFQUFxQixDQUFDRCxRQUFELEVBQVdNLE1BQU0sR0FBR1QscUJBQXBCLEVBQTJDRixtQkFBM0MsQ0FBckIsS0FBeUZ3QiwyQkFBaEc7QUFDSDs7QUFFRCxTQUFTTixhQUFULENBQXVCYixRQUF2QixFQUFpQ00sTUFBakMsRUFBeUM7QUFDckMsTUFBTWMsaUNBQWlDLEdBQUcsTUFBMUM7QUFDQSxTQUFRbkIsdUVBQXFCLENBQUNELFFBQUQsRUFBV00sTUFBTSxHQUFHVCxxQkFBcEIsRUFBMkNGLG1CQUEzQyxDQUFyQixLQUF5RnlCLGlDQUExRixJQUNDbkIsdUVBQXFCLENBQUNELFFBQUQsRUFBV00sTUFBTSxHQUFHUixxQkFBcEIsRUFBMkNDLGNBQWMsQ0FBQ0csTUFBMUQsQ0FBckIsS0FBMkZILGNBRG5HO0FBRUg7O0FBRUQsU0FBU2dCLG1CQUFULENBQTZCZixRQUE3QixFQUF1Q00sTUFBdkMsRUFBK0M7QUFDM0MsTUFBTWUscUJBQXFCLEdBQUcsQ0FBOUI7QUFDQSxNQUFNQyx1QkFBdUIsR0FBRyxDQUFoQztBQUVBaEIsUUFBTSxJQUFJUixxQkFBcUIsR0FBR0MsY0FBYyxDQUFDRyxNQUF2QyxHQUFnRG1CLHFCQUFoRCxHQUF3RUMsdUJBQWxGO0FBRUEsTUFBSUMsc0JBQXNCLEdBQUcsQ0FBN0I7O0FBQ0EsU0FBT0Esc0JBQXNCLEdBQUcsQ0FBekIsSUFBOEJqQixNQUFNLEdBQUdOLFFBQVEsQ0FBQ08sVUFBdkQsRUFBbUU7QUFDL0QsUUFBSVAsUUFBUSxDQUFDd0IsUUFBVCxDQUFrQmxCLE1BQWxCLE1BQThCLElBQWxDLEVBQXdDO0FBQ3BDaUIsNEJBQXNCO0FBQ3pCOztBQUNEakIsVUFBTTtBQUNUOztBQUNELE1BQUlpQixzQkFBc0IsR0FBRyxDQUE3QixFQUFnQztBQUM1QixXQUFPUCxTQUFQO0FBQ0g7O0FBQ0QsU0FBT1YsTUFBUDtBQUNIIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL2ltYWdlLWhlYWRlci1wbmcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHtnZXRTdHJpbmdGcm9tRGF0YVZpZXd9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IENvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBpc1BuZ0ZpbGUsXG4gICAgZmluZFBuZ09mZnNldHNcbn07XG5cbmNvbnN0IFBOR19JRCA9ICdcXHg4OVxceDUwXFx4NGVcXHg0N1xceDBkXFx4MGFcXHgxYVxceDBhJztcbmNvbnN0IFBOR19DSFVOS19MRU5HVEhfU0laRSA9IDQ7XG5jb25zdCBQTkdfQ0hVTktfVFlQRV9TSVpFID0gNDtcbmNvbnN0IFBOR19DSFVOS19MRU5HVEhfT0ZGU0VUID0gMDtcbmNvbnN0IFBOR19DSFVOS19UWVBFX09GRlNFVCA9IFBOR19DSFVOS19MRU5HVEhfU0laRTtcbmNvbnN0IFBOR19DSFVOS19EQVRBX09GRlNFVCA9IFBOR19DSFVOS19MRU5HVEhfU0laRSArIFBOR19DSFVOS19UWVBFX1NJWkU7XG5jb25zdCBQTkdfWE1QX1BSRUZJWCA9ICdYTUw6Y29tLmFkb2JlLnhtcFxceDAwJztcblxuZnVuY3Rpb24gaXNQbmdGaWxlKGRhdGFWaWV3KSB7XG4gICAgcmV0dXJuIGdldFN0cmluZ0Zyb21EYXRhVmlldyhkYXRhVmlldywgMCwgUE5HX0lELmxlbmd0aCkgPT09IFBOR19JRDtcbn1cblxuZnVuY3Rpb24gZmluZFBuZ09mZnNldHMoZGF0YVZpZXcpIHtcbiAgICBjb25zdCBQTkdfQ1JDX1NJWkUgPSA0O1xuXG4gICAgY29uc3Qgb2Zmc2V0cyA9IHtcbiAgICAgICAgaGFzQXBwTWFya2VyczogZmFsc2VcbiAgICB9O1xuXG4gICAgbGV0IG9mZnNldCA9IFBOR19JRC5sZW5ndGg7XG5cbiAgICB3aGlsZSAob2Zmc2V0ICsgUE5HX0NIVU5LX0xFTkdUSF9TSVpFICsgUE5HX0NIVU5LX1RZUEVfU0laRSA8PSBkYXRhVmlldy5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIGlmIChDb25zdGFudHMuVVNFX1BOR19GSUxFICYmIGlzUG5nSW1hZ2VIZWFkZXJDaHVuayhkYXRhVmlldywgb2Zmc2V0KSkge1xuICAgICAgICAgICAgb2Zmc2V0cy5oYXNBcHBNYXJrZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgIG9mZnNldHMucG5nSGVhZGVyT2Zmc2V0ID0gb2Zmc2V0ICsgUE5HX0NIVU5LX0RBVEFfT0ZGU0VUO1xuICAgICAgICB9IGVsc2UgaWYgKENvbnN0YW50cy5VU0VfWE1QICYmIGlzUG5nWG1wQ2h1bmsoZGF0YVZpZXcsIG9mZnNldCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFPZmZzZXQgPSBnZXRQbmdYbXBEYXRhT2Zmc2V0KGRhdGFWaWV3LCBvZmZzZXQpO1xuICAgICAgICAgICAgaWYgKGRhdGFPZmZzZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG9mZnNldHMuaGFzQXBwTWFya2VycyA9IHRydWU7XG4gICAgICAgICAgICAgICAgb2Zmc2V0cy54bXBDaHVua3MgPSBbe1xuICAgICAgICAgICAgICAgICAgICBkYXRhT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IGRhdGFWaWV3LmdldFVpbnQzMihvZmZzZXQgKyBQTkdfQ0hVTktfTEVOR1RIX09GRlNFVCkgLSAoZGF0YU9mZnNldCAtIChvZmZzZXQgKyBQTkdfQ0hVTktfREFUQV9PRkZTRVQpKVxuICAgICAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2Zmc2V0ICs9IGRhdGFWaWV3LmdldFVpbnQzMihvZmZzZXQgKyBQTkdfQ0hVTktfTEVOR1RIX09GRlNFVClcbiAgICAgICAgICAgICsgUE5HX0NIVU5LX0xFTkdUSF9TSVpFXG4gICAgICAgICAgICArIFBOR19DSFVOS19UWVBFX1NJWkVcbiAgICAgICAgICAgICsgUE5HX0NSQ19TSVpFO1xuICAgIH1cblxuICAgIHJldHVybiBvZmZzZXRzO1xufVxuXG5mdW5jdGlvbiBpc1BuZ0ltYWdlSGVhZGVyQ2h1bmsoZGF0YVZpZXcsIG9mZnNldCkge1xuICAgIGNvbnN0IFBOR19DSFVOS19UWVBFX0lNQUdFX0hFQURFUiA9ICdJSERSJztcbiAgICByZXR1cm4gZ2V0U3RyaW5nRnJvbURhdGFWaWV3KGRhdGFWaWV3LCBvZmZzZXQgKyBQTkdfQ0hVTktfVFlQRV9PRkZTRVQsIFBOR19DSFVOS19UWVBFX1NJWkUpID09PSBQTkdfQ0hVTktfVFlQRV9JTUFHRV9IRUFERVI7XG59XG5cbmZ1bmN0aW9uIGlzUG5nWG1wQ2h1bmsoZGF0YVZpZXcsIG9mZnNldCkge1xuICAgIGNvbnN0IFBOR19DSFVOS19UWVBFX0lOVEVSTkFUSU9OQUxfVEVYVCA9ICdpVFh0JztcbiAgICByZXR1cm4gKGdldFN0cmluZ0Zyb21EYXRhVmlldyhkYXRhVmlldywgb2Zmc2V0ICsgUE5HX0NIVU5LX1RZUEVfT0ZGU0VULCBQTkdfQ0hVTktfVFlQRV9TSVpFKSA9PT0gUE5HX0NIVU5LX1RZUEVfSU5URVJOQVRJT05BTF9URVhUKVxuICAgICAgICAmJiAoZ2V0U3RyaW5nRnJvbURhdGFWaWV3KGRhdGFWaWV3LCBvZmZzZXQgKyBQTkdfQ0hVTktfREFUQV9PRkZTRVQsIFBOR19YTVBfUFJFRklYLmxlbmd0aCkgPT09IFBOR19YTVBfUFJFRklYKTtcbn1cblxuZnVuY3Rpb24gZ2V0UG5nWG1wRGF0YU9mZnNldChkYXRhVmlldywgb2Zmc2V0KSB7XG4gICAgY29uc3QgQ09NUFJFU1NJT05fRkxBR19TSVpFID0gMTtcbiAgICBjb25zdCBDT01QUkVTU0lPTl9NRVRIT0RfU0laRSA9IDE7XG5cbiAgICBvZmZzZXQgKz0gUE5HX0NIVU5LX0RBVEFfT0ZGU0VUICsgUE5HX1hNUF9QUkVGSVgubGVuZ3RoICsgQ09NUFJFU1NJT05fRkxBR19TSVpFICsgQ09NUFJFU1NJT05fTUVUSE9EX1NJWkU7XG5cbiAgICBsZXQgbnVtYmVyT2ZOdWxsU2VwYXJhdG9ycyA9IDA7XG4gICAgd2hpbGUgKG51bWJlck9mTnVsbFNlcGFyYXRvcnMgPCAyICYmIG9mZnNldCA8IGRhdGFWaWV3LmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgaWYgKGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCkgPT09IDB4MDApIHtcbiAgICAgICAgICAgIG51bWJlck9mTnVsbFNlcGFyYXRvcnMrKztcbiAgICAgICAgfVxuICAgICAgICBvZmZzZXQrKztcbiAgICB9XG4gICAgaWYgKG51bWJlck9mTnVsbFNlcGFyYXRvcnMgPCAyKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQ7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/image-header-png.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/image-header-tiff.js":
/*!**********************************************************!*\
  !*** ./node_modules/exifreader/src/image-header-tiff.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _byte_order_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte-order.js */ \"./node_modules/exifreader/src/byte-order.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/exifreader/src/constants.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  isTiffFile: isTiffFile,\n  findTiffOffsets: findTiffOffsets\n});\n\nfunction isTiffFile(dataView) {\n  var MIN_TIFF_DATA_BUFFER_LENGTH = 4;\n  return dataView.byteLength >= MIN_TIFF_DATA_BUFFER_LENGTH && hasTiffMarker(dataView);\n}\n\nfunction hasTiffMarker(dataView) {\n  var TIFF_ID = 0x2a;\n  var TIFF_ID_OFFSET = 2;\n  var littleEndian = dataView.getUint16(0) === _byte_order_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].LITTLE_ENDIAN;\n  return dataView.getUint16(TIFF_ID_OFFSET, littleEndian) === TIFF_ID;\n}\n\nfunction findTiffOffsets() {\n  var TIFF_FILE_HEADER_OFFSET = 0;\n\n  if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_EXIF) {\n    return {\n      hasAppMarkers: true,\n      tiffHeaderOffset: TIFF_FILE_HEADER_OFFSET\n    };\n  }\n\n  return {};\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL2ltYWdlLWhlYWRlci10aWZmLmpzPzk0NTEiXSwibmFtZXMiOlsiaXNUaWZmRmlsZSIsImZpbmRUaWZmT2Zmc2V0cyIsImRhdGFWaWV3IiwiTUlOX1RJRkZfREFUQV9CVUZGRVJfTEVOR1RIIiwiYnl0ZUxlbmd0aCIsImhhc1RpZmZNYXJrZXIiLCJUSUZGX0lEIiwiVElGRl9JRF9PRkZTRVQiLCJsaXR0bGVFbmRpYW4iLCJnZXRVaW50MTYiLCJCeXRlT3JkZXIiLCJMSVRUTEVfRU5ESUFOIiwiVElGRl9GSUxFX0hFQURFUl9PRkZTRVQiLCJDb25zdGFudHMiLCJVU0VfRVhJRiIsImhhc0FwcE1hcmtlcnMiLCJ0aWZmSGVhZGVyT2Zmc2V0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FBSUE7QUFDQTtBQUVlO0FBQ1hBLFlBQVUsRUFBVkEsVUFEVztBQUVYQyxpQkFBZSxFQUFmQTtBQUZXLENBQWY7O0FBS0EsU0FBU0QsVUFBVCxDQUFvQkUsUUFBcEIsRUFBOEI7QUFDMUIsTUFBTUMsMkJBQTJCLEdBQUcsQ0FBcEM7QUFFQSxTQUFRRCxRQUFRLENBQUNFLFVBQVQsSUFBdUJELDJCQUF4QixJQUF3REUsYUFBYSxDQUFDSCxRQUFELENBQTVFO0FBQ0g7O0FBRUQsU0FBU0csYUFBVCxDQUF1QkgsUUFBdkIsRUFBaUM7QUFDN0IsTUFBTUksT0FBTyxHQUFHLElBQWhCO0FBQ0EsTUFBTUMsY0FBYyxHQUFHLENBQXZCO0FBRUEsTUFBTUMsWUFBWSxHQUFHTixRQUFRLENBQUNPLFNBQVQsQ0FBbUIsQ0FBbkIsTUFBMEJDLHNEQUFTLENBQUNDLGFBQXpEO0FBQ0EsU0FBT1QsUUFBUSxDQUFDTyxTQUFULENBQW1CRixjQUFuQixFQUFtQ0MsWUFBbkMsTUFBcURGLE9BQTVEO0FBQ0g7O0FBRUQsU0FBU0wsZUFBVCxHQUEyQjtBQUN2QixNQUFNVyx1QkFBdUIsR0FBRyxDQUFoQzs7QUFFQSxNQUFJQyxxREFBUyxDQUFDQyxRQUFkLEVBQXdCO0FBQ3BCLFdBQU87QUFDSEMsbUJBQWEsRUFBRSxJQURaO0FBRUhDLHNCQUFnQixFQUFFSjtBQUZmLEtBQVA7QUFJSDs7QUFDRCxTQUFPLEVBQVA7QUFDSCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9leGlmcmVhZGVyL3NyYy9pbWFnZS1oZWFkZXItdGlmZi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwczovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgQnl0ZU9yZGVyIGZyb20gJy4vYnl0ZS1vcmRlci5qcyc7XG5pbXBvcnQgQ29uc3RhbnRzIGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGlzVGlmZkZpbGUsXG4gICAgZmluZFRpZmZPZmZzZXRzXG59O1xuXG5mdW5jdGlvbiBpc1RpZmZGaWxlKGRhdGFWaWV3KSB7XG4gICAgY29uc3QgTUlOX1RJRkZfREFUQV9CVUZGRVJfTEVOR1RIID0gNDtcblxuICAgIHJldHVybiAoZGF0YVZpZXcuYnl0ZUxlbmd0aCA+PSBNSU5fVElGRl9EQVRBX0JVRkZFUl9MRU5HVEgpICYmIGhhc1RpZmZNYXJrZXIoZGF0YVZpZXcpO1xufVxuXG5mdW5jdGlvbiBoYXNUaWZmTWFya2VyKGRhdGFWaWV3KSB7XG4gICAgY29uc3QgVElGRl9JRCA9IDB4MmE7XG4gICAgY29uc3QgVElGRl9JRF9PRkZTRVQgPSAyO1xuXG4gICAgY29uc3QgbGl0dGxlRW5kaWFuID0gZGF0YVZpZXcuZ2V0VWludDE2KDApID09PSBCeXRlT3JkZXIuTElUVExFX0VORElBTjtcbiAgICByZXR1cm4gZGF0YVZpZXcuZ2V0VWludDE2KFRJRkZfSURfT0ZGU0VULCBsaXR0bGVFbmRpYW4pID09PSBUSUZGX0lEO1xufVxuXG5mdW5jdGlvbiBmaW5kVGlmZk9mZnNldHMoKSB7XG4gICAgY29uc3QgVElGRl9GSUxFX0hFQURFUl9PRkZTRVQgPSAwO1xuXG4gICAgaWYgKENvbnN0YW50cy5VU0VfRVhJRikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGFzQXBwTWFya2VyczogdHJ1ZSxcbiAgICAgICAgICAgIHRpZmZIZWFkZXJPZmZzZXQ6IFRJRkZfRklMRV9IRUFERVJfT0ZGU0VUXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7fTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/image-header-tiff.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/image-header-webp.js":
/*!**********************************************************!*\
  !*** ./node_modules/exifreader/src/image-header-webp.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/exifreader/src/utils.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/exifreader/src/constants.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  isWebpFile: isWebpFile,\n  findOffsets: findOffsets\n});\n\nfunction isWebpFile(dataView) {\n  var RIFF_ID_OFFSET = 0;\n  var RIFF_ID = 'RIFF';\n  var WEBP_MARKER_OFFSET = 8;\n  var WEBP_MARKER = 'WEBP';\n  return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, RIFF_ID_OFFSET, RIFF_ID.length) === RIFF_ID && Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, WEBP_MARKER_OFFSET, WEBP_MARKER.length) === WEBP_MARKER;\n}\n\nfunction findOffsets(dataView) {\n  var SUB_CHUNK_START_OFFSET = 12;\n  var CHUNK_SIZE_OFFSET = 4;\n  var EXIF_IDENTIFIER = 'Exif\\x00\\x00';\n  var CHUNK_HEADER_SIZE = 8;\n  var offset = SUB_CHUNK_START_OFFSET;\n  var hasAppMarkers = false;\n  var tiffHeaderOffset;\n  var xmpChunks;\n  var iccChunks;\n\n  while (offset + CHUNK_HEADER_SIZE < dataView.byteLength) {\n    var chunkId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset, 4);\n    var chunkSize = dataView.getUint32(offset + CHUNK_SIZE_OFFSET, true);\n\n    if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_EXIF && chunkId === 'EXIF') {\n      hasAppMarkers = true;\n\n      if (Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(dataView, offset + CHUNK_HEADER_SIZE, EXIF_IDENTIFIER.length) === EXIF_IDENTIFIER) {\n        tiffHeaderOffset = offset + CHUNK_HEADER_SIZE + EXIF_IDENTIFIER.length;\n      } else {\n        tiffHeaderOffset = offset + CHUNK_HEADER_SIZE;\n      }\n    } else if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_XMP && chunkId === 'XMP ') {\n      hasAppMarkers = true;\n      xmpChunks = [{\n        dataOffset: offset + CHUNK_HEADER_SIZE,\n        length: chunkSize\n      }];\n    } else if (_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_ICC && chunkId === 'ICCP') {\n      hasAppMarkers = true;\n      iccChunks = [{\n        offset: offset + CHUNK_HEADER_SIZE,\n        length: chunkSize,\n        chunkNumber: 1,\n        chunksTotal: 1\n      }];\n    }\n\n    offset += CHUNK_HEADER_SIZE + (chunkSize % 2 === 0 ? chunkSize : chunkSize + 1);\n  }\n\n  return {\n    hasAppMarkers: hasAppMarkers,\n    tiffHeaderOffset: tiffHeaderOffset,\n    xmpChunks: xmpChunks,\n    iccChunks: iccChunks\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL2ltYWdlLWhlYWRlci13ZWJwLmpzP2FlMzgiXSwibmFtZXMiOlsiaXNXZWJwRmlsZSIsImZpbmRPZmZzZXRzIiwiZGF0YVZpZXciLCJSSUZGX0lEX09GRlNFVCIsIlJJRkZfSUQiLCJXRUJQX01BUktFUl9PRkZTRVQiLCJXRUJQX01BUktFUiIsImdldFN0cmluZ0Zyb21EYXRhVmlldyIsImxlbmd0aCIsIlNVQl9DSFVOS19TVEFSVF9PRkZTRVQiLCJDSFVOS19TSVpFX09GRlNFVCIsIkVYSUZfSURFTlRJRklFUiIsIkNIVU5LX0hFQURFUl9TSVpFIiwib2Zmc2V0IiwiaGFzQXBwTWFya2VycyIsInRpZmZIZWFkZXJPZmZzZXQiLCJ4bXBDaHVua3MiLCJpY2NDaHVua3MiLCJieXRlTGVuZ3RoIiwiY2h1bmtJZCIsImNodW5rU2l6ZSIsImdldFVpbnQzMiIsIkNvbnN0YW50cyIsIlVTRV9FWElGIiwiVVNFX1hNUCIsImRhdGFPZmZzZXQiLCJVU0VfSUNDIiwiY2h1bmtOdW1iZXIiLCJjaHVua3NUb3RhbCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7OztBQUlBO0FBQ0E7QUFFZTtBQUNYQSxZQUFVLEVBQVZBLFVBRFc7QUFFWEMsYUFBVyxFQUFYQTtBQUZXLENBQWY7O0FBS0EsU0FBU0QsVUFBVCxDQUFvQkUsUUFBcEIsRUFBOEI7QUFDMUIsTUFBTUMsY0FBYyxHQUFHLENBQXZCO0FBQ0EsTUFBTUMsT0FBTyxHQUFHLE1BQWhCO0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsQ0FBM0I7QUFDQSxNQUFNQyxXQUFXLEdBQUcsTUFBcEI7QUFFQSxTQUFPQyx1RUFBcUIsQ0FBQ0wsUUFBRCxFQUFXQyxjQUFYLEVBQTJCQyxPQUFPLENBQUNJLE1BQW5DLENBQXJCLEtBQW9FSixPQUFwRSxJQUNBRyx1RUFBcUIsQ0FBQ0wsUUFBRCxFQUFXRyxrQkFBWCxFQUErQkMsV0FBVyxDQUFDRSxNQUEzQyxDQUFyQixLQUE0RUYsV0FEbkY7QUFFSDs7QUFFRCxTQUFTTCxXQUFULENBQXFCQyxRQUFyQixFQUErQjtBQUMzQixNQUFNTyxzQkFBc0IsR0FBRyxFQUEvQjtBQUNBLE1BQU1DLGlCQUFpQixHQUFHLENBQTFCO0FBQ0EsTUFBTUMsZUFBZSxHQUFHLGNBQXhCO0FBQ0EsTUFBTUMsaUJBQWlCLEdBQUcsQ0FBMUI7QUFFQSxNQUFJQyxNQUFNLEdBQUdKLHNCQUFiO0FBQ0EsTUFBSUssYUFBYSxHQUFHLEtBQXBCO0FBQ0EsTUFBSUMsZ0JBQUo7QUFDQSxNQUFJQyxTQUFKO0FBQ0EsTUFBSUMsU0FBSjs7QUFFQSxTQUFPSixNQUFNLEdBQUdELGlCQUFULEdBQTZCVixRQUFRLENBQUNnQixVQUE3QyxFQUF5RDtBQUNyRCxRQUFNQyxPQUFPLEdBQUdaLHVFQUFxQixDQUFDTCxRQUFELEVBQVdXLE1BQVgsRUFBbUIsQ0FBbkIsQ0FBckM7QUFDQSxRQUFNTyxTQUFTLEdBQUdsQixRQUFRLENBQUNtQixTQUFULENBQW1CUixNQUFNLEdBQUdILGlCQUE1QixFQUErQyxJQUEvQyxDQUFsQjs7QUFFQSxRQUFJWSxxREFBUyxDQUFDQyxRQUFWLElBQXVCSixPQUFPLEtBQUssTUFBdkMsRUFBZ0Q7QUFDNUNMLG1CQUFhLEdBQUcsSUFBaEI7O0FBQ0EsVUFBSVAsdUVBQXFCLENBQUNMLFFBQUQsRUFBV1csTUFBTSxHQUFHRCxpQkFBcEIsRUFBdUNELGVBQWUsQ0FBQ0gsTUFBdkQsQ0FBckIsS0FBd0ZHLGVBQTVGLEVBQTZHO0FBQ3pHSSx3QkFBZ0IsR0FBR0YsTUFBTSxHQUFHRCxpQkFBVCxHQUE2QkQsZUFBZSxDQUFDSCxNQUFoRTtBQUNILE9BRkQsTUFFTztBQUNITyx3QkFBZ0IsR0FBR0YsTUFBTSxHQUFHRCxpQkFBNUI7QUFDSDtBQUNKLEtBUEQsTUFPTyxJQUFJVSxxREFBUyxDQUFDRSxPQUFWLElBQXNCTCxPQUFPLEtBQUssTUFBdEMsRUFBK0M7QUFDbERMLG1CQUFhLEdBQUcsSUFBaEI7QUFDQUUsZUFBUyxHQUFHLENBQUM7QUFDVFMsa0JBQVUsRUFBRVosTUFBTSxHQUFHRCxpQkFEWjtBQUVUSixjQUFNLEVBQUVZO0FBRkMsT0FBRCxDQUFaO0FBSUgsS0FOTSxNQU1BLElBQUlFLHFEQUFTLENBQUNJLE9BQVYsSUFBc0JQLE9BQU8sS0FBSyxNQUF0QyxFQUErQztBQUNsREwsbUJBQWEsR0FBRyxJQUFoQjtBQUNBRyxlQUFTLEdBQUcsQ0FBQztBQUNUSixjQUFNLEVBQUVBLE1BQU0sR0FBR0QsaUJBRFI7QUFFVEosY0FBTSxFQUFFWSxTQUZDO0FBR1RPLG1CQUFXLEVBQUUsQ0FISjtBQUlUQyxtQkFBVyxFQUFFO0FBSkosT0FBRCxDQUFaO0FBTUg7O0FBRURmLFVBQU0sSUFBSUQsaUJBQWlCLElBQUlRLFNBQVMsR0FBRyxDQUFaLEtBQWtCLENBQWxCLEdBQXNCQSxTQUF0QixHQUFrQ0EsU0FBUyxHQUFHLENBQWxELENBQTNCO0FBQ0g7O0FBRUQsU0FBTztBQUNITixpQkFBYSxFQUFiQSxhQURHO0FBRUhDLG9CQUFnQixFQUFoQkEsZ0JBRkc7QUFHSEMsYUFBUyxFQUFUQSxTQUhHO0FBSUhDLGFBQVMsRUFBVEE7QUFKRyxHQUFQO0FBTUgiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXhpZnJlYWRlci9zcmMvaW1hZ2UtaGVhZGVyLXdlYnAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHtnZXRTdHJpbmdGcm9tRGF0YVZpZXd9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IENvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBpc1dlYnBGaWxlLFxuICAgIGZpbmRPZmZzZXRzXG59O1xuXG5mdW5jdGlvbiBpc1dlYnBGaWxlKGRhdGFWaWV3KSB7XG4gICAgY29uc3QgUklGRl9JRF9PRkZTRVQgPSAwO1xuICAgIGNvbnN0IFJJRkZfSUQgPSAnUklGRic7XG4gICAgY29uc3QgV0VCUF9NQVJLRVJfT0ZGU0VUID0gODtcbiAgICBjb25zdCBXRUJQX01BUktFUiA9ICdXRUJQJztcblxuICAgIHJldHVybiBnZXRTdHJpbmdGcm9tRGF0YVZpZXcoZGF0YVZpZXcsIFJJRkZfSURfT0ZGU0VULCBSSUZGX0lELmxlbmd0aCkgPT09IFJJRkZfSURcbiAgICAgICAgJiYgZ2V0U3RyaW5nRnJvbURhdGFWaWV3KGRhdGFWaWV3LCBXRUJQX01BUktFUl9PRkZTRVQsIFdFQlBfTUFSS0VSLmxlbmd0aCkgPT09IFdFQlBfTUFSS0VSO1xufVxuXG5mdW5jdGlvbiBmaW5kT2Zmc2V0cyhkYXRhVmlldykge1xuICAgIGNvbnN0IFNVQl9DSFVOS19TVEFSVF9PRkZTRVQgPSAxMjtcbiAgICBjb25zdCBDSFVOS19TSVpFX09GRlNFVCA9IDQ7XG4gICAgY29uc3QgRVhJRl9JREVOVElGSUVSID0gJ0V4aWZcXHgwMFxceDAwJztcbiAgICBjb25zdCBDSFVOS19IRUFERVJfU0laRSA9IDg7XG5cbiAgICBsZXQgb2Zmc2V0ID0gU1VCX0NIVU5LX1NUQVJUX09GRlNFVDtcbiAgICBsZXQgaGFzQXBwTWFya2VycyA9IGZhbHNlO1xuICAgIGxldCB0aWZmSGVhZGVyT2Zmc2V0O1xuICAgIGxldCB4bXBDaHVua3M7XG4gICAgbGV0IGljY0NodW5rcztcblxuICAgIHdoaWxlIChvZmZzZXQgKyBDSFVOS19IRUFERVJfU0laRSA8IGRhdGFWaWV3LmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgY29uc3QgY2h1bmtJZCA9IGdldFN0cmluZ0Zyb21EYXRhVmlldyhkYXRhVmlldywgb2Zmc2V0LCA0KTtcbiAgICAgICAgY29uc3QgY2h1bmtTaXplID0gZGF0YVZpZXcuZ2V0VWludDMyKG9mZnNldCArIENIVU5LX1NJWkVfT0ZGU0VULCB0cnVlKTtcblxuICAgICAgICBpZiAoQ29uc3RhbnRzLlVTRV9FWElGICYmIChjaHVua0lkID09PSAnRVhJRicpKSB7XG4gICAgICAgICAgICBoYXNBcHBNYXJrZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChnZXRTdHJpbmdGcm9tRGF0YVZpZXcoZGF0YVZpZXcsIG9mZnNldCArIENIVU5LX0hFQURFUl9TSVpFLCBFWElGX0lERU5USUZJRVIubGVuZ3RoKSA9PT0gRVhJRl9JREVOVElGSUVSKSB7XG4gICAgICAgICAgICAgICAgdGlmZkhlYWRlck9mZnNldCA9IG9mZnNldCArIENIVU5LX0hFQURFUl9TSVpFICsgRVhJRl9JREVOVElGSUVSLmxlbmd0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGlmZkhlYWRlck9mZnNldCA9IG9mZnNldCArIENIVU5LX0hFQURFUl9TSVpFO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKENvbnN0YW50cy5VU0VfWE1QICYmIChjaHVua0lkID09PSAnWE1QICcpKSB7XG4gICAgICAgICAgICBoYXNBcHBNYXJrZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgIHhtcENodW5rcyA9IFt7XG4gICAgICAgICAgICAgICAgZGF0YU9mZnNldDogb2Zmc2V0ICsgQ0hVTktfSEVBREVSX1NJWkUsXG4gICAgICAgICAgICAgICAgbGVuZ3RoOiBjaHVua1NpemVcbiAgICAgICAgICAgIH1dO1xuICAgICAgICB9IGVsc2UgaWYgKENvbnN0YW50cy5VU0VfSUNDICYmIChjaHVua0lkID09PSAnSUNDUCcpKSB7XG4gICAgICAgICAgICBoYXNBcHBNYXJrZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgIGljY0NodW5rcyA9IFt7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgKyBDSFVOS19IRUFERVJfU0laRSxcbiAgICAgICAgICAgICAgICBsZW5ndGg6IGNodW5rU2l6ZSxcbiAgICAgICAgICAgICAgICBjaHVua051bWJlcjogMSxcbiAgICAgICAgICAgICAgICBjaHVua3NUb3RhbDogMVxuICAgICAgICAgICAgfV07XG4gICAgICAgIH1cblxuICAgICAgICBvZmZzZXQgKz0gQ0hVTktfSEVBREVSX1NJWkUgKyAoY2h1bmtTaXplICUgMiA9PT0gMCA/IGNodW5rU2l6ZSA6IGNodW5rU2l6ZSArIDEpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGhhc0FwcE1hcmtlcnMsXG4gICAgICAgIHRpZmZIZWFkZXJPZmZzZXQsXG4gICAgICAgIHhtcENodW5rcyxcbiAgICAgICAgaWNjQ2h1bmtzXG4gICAgfTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/image-header-webp.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/image-header.js":
/*!*****************************************************!*\
  !*** ./node_modules/exifreader/src/image-header.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/exifreader/src/constants.js\");\n/* harmony import */ var _image_header_tiff_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./image-header-tiff.js */ \"./node_modules/exifreader/src/image-header-tiff.js\");\n/* harmony import */ var _image_header_jpeg_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./image-header-jpeg.js */ \"./node_modules/exifreader/src/image-header-jpeg.js\");\n/* harmony import */ var _image_header_png_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./image-header-png.js */ \"./node_modules/exifreader/src/image-header-png.js\");\n/* harmony import */ var _image_header_heic_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./image-header-heic.js */ \"./node_modules/exifreader/src/image-header-heic.js\");\n/* harmony import */ var _image_header_webp_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./image-header-webp.js */ \"./node_modules/exifreader/src/image-header-webp.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  parseAppMarkers: parseAppMarkers\n});\n\nfunction parseAppMarkers(dataView) {\n  if (_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].USE_TIFF && _image_header_tiff_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isTiffFile(dataView)) {\n    return _image_header_tiff_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].findTiffOffsets();\n  }\n\n  if (_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].USE_JPEG && _image_header_jpeg_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].isJpegFile(dataView)) {\n    return _image_header_jpeg_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].findJpegOffsets(dataView);\n  }\n\n  if (_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].USE_PNG && _image_header_png_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isPngFile(dataView)) {\n    return _image_header_png_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].findPngOffsets(dataView);\n  }\n\n  if (_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].USE_HEIC && _image_header_heic_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].isHeicFile(dataView)) {\n    return _image_header_heic_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].findHeicOffsets(dataView);\n  }\n\n  if (_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].USE_WEBP && _image_header_webp_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].isWebpFile(dataView)) {\n    return _image_header_webp_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].findOffsets(dataView);\n  }\n\n  throw new Error('Invalid image format');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL2ltYWdlLWhlYWRlci5qcz80OGRkIl0sIm5hbWVzIjpbInBhcnNlQXBwTWFya2VycyIsImRhdGFWaWV3IiwiQ29uc3RhbnRzIiwiVVNFX1RJRkYiLCJUaWZmIiwiaXNUaWZmRmlsZSIsImZpbmRUaWZmT2Zmc2V0cyIsIlVTRV9KUEVHIiwiSnBlZyIsImlzSnBlZ0ZpbGUiLCJmaW5kSnBlZ09mZnNldHMiLCJVU0VfUE5HIiwiUG5nIiwiaXNQbmdGaWxlIiwiZmluZFBuZ09mZnNldHMiLCJVU0VfSEVJQyIsIkhlaWMiLCJpc0hlaWNGaWxlIiwiZmluZEhlaWNPZmZzZXRzIiwiVVNFX1dFQlAiLCJXZWJwIiwiaXNXZWJwRmlsZSIsImZpbmRPZmZzZXRzIiwiRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVlO0FBQ1hBLGlCQUFlLEVBQWZBO0FBRFcsQ0FBZjs7QUFJQSxTQUFTQSxlQUFULENBQXlCQyxRQUF6QixFQUFtQztBQUMvQixNQUFJQyxxREFBUyxDQUFDQyxRQUFWLElBQXNCQyw2REFBSSxDQUFDQyxVQUFMLENBQWdCSixRQUFoQixDQUExQixFQUFxRDtBQUNqRCxXQUFPRyw2REFBSSxDQUFDRSxlQUFMLEVBQVA7QUFDSDs7QUFFRCxNQUFJSixxREFBUyxDQUFDSyxRQUFWLElBQXNCQyw2REFBSSxDQUFDQyxVQUFMLENBQWdCUixRQUFoQixDQUExQixFQUFxRDtBQUNqRCxXQUFPTyw2REFBSSxDQUFDRSxlQUFMLENBQXFCVCxRQUFyQixDQUFQO0FBQ0g7O0FBRUQsTUFBSUMscURBQVMsQ0FBQ1MsT0FBVixJQUFxQkMsNERBQUcsQ0FBQ0MsU0FBSixDQUFjWixRQUFkLENBQXpCLEVBQWtEO0FBQzlDLFdBQU9XLDREQUFHLENBQUNFLGNBQUosQ0FBbUJiLFFBQW5CLENBQVA7QUFDSDs7QUFFRCxNQUFJQyxxREFBUyxDQUFDYSxRQUFWLElBQXNCQyw2REFBSSxDQUFDQyxVQUFMLENBQWdCaEIsUUFBaEIsQ0FBMUIsRUFBcUQ7QUFDakQsV0FBT2UsNkRBQUksQ0FBQ0UsZUFBTCxDQUFxQmpCLFFBQXJCLENBQVA7QUFDSDs7QUFFRCxNQUFJQyxxREFBUyxDQUFDaUIsUUFBVixJQUFzQkMsNkRBQUksQ0FBQ0MsVUFBTCxDQUFnQnBCLFFBQWhCLENBQTFCLEVBQXFEO0FBQ2pELFdBQU9tQiw2REFBSSxDQUFDRSxXQUFMLENBQWlCckIsUUFBakIsQ0FBUDtBQUNIOztBQUVELFFBQU0sSUFBSXNCLEtBQUosQ0FBVSxzQkFBVixDQUFOO0FBQ0giLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXhpZnJlYWRlci9zcmMvaW1hZ2UtaGVhZGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICogZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHBzOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBDb25zdGFudHMgZnJvbSAnLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IFRpZmYgZnJvbSAnLi9pbWFnZS1oZWFkZXItdGlmZi5qcyc7XG5pbXBvcnQgSnBlZyBmcm9tICcuL2ltYWdlLWhlYWRlci1qcGVnLmpzJztcbmltcG9ydCBQbmcgZnJvbSAnLi9pbWFnZS1oZWFkZXItcG5nLmpzJztcbmltcG9ydCBIZWljIGZyb20gJy4vaW1hZ2UtaGVhZGVyLWhlaWMuanMnO1xuaW1wb3J0IFdlYnAgZnJvbSAnLi9pbWFnZS1oZWFkZXItd2VicC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwYXJzZUFwcE1hcmtlcnNcbn07XG5cbmZ1bmN0aW9uIHBhcnNlQXBwTWFya2VycyhkYXRhVmlldykge1xuICAgIGlmIChDb25zdGFudHMuVVNFX1RJRkYgJiYgVGlmZi5pc1RpZmZGaWxlKGRhdGFWaWV3KSkge1xuICAgICAgICByZXR1cm4gVGlmZi5maW5kVGlmZk9mZnNldHMoKTtcbiAgICB9XG5cbiAgICBpZiAoQ29uc3RhbnRzLlVTRV9KUEVHICYmIEpwZWcuaXNKcGVnRmlsZShkYXRhVmlldykpIHtcbiAgICAgICAgcmV0dXJuIEpwZWcuZmluZEpwZWdPZmZzZXRzKGRhdGFWaWV3KTtcbiAgICB9XG5cbiAgICBpZiAoQ29uc3RhbnRzLlVTRV9QTkcgJiYgUG5nLmlzUG5nRmlsZShkYXRhVmlldykpIHtcbiAgICAgICAgcmV0dXJuIFBuZy5maW5kUG5nT2Zmc2V0cyhkYXRhVmlldyk7XG4gICAgfVxuXG4gICAgaWYgKENvbnN0YW50cy5VU0VfSEVJQyAmJiBIZWljLmlzSGVpY0ZpbGUoZGF0YVZpZXcpKSB7XG4gICAgICAgIHJldHVybiBIZWljLmZpbmRIZWljT2Zmc2V0cyhkYXRhVmlldyk7XG4gICAgfVxuXG4gICAgaWYgKENvbnN0YW50cy5VU0VfV0VCUCAmJiBXZWJwLmlzV2VicEZpbGUoZGF0YVZpZXcpKSB7XG4gICAgICAgIHJldHVybiBXZWJwLmZpbmRPZmZzZXRzKGRhdGFWaWV3KTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW1hZ2UgZm9ybWF0Jyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/image-header.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/iptc-tag-names.js":
/*!*******************************************************!*\
  !*** ./node_modules/exifreader/src/iptc-tag-names.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tag-names-utils.js */ \"./node_modules/exifreader/src/tag-names-utils.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  'iptc': {\n    0x0100: {\n      'name': 'Model Version',\n      'description': function description(value) {\n        return ((value[0] << 8) + value[1]).toString();\n      }\n    },\n    0x0105: {\n      'name': 'Destination',\n      'repeatable': true\n    },\n    0x0114: {\n      'name': 'File Format',\n      'description': function description(value) {\n        return ((value[0] << 8) + value[1]).toString();\n      }\n    },\n    0x0116: {\n      'name': 'File Format Version',\n      'description': function description(value) {\n        return ((value[0] << 8) + value[1]).toString();\n      }\n    },\n    0x011e: 'Service Identifier',\n    0x0128: 'Envelope Number',\n    0x0132: 'Product ID',\n    0x013c: 'Envelope Priority',\n    0x0146: {\n      'name': 'Date Sent',\n      'description': getCreationDate\n    },\n    0x0150: {\n      'name': 'Time Sent',\n      'description': getCreationTime\n    },\n    0x015a: {\n      'name': 'Coded Character Set',\n      'description': getEncodingName,\n      'encoding_name': getEncodingName\n    },\n    0x0164: 'UNO',\n    0x0178: {\n      'name': 'ARM Identifier',\n      'description': function description(value) {\n        return ((value[0] << 8) + value[1]).toString();\n      }\n    },\n    0x017a: {\n      'name': 'ARM Version',\n      'description': function description(value) {\n        return ((value[0] << 8) + value[1]).toString();\n      }\n    },\n    0x0200: {\n      'name': 'Record Version',\n      'description': function description(value) {\n        return ((value[0] << 8) + value[1]).toString();\n      }\n    },\n    0x0203: 'Object Type Reference',\n    0x0204: 'Object Attribute Reference',\n    0x0205: 'Object Name',\n    0x0207: 'Edit Status',\n    0x0208: {\n      'name': 'Editorial Update',\n      'description': function description(value) {\n        if (Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value) === '01') {\n          return 'Additional Language';\n        }\n\n        return 'Unknown';\n      }\n    },\n    0x020a: 'Urgency',\n    0x020c: {\n      'name': 'Subject Reference',\n      'repeatable': true,\n      'description': function description(value) {\n        var parts = Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value).split(':');\n        return parts[2] + (parts[3] ? '/' + parts[3] : '') + (parts[4] ? '/' + parts[4] : '');\n      }\n    },\n    0x020f: 'Category',\n    0x0214: {\n      'name': 'Supplemental Category',\n      'repeatable': true\n    },\n    0x0216: 'Fixture Identifier',\n    0x0219: {\n      'name': 'Keywords',\n      'repeatable': true\n    },\n    0x021a: {\n      'name': 'Content Location Code',\n      'repeatable': true\n    },\n    0x021b: {\n      'name': 'Content Location Name',\n      'repeatable': true\n    },\n    0x021e: 'Release Date',\n    0x0223: 'Release Time',\n    0x0225: 'Expiration Date',\n    0x0226: 'Expiration Time',\n    0x0228: 'Special Instructions',\n    0x022a: {\n      'name': 'Action Advised',\n      'description': function description(value) {\n        var string = Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value);\n\n        if (string === '01') {\n          return 'Object Kill';\n        } else if (string === '02') {\n          return 'Object Replace';\n        } else if (string === '03') {\n          return 'Object Append';\n        } else if (string === '04') {\n          return 'Object Reference';\n        }\n\n        return 'Unknown';\n      }\n    },\n    0x022d: {\n      'name': 'Reference Service',\n      'repeatable': true\n    },\n    0x022f: {\n      'name': 'Reference Date',\n      'repeatable': true\n    },\n    0x0232: {\n      'name': 'Reference Number',\n      'repeatable': true\n    },\n    0x0237: {\n      'name': 'Date Created',\n      'description': getCreationDate\n    },\n    0x023c: {\n      'name': 'Time Created',\n      'description': getCreationTime\n    },\n    0x023e: {\n      'name': 'Digital Creation Date',\n      'description': getCreationDate\n    },\n    0x023f: {\n      'name': 'Digital Creation Time',\n      'description': getCreationTime\n    },\n    0x0241: 'Originating Program',\n    0x0246: 'Program Version',\n    0x024b: {\n      'name': 'Object Cycle',\n      'description': function description(value) {\n        var string = Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value);\n\n        if (string === 'a') {\n          return 'morning';\n        } else if (string === 'p') {\n          return 'evening';\n        } else if (string === 'b') {\n          return 'both';\n        }\n\n        return 'Unknown';\n      }\n    },\n    0x0250: {\n      'name': 'By-line',\n      'repeatable': true\n    },\n    0x0255: {\n      'name': 'By-line Title',\n      'repeatable': true\n    },\n    0x025a: 'City',\n    0x025c: 'Sub-location',\n    0x025f: 'Province/State',\n    0x0264: 'Country/Primary Location Code',\n    0x0265: 'Country/Primary Location Name',\n    0x0267: 'Original Transmission Reference',\n    0x0269: 'Headline',\n    0x026e: 'Credit',\n    0x0273: 'Source',\n    0x0274: 'Copyright Notice',\n    0x0276: {\n      'name': 'Contact',\n      'repeatable': true\n    },\n    0x0278: 'Caption/Abstract',\n    0x027a: {\n      'name': 'Writer/Editor',\n      'repeatable': true\n    },\n    0x027d: {\n      'name': 'Rasterized Caption',\n      'description': function description(value) {\n        return value;\n      }\n    },\n    0x0282: 'Image Type',\n    0x0283: {\n      'name': 'Image Orientation',\n      'description': function description(value) {\n        var string = Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value);\n\n        if (string === 'P') {\n          return 'Portrait';\n        } else if (string === 'L') {\n          return 'Landscape';\n        } else if (string === 'S') {\n          return 'Square';\n        }\n\n        return 'Unknown';\n      }\n    },\n    0x0287: 'Language Identifier',\n    0x0296: {\n      'name': 'Audio Type',\n      'description': function description(value) {\n        var stringValue = Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value);\n        var character0 = stringValue.charAt(0);\n        var character1 = stringValue.charAt(1);\n        var description = '';\n\n        if (character0 === '1') {\n          description += 'Mono';\n        } else if (character0 === '2') {\n          description += 'Stereo';\n        }\n\n        if (character1 === 'A') {\n          description += ', actuality';\n        } else if (character1 === 'C') {\n          description += ', question and answer session';\n        } else if (character1 === 'M') {\n          description += ', music, transmitted by itself';\n        } else if (character1 === 'Q') {\n          description += ', response to a question';\n        } else if (character1 === 'R') {\n          description += ', raw sound';\n        } else if (character1 === 'S') {\n          description += ', scener';\n        } else if (character1 === 'V') {\n          description += ', voicer';\n        } else if (character1 === 'W') {\n          description += ', wrap';\n        }\n\n        if (description !== '') {\n          return description;\n        }\n\n        return stringValue;\n      }\n    },\n    0x0297: {\n      'name': 'Audio Sampling Rate',\n      'description': function description(value) {\n        return parseInt(Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value), 10) + ' Hz';\n      }\n    },\n    0x0298: {\n      'name': 'Audio Sampling Resolution',\n      'description': function description(value) {\n        var bits = parseInt(Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value), 10);\n        return bits + (bits === 1 ? ' bit' : ' bits');\n      }\n    },\n    0x0299: {\n      'name': 'Audio Duration',\n      'description': function description(value) {\n        var duration = Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value);\n\n        if (duration.length >= 6) {\n          return duration.substr(0, 2) + ':' + duration.substr(2, 2) + ':' + duration.substr(4, 2);\n        }\n\n        return duration;\n      }\n    },\n    0x029a: 'Audio Outcue',\n    0x02ba: 'Short Document ID',\n    0x02bb: 'Unique Document ID',\n    0x02bc: 'Owner ID',\n    0x02c8: {\n      'name': function name(value) {\n        if (value.length === 2) {\n          return 'ObjectData Preview File Format';\n        }\n\n        return 'Record 2 destination';\n      },\n      'description': function description(value) {\n        if (value.length === 2) {\n          var intValue = (value[0] << 8) + value[1];\n\n          if (intValue === 0) {\n            return 'No ObjectData';\n          } else if (intValue === 1) {\n            return 'IPTC-NAA Digital Newsphoto Parameter Record';\n          } else if (intValue === 2) {\n            return 'IPTC7901 Recommended Message Format';\n          } else if (intValue === 3) {\n            return 'Tagged Image File Format (Adobe/Aldus Image data)';\n          } else if (intValue === 4) {\n            return 'Illustrator (Adobe Graphics data)';\n          } else if (intValue === 5) {\n            return 'AppleSingle (Apple Computer Inc)';\n          } else if (intValue === 6) {\n            return 'NAA 89-3 (ANPA 1312)';\n          } else if (intValue === 7) {\n            return 'MacBinary II';\n          } else if (intValue === 8) {\n            return 'IPTC Unstructured Character Oriented File Format (UCOFF)';\n          } else if (intValue === 9) {\n            return 'United Press International ANPA 1312 variant';\n          } else if (intValue === 10) {\n            return 'United Press International Down-Load Message';\n          } else if (intValue === 11) {\n            return 'JPEG File Interchange (JFIF)';\n          } else if (intValue === 12) {\n            return 'Photo-CD Image-Pac (Eastman Kodak)';\n          } else if (intValue === 13) {\n            return 'Microsoft Bit Mapped Graphics File [*.BMP]';\n          } else if (intValue === 14) {\n            return 'Digital Audio File [*.WAV] (Microsoft & Creative Labs)';\n          } else if (intValue === 15) {\n            return 'Audio plus Moving Video [*.AVI] (Microsoft)';\n          } else if (intValue === 16) {\n            return 'PC DOS/Windows Executable Files [*.COM][*.EXE]';\n          } else if (intValue === 17) {\n            return 'Compressed Binary File [*.ZIP] (PKWare Inc)';\n          } else if (intValue === 18) {\n            return 'Audio Interchange File Format AIFF (Apple Computer Inc)';\n          } else if (intValue === 19) {\n            return 'RIFF Wave (Microsoft Corporation)';\n          } else if (intValue === 20) {\n            return 'Freehand (Macromedia/Aldus)';\n          } else if (intValue === 21) {\n            return 'Hypertext Markup Language \"HTML\" (The Internet Society)';\n          } else if (intValue === 22) {\n            return 'MPEG 2 Audio Layer 2 (Musicom), ISO/IEC';\n          } else if (intValue === 23) {\n            return 'MPEG 2 Audio Layer 3, ISO/IEC';\n          } else if (intValue === 24) {\n            return 'Portable Document File (*.PDF) Adobe';\n          } else if (intValue === 25) {\n            return 'News Industry Text Format (NITF)';\n          } else if (intValue === 26) {\n            return 'Tape Archive (*.TAR)';\n          } else if (intValue === 27) {\n            return 'Tidningarnas Telegrambyrå NITF version (TTNITF DTD)';\n          } else if (intValue === 28) {\n            return 'Ritzaus Bureau NITF version (RBNITF DTD)';\n          } else if (intValue === 29) {\n            return 'Corel Draw [*.CDR]';\n          }\n\n          return \"Unknown format \".concat(intValue);\n        }\n\n        return Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value);\n      }\n    },\n    0x02c9: {\n      'name': 'ObjectData Preview File Format Version',\n      'description': function description(value, tags) {\n        // Format ID, Version ID, Version Description\n        var formatVersions = {\n          '00': {\n            '00': '1'\n          },\n          '01': {\n            '01': '1',\n            '02': '2',\n            '03': '3',\n            '04': '4'\n          },\n          '02': {\n            '04': '4'\n          },\n          '03': {\n            '01': '5.0',\n            '02': '6.0'\n          },\n          '04': {\n            '01': '1.40'\n          },\n          '05': {\n            '01': '2'\n          },\n          '06': {\n            '01': '1'\n          },\n          '11': {\n            '01': '1.02'\n          },\n          '20': {\n            '01': '3.1',\n            '02': '4.0',\n            '03': '5.0',\n            '04': '5.5'\n          },\n          '21': {\n            '02': '2.0'\n          }\n        };\n        var stringValue = Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value);\n\n        if (tags['ObjectData Preview File Format']) {\n          var objectDataPreviewFileFormat = Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(tags['ObjectData Preview File Format'].value);\n\n          if (formatVersions[objectDataPreviewFileFormat] && formatVersions[objectDataPreviewFileFormat][stringValue]) {\n            return formatVersions[objectDataPreviewFileFormat][stringValue];\n          }\n        }\n\n        return stringValue;\n      }\n    },\n    0x02ca: 'ObjectData Preview Data',\n    0x070a: {\n      'name': 'Size Mode',\n      'description': function description(value) {\n        return value[0].toString();\n      }\n    },\n    0x0714: {\n      'name': 'Max Subfile Size',\n      'description': function description(value) {\n        var n = 0;\n\n        for (var i = 0; i < value.length; i++) {\n          n = (n << 8) + value[i];\n        }\n\n        return n.toString();\n      }\n    },\n    0x075a: {\n      'name': 'ObjectData Size Announced',\n      'description': function description(value) {\n        var n = 0;\n\n        for (var i = 0; i < value.length; i++) {\n          n = (n << 8) + value[i];\n        }\n\n        return n.toString();\n      }\n    },\n    0x075f: {\n      'name': 'Maximum ObjectData Size',\n      'description': function description(value) {\n        var n = 0;\n\n        for (var i = 0; i < value.length; i++) {\n          n = (n << 8) + value[i];\n        }\n\n        return n.toString();\n      }\n    }\n  }\n});\n\nfunction getCreationDate(value) {\n  var date = Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value);\n\n  if (date.length >= 8) {\n    return date.substr(0, 4) + '-' + date.substr(4, 2) + '-' + date.substr(6, 2);\n  }\n\n  return date;\n}\n\nfunction getCreationTime(value) {\n  var time = Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value);\n  var parsedTime = time;\n\n  if (time.length >= 6) {\n    parsedTime = time.substr(0, 2) + ':' + time.substr(2, 2) + ':' + time.substr(4, 2);\n\n    if (time.length === 11) {\n      parsedTime += time.substr(6, 1) + time.substr(7, 2) + ':' + time.substr(9, 2);\n    }\n  }\n\n  return parsedTime;\n}\n\nfunction getEncodingName(value) {\n  var string = Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value);\n\n  if (string === '\\x1b%G') {\n    return 'UTF-8';\n  } else if (string === '\\x1b%5') {\n    return 'Windows-1252';\n  } else if (string === '\\x1b%/G') {\n    return 'UTF-8 Level 1';\n  } else if (string === '\\x1b%/H') {\n    return 'UTF-8 Level 2';\n  } else if (string === '\\x1b%/I') {\n    return 'UTF-8 Level 3';\n  } else if (string === '\\x1B/A') {\n    return 'ISO-8859-1';\n  } else if (string === '\\x1B/B') {\n    return 'ISO-8859-2';\n  } else if (string === '\\x1B/C') {\n    return 'ISO-8859-3';\n  } else if (string === '\\x1B/D') {\n    return 'ISO-8859-4';\n  } else if (string === '\\x1B/@') {\n    return 'ISO-8859-5';\n  } else if (string === '\\x1B/G') {\n    return 'ISO-8859-6';\n  } else if (string === '\\x1B/F') {\n    return 'ISO-8859-7';\n  } else if (string === '\\x1B/H') {\n    return 'ISO-8859-8';\n  }\n\n  return 'Unknown';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/iptc-tag-names.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/iptc-tags.js":
/*!**************************************************!*\
  !*** ./node_modules/exifreader/src/iptc-tags.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _iptc_tag_names_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./iptc-tag-names.js */ \"./node_modules/exifreader/src/iptc-tag-names.js\");\n/* harmony import */ var _tag_decoder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tag-decoder.js */ \"./node_modules/exifreader/src/tag-decoder.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n\nvar BYTES_8BIM = 0x3842494d;\nvar BYTES_8BIM_SIZE = 4;\nvar RESOURCE_BLOCK_HEADER_SIZE = BYTES_8BIM_SIZE + 8;\nvar NAA_RESOURCE_BLOCK_TYPE = 0x0404;\nvar TAG_HEADER_SIZE = 5;\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  read: read\n});\n\nfunction read(dataView, dataOffset) {\n  try {\n    if (Array.isArray(dataView)) {\n      return parseTags(new DataView(Uint8Array.from(dataView).buffer), {\n        size: dataView.length\n      }, 0);\n    }\n\n    var _getNaaResourceBlock = getNaaResourceBlock(dataView, dataOffset),\n        naaBlock = _getNaaResourceBlock.naaBlock,\n        newDataOffset = _getNaaResourceBlock.dataOffset;\n\n    return parseTags(dataView, naaBlock, newDataOffset);\n  } catch (error) {\n    return {};\n  }\n}\n\nfunction getNaaResourceBlock(dataView, dataOffset) {\n  while (dataOffset + RESOURCE_BLOCK_HEADER_SIZE <= dataView.byteLength) {\n    var resourceBlock = getResourceBlock(dataView, dataOffset);\n\n    if (isNaaResourceBlock(resourceBlock)) {\n      return {\n        naaBlock: resourceBlock,\n        dataOffset: dataOffset + RESOURCE_BLOCK_HEADER_SIZE\n      };\n    }\n\n    dataOffset += RESOURCE_BLOCK_HEADER_SIZE + resourceBlock.size + getBlockPadding(resourceBlock);\n  }\n\n  throw new Error('No IPTC NAA resource block.');\n}\n\nfunction getResourceBlock(dataView, dataOffset) {\n  var RESOURCE_BLOCK_SIZE_OFFSET = 10;\n\n  if (dataView.getUint32(dataOffset, false) !== BYTES_8BIM) {\n    throw new Error('Not an IPTC resource block.');\n  }\n\n  return {\n    type: dataView.getUint16(dataOffset + BYTES_8BIM_SIZE),\n    size: dataView.getUint16(dataOffset + RESOURCE_BLOCK_SIZE_OFFSET)\n  };\n}\n\nfunction isNaaResourceBlock(resourceBlock) {\n  return resourceBlock.type === NAA_RESOURCE_BLOCK_TYPE;\n}\n\nfunction getBlockPadding(resourceBlock) {\n  if (resourceBlock.size % 2 !== 0) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction parseTags(dataView, naaBlock, dataOffset) {\n  var tags = {};\n  var encoding = undefined;\n  var endOfBlockOffset = dataOffset + naaBlock['size'];\n\n  while (dataOffset < endOfBlockOffset && dataOffset < dataView.byteLength) {\n    var _readTag = readTag(dataView, dataOffset, tags, encoding),\n        tag = _readTag.tag,\n        tagSize = _readTag.tagSize;\n\n    if (tag === null) {\n      break;\n    }\n\n    if ('encoding' in tag) {\n      encoding = tag.encoding;\n    }\n\n    if (tags[tag.name] === undefined || tag['repeatable'] === undefined) {\n      tags[tag.name] = {\n        id: tag.id,\n        value: tag.value,\n        description: tag.description\n      };\n    } else {\n      if (!(tags[tag.name] instanceof Array)) {\n        tags[tag.name] = [{\n          id: tags[tag.name].id,\n          value: tags[tag.name].value,\n          description: tags[tag.name].description\n        }];\n      }\n\n      tags[tag.name].push({\n        id: tag.id,\n        value: tag.value,\n        description: tag.description\n      });\n    }\n\n    dataOffset += TAG_HEADER_SIZE + tagSize;\n  }\n\n  return tags;\n}\n\nfunction readTag(dataView, dataOffset, tags, encoding) {\n  var TAG_CODE_OFFSET = 1;\n  var TAG_SIZE_OFFSET = 3;\n\n  if (leadByteIsMissing(dataView, dataOffset)) {\n    return {\n      tag: null,\n      tagSize: 0\n    };\n  }\n\n  var tagCode = dataView.getUint16(dataOffset + TAG_CODE_OFFSET);\n  var tagSize = dataView.getUint16(dataOffset + TAG_SIZE_OFFSET);\n  var tagValue = getTagValue(dataView, dataOffset + TAG_HEADER_SIZE, tagSize);\n  var tag = {\n    id: tagCode,\n    name: getTagName(_iptc_tag_names_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]['iptc'][tagCode], tagCode, tagValue),\n    value: tagValue,\n    description: getTagDescription(_iptc_tag_names_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]['iptc'][tagCode], tagValue, tags, encoding)\n  };\n\n  if (tagIsRepeatable(tagCode)) {\n    tag['repeatable'] = true;\n  }\n\n  if (tagContainsEncoding(tagCode)) {\n    tag['encoding'] = _iptc_tag_names_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]['iptc'][tagCode]['encoding_name'](tagValue);\n  }\n\n  return {\n    tag: tag,\n    tagSize: tagSize\n  };\n}\n\nfunction leadByteIsMissing(dataView, dataOffset) {\n  var TAG_LEAD_BYTE = 0x1c;\n  return dataView.getUint8(dataOffset) !== TAG_LEAD_BYTE;\n}\n\nfunction getTagValue(dataView, offset, size) {\n  var value = [];\n\n  for (var valueIndex = 0; valueIndex < size; valueIndex++) {\n    value.push(dataView.getUint8(offset + valueIndex));\n  }\n\n  return value;\n}\n\nfunction getTagName(tag, tagCode, tagValue) {\n  if (!tag) {\n    return \"undefined-\".concat(tagCode);\n  }\n\n  if (tagIsName(tag)) {\n    return tag;\n  }\n\n  if (hasDynamicName(tag)) {\n    return tag['name'](tagValue);\n  }\n\n  return tag['name'];\n}\n\nfunction tagIsName(tag) {\n  return typeof tag === 'string';\n}\n\nfunction hasDynamicName(tag) {\n  return typeof tag['name'] === 'function';\n}\n\nfunction getTagDescription(tag, tagValue, tags, encoding) {\n  if (hasDescriptionProperty(tag)) {\n    try {\n      return tag['description'](tagValue, tags);\n    } catch (error) {// Fall through to next handler.\n    }\n  }\n\n  if (tagValueIsText(tag, tagValue)) {\n    return _tag_decoder_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].decode(encoding, tagValue);\n  }\n\n  return tagValue;\n}\n\nfunction tagValueIsText(tag, tagValue) {\n  return tag && tagValue instanceof Array;\n}\n\nfunction hasDescriptionProperty(tag) {\n  return tag && tag['description'] !== undefined;\n}\n\nfunction tagIsRepeatable(tagCode) {\n  return _iptc_tag_names_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]['iptc'][tagCode] && _iptc_tag_names_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]['iptc'][tagCode]['repeatable'];\n}\n\nfunction tagContainsEncoding(tagCode) {\n  return _iptc_tag_names_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]['iptc'][tagCode] && _iptc_tag_names_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]['iptc'][tagCode]['encoding_name'] !== undefined;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/iptc-tags.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/png-file-tags.js":
/*!******************************************************!*\
  !*** ./node_modules/exifreader/src/png-file-tags.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"./node_modules/exifreader/src/types.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  read: read\n});\n\nfunction read(dataView, fileDataOffset) {\n  return {\n    'Image Width': getImageWidth(dataView, fileDataOffset),\n    'Image Height': getImageHeight(dataView, fileDataOffset),\n    'Bit Depth': getBitDepth(dataView, fileDataOffset),\n    'Color Type': getColorType(dataView, fileDataOffset),\n    'Compression': getCompression(dataView, fileDataOffset),\n    'Filter': getFilter(dataView, fileDataOffset),\n    'Interlace': getInterlace(dataView, fileDataOffset)\n  };\n}\n\nfunction getImageWidth(dataView, fileDataOffset) {\n  var OFFSET = 0;\n  var SIZE = 4;\n\n  if (fileDataOffset + OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n\n  var value = _types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLongAt(dataView, fileDataOffset);\n  return {\n    value: value,\n    description: \"\".concat(value, \"px\")\n  };\n}\n\nfunction getImageHeight(dataView, fileDataOffset) {\n  var OFFSET = 4;\n  var SIZE = 4;\n\n  if (fileDataOffset + OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n\n  var value = _types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLongAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value: value,\n    description: \"\".concat(value, \"px\")\n  };\n}\n\nfunction getBitDepth(dataView, fileDataOffset) {\n  var OFFSET = 8;\n  var SIZE = 1;\n\n  if (fileDataOffset + OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n\n  var value = _types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getByteAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value: value,\n    description: \"\".concat(value)\n  };\n}\n\nfunction getColorType(dataView, fileDataOffset) {\n  var OFFSET = 9;\n  var SIZE = 1;\n  var COLOR_TYPES = {\n    0: 'Grayscale',\n    2: 'RGB',\n    3: 'Palette',\n    4: 'Grayscale with Alpha',\n    6: 'RGB with Alpha'\n  };\n\n  if (fileDataOffset + OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n\n  var value = _types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getByteAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value: value,\n    description: COLOR_TYPES[value] || 'Unknown'\n  };\n}\n\nfunction getCompression(dataView, fileDataOffset) {\n  var OFFSET = 10;\n  var SIZE = 1;\n\n  if (fileDataOffset + OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n\n  var value = _types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getByteAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value: value,\n    description: value === 0 ? 'Deflate/Inflate' : 'Unknown'\n  };\n}\n\nfunction getFilter(dataView, fileDataOffset) {\n  var OFFSET = 11;\n  var SIZE = 1;\n\n  if (fileDataOffset + OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n\n  var value = _types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getByteAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value: value,\n    description: value === 0 ? 'Adaptive' : 'Unknown'\n  };\n}\n\nfunction getInterlace(dataView, fileDataOffset) {\n  var OFFSET = 12;\n  var SIZE = 1;\n  var INTERLACE_TYPES = {\n    0: 'Noninterlaced',\n    1: 'Adam7 Interlace'\n  };\n\n  if (fileDataOffset + OFFSET + SIZE > dataView.byteLength) {\n    return undefined;\n  }\n\n  var value = _types_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getByteAt(dataView, fileDataOffset + OFFSET);\n  return {\n    value: value,\n    description: INTERLACE_TYPES[value] || 'Unknown'\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/png-file-tags.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/tag-decoder.js":
/*!****************************************************!*\
  !*** ./node_modules/exifreader/src/tag-decoder.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _text_decoder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text-decoder.js */ \"./node_modules/exifreader/src/text-decoder.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nvar TAG_HEADER_SIZE = 5;\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  decode: decode,\n  TAG_HEADER_SIZE: TAG_HEADER_SIZE\n});\n\nfunction decode(encoding, tagValue) {\n  var Decoder = _text_decoder_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get();\n\n  if (typeof Decoder !== 'undefined' && encoding !== undefined) {\n    try {\n      return new Decoder(encoding).decode(Uint8Array.from(tagValue));\n    } catch (error) {// Pass through and fall back to ASCII decoding.\n    }\n  }\n\n  var stringValue = tagValue.map(function (charCode) {\n    return String.fromCharCode(charCode);\n  }).join('');\n  return decodeAsciiValue(stringValue);\n}\n\nfunction decodeAsciiValue(asciiValue) {\n  try {\n    return decodeURIComponent(escape(asciiValue));\n  } catch (error) {\n    return asciiValue;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL3RhZy1kZWNvZGVyLmpzPzlkYzgiXSwibmFtZXMiOlsiVEFHX0hFQURFUl9TSVpFIiwiZGVjb2RlIiwiZW5jb2RpbmciLCJ0YWdWYWx1ZSIsIkRlY29kZXIiLCJUZXh0RGVjb2RlciIsImdldCIsInVuZGVmaW5lZCIsIlVpbnQ4QXJyYXkiLCJmcm9tIiwiZXJyb3IiLCJzdHJpbmdWYWx1ZSIsIm1hcCIsImNoYXJDb2RlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiam9pbiIsImRlY29kZUFzY2lpVmFsdWUiLCJhc2NpaVZhbHVlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXNjYXBlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7OztBQUlBO0FBRUEsSUFBTUEsZUFBZSxHQUFHLENBQXhCO0FBRWU7QUFDWEMsUUFBTSxFQUFOQSxNQURXO0FBRVhELGlCQUFlLEVBQWZBO0FBRlcsQ0FBZjs7QUFLQSxTQUFTQyxNQUFULENBQWdCQyxRQUFoQixFQUEwQkMsUUFBMUIsRUFBb0M7QUFDaEMsTUFBTUMsT0FBTyxHQUFHQyx3REFBVyxDQUFDQyxHQUFaLEVBQWhCOztBQUNBLE1BQUssT0FBT0YsT0FBUCxLQUFtQixXQUFwQixJQUFxQ0YsUUFBUSxLQUFLSyxTQUF0RCxFQUFrRTtBQUM5RCxRQUFJO0FBQ0EsYUFBTyxJQUFJSCxPQUFKLENBQVlGLFFBQVosRUFBc0JELE1BQXRCLENBQTZCTyxVQUFVLENBQUNDLElBQVgsQ0FBZ0JOLFFBQWhCLENBQTdCLENBQVA7QUFDSCxLQUZELENBRUUsT0FBT08sS0FBUCxFQUFjLENBQ1o7QUFDSDtBQUNKOztBQUVELE1BQU1DLFdBQVcsR0FBR1IsUUFBUSxDQUFDUyxHQUFULENBQWEsVUFBQ0MsUUFBRDtBQUFBLFdBQWNDLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQkYsUUFBcEIsQ0FBZDtBQUFBLEdBQWIsRUFBMERHLElBQTFELENBQStELEVBQS9ELENBQXBCO0FBQ0EsU0FBT0MsZ0JBQWdCLENBQUNOLFdBQUQsQ0FBdkI7QUFDSDs7QUFFRCxTQUFTTSxnQkFBVCxDQUEwQkMsVUFBMUIsRUFBc0M7QUFDbEMsTUFBSTtBQUNBLFdBQU9DLGtCQUFrQixDQUFDQyxNQUFNLENBQUNGLFVBQUQsQ0FBUCxDQUF6QjtBQUNILEdBRkQsQ0FFRSxPQUFPUixLQUFQLEVBQWM7QUFDWixXQUFPUSxVQUFQO0FBQ0g7QUFDSiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9leGlmcmVhZGVyL3NyYy90YWctZGVjb2Rlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwczovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgVGV4dERlY29kZXIgZnJvbSAnLi90ZXh0LWRlY29kZXIuanMnO1xuXG5jb25zdCBUQUdfSEVBREVSX1NJWkUgPSA1O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgZGVjb2RlLFxuICAgIFRBR19IRUFERVJfU0laRVxufTtcblxuZnVuY3Rpb24gZGVjb2RlKGVuY29kaW5nLCB0YWdWYWx1ZSkge1xuICAgIGNvbnN0IERlY29kZXIgPSBUZXh0RGVjb2Rlci5nZXQoKTtcbiAgICBpZiAoKHR5cGVvZiBEZWNvZGVyICE9PSAndW5kZWZpbmVkJykgJiYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERlY29kZXIoZW5jb2RpbmcpLmRlY29kZShVaW50OEFycmF5LmZyb20odGFnVmFsdWUpKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIFBhc3MgdGhyb3VnaCBhbmQgZmFsbCBiYWNrIHRvIEFTQ0lJIGRlY29kaW5nLlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc3RyaW5nVmFsdWUgPSB0YWdWYWx1ZS5tYXAoKGNoYXJDb2RlKSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKSkuam9pbignJyk7XG4gICAgcmV0dXJuIGRlY29kZUFzY2lpVmFsdWUoc3RyaW5nVmFsdWUpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVBc2NpaVZhbHVlKGFzY2lpVmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShhc2NpaVZhbHVlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGFzY2lpVmFsdWU7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/tag-decoder.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/tag-names-0th-ifd.js":
/*!**********************************************************!*\
  !*** ./node_modules/exifreader/src/tag-names-0th-ifd.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tag_names_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tag-names-common.js */ \"./node_modules/exifreader/src/tag-names-common.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  0x000b: 'ProcessingSoftware',\n  0x00fe: {\n    name: 'SubfileType',\n    description: function description(value) {\n      return {\n        0x0: 'Full-resolution image',\n        0x1: 'Reduced-resolution image',\n        0x2: 'Single page of multi-page image',\n        0x3: 'Single page of multi-page reduced-resolution image',\n        0x4: 'Transparency mask',\n        0x5: 'Transparency mask of reduced-resolution image',\n        0x6: 'Transparency mask of multi-page image',\n        0x7: 'Transparency mask of reduced-resolution multi-page image',\n        0x10001: 'Alternate reduced-resolution image',\n        0xffffffff: 'Invalid'\n      }[value] || 'Unknown';\n    }\n  },\n  0x00ff: {\n    name: 'OldSubfileType',\n    description: function description(value) {\n      return {\n        0: 'Full-resolution image',\n        1: 'Reduced-resolution image',\n        2: 'Single page of multi-page image'\n      }[value] || 'Unknown';\n    }\n  },\n  0x0100: 'ImageWidth',\n  0x0101: 'ImageLength',\n  0x0102: 'BitsPerSample',\n  0x0103: 'Compression',\n  0x0106: 'PhotometricInterpretation',\n  0x0107: {\n    name: 'Thresholding',\n    description: function description(value) {\n      return {\n        1: 'No dithering or halftoning',\n        2: 'Ordered dither or halfton',\n        3: 'Randomized dither'\n      }[value] || 'Unknown';\n    }\n  },\n  0x0108: 'CellWidth',\n  0x0109: 'CellLength',\n  0x010a: {\n    name: 'FillOrder',\n    description: function description(value) {\n      return {\n        1: 'Normal',\n        2: 'Reversed'\n      }[value] || 'Unknown';\n    }\n  },\n  0x010d: 'DocumentName',\n  0x010e: 'ImageDescription',\n  0x010f: 'Make',\n  0x0110: 'Model',\n  0x0111: 'StripOffsets',\n  0x0112: {\n    name: 'Orientation',\n    description: function description(value) {\n      if (value === 1) {\n        return 'top-left';\n      }\n\n      if (value === 2) {\n        return 'top-right';\n      }\n\n      if (value === 3) {\n        return 'bottom-right';\n      }\n\n      if (value === 4) {\n        return 'bottom-left';\n      }\n\n      if (value === 5) {\n        return 'left-top';\n      }\n\n      if (value === 6) {\n        return 'right-top';\n      }\n\n      if (value === 7) {\n        return 'right-bottom';\n      }\n\n      if (value === 8) {\n        return 'left-bottom';\n      }\n\n      return 'Undefined';\n    }\n  },\n  0x0115: 'SamplesPerPixel',\n  0x0116: 'RowsPerStrip',\n  0x0117: 'StripByteCounts',\n  0x0118: 'MinSampleValue',\n  0x0119: 'MaxSampleValue',\n  0x011a: {\n    'name': 'XResolution',\n    'description': function description(value) {\n      return '' + Math.round(value[0] / value[1]);\n    }\n  },\n  0x011b: {\n    'name': 'YResolution',\n    'description': function description(value) {\n      return '' + Math.round(value[0] / value[1]);\n    }\n  },\n  0x011c: 'PlanarConfiguration',\n  0x011d: 'PageName',\n  0x011e: {\n    'name': 'XPosition',\n    'description': function description(value) {\n      return '' + Math.round(value[0] / value[1]);\n    }\n  },\n  0x011f: {\n    'name': 'YPosition',\n    'description': function description(value) {\n      return '' + Math.round(value[0] / value[1]);\n    }\n  },\n  0x0122: {\n    name: 'GrayResponseUnit',\n    description: function description(value) {\n      return {\n        1: '0.1',\n        2: '0.001',\n        3: '0.0001',\n        4: '1e-05',\n        5: '1e-06'\n      }[value] || 'Unknown';\n    }\n  },\n  0x0128: {\n    name: 'ResolutionUnit',\n    description: function description(value) {\n      if (value === 2) {\n        return 'inches';\n      }\n\n      if (value === 3) {\n        return 'centimeters';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x0129: 'PageNumber',\n  0x012d: 'TransferFunction',\n  0x0131: 'Software',\n  0x0132: 'DateTime',\n  0x013b: 'Artist',\n  0x013c: 'HostComputer',\n  0x013d: 'Predictor',\n  0x013e: {\n    'name': 'WhitePoint',\n    'description': function description(values) {\n      return values.map(function (value) {\n        return \"\".concat(value[0], \"/\").concat(value[1]);\n      }).join(', ');\n    }\n  },\n  0x013f: {\n    'name': 'PrimaryChromaticities',\n    'description': function description(values) {\n      return values.map(function (value) {\n        return \"\".concat(value[0], \"/\").concat(value[1]);\n      }).join(', ');\n    }\n  },\n  0x0141: 'HalftoneHints',\n  0x0142: 'TileWidth',\n  0x0143: 'TileLength',\n  0x014a: 'A100DataOffset',\n  0x014c: {\n    name: 'InkSet',\n    description: function description(value) {\n      return {\n        1: 'CMYK',\n        2: 'Not CMYK'\n      }[value] || 'Unknown';\n    }\n  },\n  0x0151: 'TargetPrinter',\n  0x0152: {\n    name: 'ExtraSamples',\n    description: function description(value) {\n      return {\n        0: 'Unspecified',\n        1: 'Associated Alpha',\n        2: 'Unassociated Alpha'\n      }[value] || 'Unknown';\n    }\n  },\n  0x0153: {\n    name: 'SampleFormat',\n    description: function description(value) {\n      var formats = {\n        1: 'Unsigned',\n        2: 'Signed',\n        3: 'Float',\n        4: 'Undefined',\n        5: 'Complex int',\n        6: 'Complex float'\n      };\n\n      if (!Array.isArray(value)) {\n        return 'Unknown';\n      }\n\n      return value.map(function (sample) {\n        return formats[sample] || 'Unknown';\n      }).join(', ');\n    }\n  },\n  0x0201: 'JPEGInterchangeFormat',\n  0x0202: 'JPEGInterchangeFormatLength',\n  0x0211: {\n    'name': 'YCbCrCoefficients',\n    'description': function description(values) {\n      return values.map(function (value) {\n        return '' + value[0] / value[1];\n      }).join('/');\n    }\n  },\n  0x0212: 'YCbCrSubSampling',\n  0x0213: {\n    name: 'YCbCrPositioning',\n    description: function description(value) {\n      if (value === 1) {\n        return 'centered';\n      }\n\n      if (value === 2) {\n        return 'co-sited';\n      }\n\n      return 'undefined ' + value;\n    }\n  },\n  0x0214: {\n    'name': 'ReferenceBlackWhite',\n    'description': function description(values) {\n      return values.map(function (value) {\n        return '' + value[0] / value[1];\n      }).join(', ');\n    }\n  },\n  0x02bc: 'ApplicationNotes',\n  0x4746: 'Rating',\n  0x4749: 'RatingPercent',\n  0x8298: {\n    name: 'Copyright',\n    description: function description(value) {\n      return value.join('; ');\n    }\n  },\n  0x830e: 'PixelScale',\n  0x83bb: 'IPTC-NAA',\n  0x8480: 'IntergraphMatrix',\n  0x8482: 'ModelTiePoint',\n  0x8546: 'SEMInfo',\n  0x85d8: 'ModelTransform',\n  0x8649: 'PhotoshopSettings',\n  0x8769: 'Exif IFD Pointer',\n  0x8773: 'ICC_Profile',\n  0x87af: 'GeoTiffDirectory',\n  0x87b0: 'GeoTiffDoubleParams',\n  0x87b1: 'GeoTiffAsciiParams',\n  0x8825: 'GPS Info IFD Pointer',\n  0x9c9b: 'XPTitle',\n  0x9c9c: 'XPComment',\n  0x9c9d: 'XPAuthor',\n  0x9c9e: 'XPKeywords',\n  0x9c9f: 'XPSubject',\n  0xa480: 'GDALMetadata',\n  0xa481: 'GDALNoData',\n  0xc4a5: 'PrintIM',\n  0xc613: 'DNGBackwardVersion',\n  0xc614: 'UniqueCameraModel',\n  0xc615: 'LocalizedCameraModel',\n  0xc621: 'ColorMatrix1',\n  0xc622: 'ColorMatrix2',\n  0xc623: 'CameraCalibration1',\n  0xc624: 'CameraCalibration2',\n  0xc625: 'ReductionMatrix1',\n  0xc626: 'ReductionMatrix2',\n  0xc627: 'AnalogBalance',\n  0xc628: 'AsShotNeutral',\n  0xc629: 'AsShotWhiteXY',\n  0xc62a: 'BaselineExposure',\n  0xc62b: 'BaselineNoise',\n  0xc62c: 'BaselineSharpness',\n  0xc62e: 'LinearResponseLimit',\n  0xc62f: 'CameraSerialNumber',\n  0xc630: 'DNGLensInfo',\n  0xc633: 'ShadowScale',\n  0xc635: {\n    name: 'MakerNoteSafety',\n    description: function description(value) {\n      return {\n        0: 'Unsafe',\n        1: 'Safe'\n      }[value] || 'Unknown';\n    }\n  },\n  0xc65a: {\n    name: 'CalibrationIlluminant1',\n    description: _tag_names_common_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]['LightSource']\n  },\n  0xc65b: {\n    name: 'CalibrationIlluminant2',\n    description: _tag_names_common_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]['LightSource']\n  },\n  0xc65d: 'RawDataUniqueID',\n  0xc68b: 'OriginalRawFileName',\n  0xc68c: 'OriginalRawFileData',\n  0xc68f: 'AsShotICCProfile',\n  0xc690: 'AsShotPreProfileMatrix',\n  0xc691: 'CurrentICCProfile',\n  0xc692: 'CurrentPreProfileMatrix',\n  0xc6bf: 'ColorimetricReference',\n  0xc6c5: 'SRawType',\n  0xc6d2: 'PanasonicTitle',\n  0xc6d3: 'PanasonicTitle2',\n  0xc6f3: 'CameraCalibrationSig',\n  0xc6f4: 'ProfileCalibrationSig',\n  0xc6f5: 'ProfileIFD',\n  0xc6f6: 'AsShotProfileName',\n  0xc6f8: 'ProfileName',\n  0xc6f9: 'ProfileHueSatMapDims',\n  0xc6fa: 'ProfileHueSatMapData1',\n  0xc6fb: 'ProfileHueSatMapData2',\n  0xc6fc: 'ProfileToneCurve',\n  0xc6fd: {\n    name: 'ProfileEmbedPolicy',\n    description: function description(value) {\n      return {\n        0: 'Allow Copying',\n        1: 'Embed if Used',\n        2: 'Never Embed',\n        3: 'No Restrictions'\n      }[value] || 'Unknown';\n    }\n  },\n  0xc6fe: 'ProfileCopyright',\n  0xc714: 'ForwardMatrix1',\n  0xc715: 'ForwardMatrix2',\n  0xc716: 'PreviewApplicationName',\n  0xc717: 'PreviewApplicationVersion',\n  0xc718: 'PreviewSettingsName',\n  0xc719: 'PreviewSettingsDigest',\n  0xc71a: {\n    name: 'PreviewColorSpace',\n    description: function description(value) {\n      return {\n        1: 'Gray Gamma 2.2',\n        2: 'sRGB',\n        3: 'Adobe RGB',\n        4: 'ProPhoto RGB'\n      }[value] || 'Unknown';\n    }\n  },\n  0xc71b: 'PreviewDateTime',\n  0xc71c: 'RawImageDigest',\n  0xc71d: 'OriginalRawFileDigest',\n  0xc725: 'ProfileLookTableDims',\n  0xc726: 'ProfileLookTableData',\n  0xc763: 'TimeCodes',\n  0xc764: 'FrameRate',\n  0xc772: 'TStop',\n  0xc789: 'ReelName',\n  0xc791: 'OriginalDefaultFinalSize',\n  0xc792: 'OriginalBestQualitySize',\n  0xc793: 'OriginalDefaultCropSize',\n  0xc7a1: 'CameraLabel',\n  0xc7a3: {\n    name: 'ProfileHueSatMapEncoding',\n    description: function description(value) {\n      return {\n        0: 'Linear',\n        1: 'sRGB'\n      }[value] || 'Unknown';\n    }\n  },\n  0xc7a4: {\n    name: 'ProfileLookTableEncoding',\n    description: function description(value) {\n      return {\n        0: 'Linear',\n        1: 'sRGB'\n      }[value] || 'Unknown';\n    }\n  },\n  0xc7a5: 'BaselineExposureOffset',\n  0xc7a6: {\n    name: 'DefaultBlackRender',\n    description: function description(value) {\n      return {\n        0: 'Auto',\n        1: 'None'\n      }[value] || 'Unknown';\n    }\n  },\n  0xc7a7: 'NewRawImageDigest',\n  0xc7a8: 'RawToPreviewGain'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/tag-names-0th-ifd.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/tag-names-common.js":
/*!*********************************************************!*\
  !*** ./node_modules/exifreader/src/tag-names-common.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  'LightSource': function LightSource(value) {\n    if (value === 1) {\n      return 'Daylight';\n    } else if (value === 2) {\n      return 'Fluorescent';\n    } else if (value === 3) {\n      return 'Tungsten (incandescent light)';\n    } else if (value === 4) {\n      return 'Flash';\n    } else if (value === 9) {\n      return 'Fine weather';\n    } else if (value === 10) {\n      return 'Cloudy weather';\n    } else if (value === 11) {\n      return 'Shade';\n    } else if (value === 12) {\n      return 'Daylight fluorescent (D 5700 – 7100K)';\n    } else if (value === 13) {\n      return 'Day white fluorescent (N 4600 – 5400K)';\n    } else if (value === 14) {\n      return 'Cool white fluorescent (W 3900 – 4500K)';\n    } else if (value === 15) {\n      return 'White fluorescent (WW 3200 – 3700K)';\n    } else if (value === 17) {\n      return 'Standard light A';\n    } else if (value === 18) {\n      return 'Standard light B';\n    } else if (value === 19) {\n      return 'Standard light C';\n    } else if (value === 20) {\n      return 'D55';\n    } else if (value === 21) {\n      return 'D65';\n    } else if (value === 22) {\n      return 'D75';\n    } else if (value === 23) {\n      return 'D50';\n    } else if (value === 24) {\n      return 'ISO studio tungsten';\n    } else if (value === 255) {\n      return 'Other light source';\n    }\n\n    return 'Unknown';\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL3RhZy1uYW1lcy1jb21tb24uanM/ZmJkMiJdLCJuYW1lcyI6WyJ2YWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTs7O0FBSWU7QUFDWCxpQkFBZSxxQkFBQ0EsS0FBRCxFQUFXO0FBQ3RCLFFBQUlBLEtBQUssS0FBSyxDQUFkLEVBQWlCO0FBQ2IsYUFBTyxVQUFQO0FBQ0gsS0FGRCxNQUVPLElBQUlBLEtBQUssS0FBSyxDQUFkLEVBQWlCO0FBQ3BCLGFBQU8sYUFBUDtBQUNILEtBRk0sTUFFQSxJQUFJQSxLQUFLLEtBQUssQ0FBZCxFQUFpQjtBQUNwQixhQUFPLCtCQUFQO0FBQ0gsS0FGTSxNQUVBLElBQUlBLEtBQUssS0FBSyxDQUFkLEVBQWlCO0FBQ3BCLGFBQU8sT0FBUDtBQUNILEtBRk0sTUFFQSxJQUFJQSxLQUFLLEtBQUssQ0FBZCxFQUFpQjtBQUNwQixhQUFPLGNBQVA7QUFDSCxLQUZNLE1BRUEsSUFBSUEsS0FBSyxLQUFLLEVBQWQsRUFBa0I7QUFDckIsYUFBTyxnQkFBUDtBQUNILEtBRk0sTUFFQSxJQUFJQSxLQUFLLEtBQUssRUFBZCxFQUFrQjtBQUNyQixhQUFPLE9BQVA7QUFDSCxLQUZNLE1BRUEsSUFBSUEsS0FBSyxLQUFLLEVBQWQsRUFBa0I7QUFDckIsYUFBTyx1Q0FBUDtBQUNILEtBRk0sTUFFQSxJQUFJQSxLQUFLLEtBQUssRUFBZCxFQUFrQjtBQUNyQixhQUFPLHdDQUFQO0FBQ0gsS0FGTSxNQUVBLElBQUlBLEtBQUssS0FBSyxFQUFkLEVBQWtCO0FBQ3JCLGFBQU8seUNBQVA7QUFDSCxLQUZNLE1BRUEsSUFBSUEsS0FBSyxLQUFLLEVBQWQsRUFBa0I7QUFDckIsYUFBTyxxQ0FBUDtBQUNILEtBRk0sTUFFQSxJQUFJQSxLQUFLLEtBQUssRUFBZCxFQUFrQjtBQUNyQixhQUFPLGtCQUFQO0FBQ0gsS0FGTSxNQUVBLElBQUlBLEtBQUssS0FBSyxFQUFkLEVBQWtCO0FBQ3JCLGFBQU8sa0JBQVA7QUFDSCxLQUZNLE1BRUEsSUFBSUEsS0FBSyxLQUFLLEVBQWQsRUFBa0I7QUFDckIsYUFBTyxrQkFBUDtBQUNILEtBRk0sTUFFQSxJQUFJQSxLQUFLLEtBQUssRUFBZCxFQUFrQjtBQUNyQixhQUFPLEtBQVA7QUFDSCxLQUZNLE1BRUEsSUFBSUEsS0FBSyxLQUFLLEVBQWQsRUFBa0I7QUFDckIsYUFBTyxLQUFQO0FBQ0gsS0FGTSxNQUVBLElBQUlBLEtBQUssS0FBSyxFQUFkLEVBQWtCO0FBQ3JCLGFBQU8sS0FBUDtBQUNILEtBRk0sTUFFQSxJQUFJQSxLQUFLLEtBQUssRUFBZCxFQUFrQjtBQUNyQixhQUFPLEtBQVA7QUFDSCxLQUZNLE1BRUEsSUFBSUEsS0FBSyxLQUFLLEVBQWQsRUFBa0I7QUFDckIsYUFBTyxxQkFBUDtBQUNILEtBRk0sTUFFQSxJQUFJQSxLQUFLLEtBQUssR0FBZCxFQUFtQjtBQUN0QixhQUFPLG9CQUFQO0FBQ0g7O0FBQ0QsV0FBTyxTQUFQO0FBQ0g7QUE1Q1UsQ0FBZiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9leGlmcmVhZGVyL3NyYy90YWctbmFtZXMtY29tbW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICogZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHBzOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICAnTGlnaHRTb3VyY2UnOiAodmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0RheWxpZ2h0JztcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gMikge1xuICAgICAgICAgICAgcmV0dXJuICdGbHVvcmVzY2VudCc7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDMpIHtcbiAgICAgICAgICAgIHJldHVybiAnVHVuZ3N0ZW4gKGluY2FuZGVzY2VudCBsaWdodCknO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSA0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ0ZsYXNoJztcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gOSkge1xuICAgICAgICAgICAgcmV0dXJuICdGaW5lIHdlYXRoZXInO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAxMCkge1xuICAgICAgICAgICAgcmV0dXJuICdDbG91ZHkgd2VhdGhlcic7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1NoYWRlJztcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAnRGF5bGlnaHQgZmx1b3Jlc2NlbnQgKEQgNTcwMCDigJMgNzEwMEspJztcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gMTMpIHtcbiAgICAgICAgICAgIHJldHVybiAnRGF5IHdoaXRlIGZsdW9yZXNjZW50IChOIDQ2MDAg4oCTIDU0MDBLKSc7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDE0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ0Nvb2wgd2hpdGUgZmx1b3Jlc2NlbnQgKFcgMzkwMCDigJMgNDUwMEspJztcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gMTUpIHtcbiAgICAgICAgICAgIHJldHVybiAnV2hpdGUgZmx1b3Jlc2NlbnQgKFdXIDMyMDAg4oCTIDM3MDBLKSc7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDE3KSB7XG4gICAgICAgICAgICByZXR1cm4gJ1N0YW5kYXJkIGxpZ2h0IEEnO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAxOCkge1xuICAgICAgICAgICAgcmV0dXJuICdTdGFuZGFyZCBsaWdodCBCJztcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gMTkpIHtcbiAgICAgICAgICAgIHJldHVybiAnU3RhbmRhcmQgbGlnaHQgQyc7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDIwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0Q1NSc7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDIxKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0Q2NSc7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDIyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0Q3NSc7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDIzKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0Q1MCc7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDI0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ0lTTyBzdHVkaW8gdHVuZ3N0ZW4nO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAyNTUpIHtcbiAgICAgICAgICAgIHJldHVybiAnT3RoZXIgbGlnaHQgc291cmNlJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ1Vua25vd24nO1xuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/tag-names-common.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/tag-names-exif-ifd.js":
/*!***********************************************************!*\
  !*** ./node_modules/exifreader/src/tag-names-exif-ifd.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tag-names-utils.js */ \"./node_modules/exifreader/src/tag-names-utils.js\");\n/* harmony import */ var _tag_names_common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tag-names-common.js */ \"./node_modules/exifreader/src/tag-names-common.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  0x829a: {\n    'name': 'ExposureTime',\n    'description': function description(value) {\n      if (value[0] !== 0) {\n        return \"1/\".concat(Math.round(value[1] / value[0]));\n      }\n\n      return \"0/\".concat(value[1]);\n    }\n  },\n  0x829d: {\n    'name': 'FNumber',\n    'description': function description(value) {\n      return \"f/\".concat(value[0] / value[1]);\n    }\n  },\n  0x8822: {\n    'name': 'ExposureProgram',\n    'description': function description(value) {\n      if (value === 0) {\n        return 'Undefined';\n      } else if (value === 1) {\n        return 'Manual';\n      } else if (value === 2) {\n        return 'Normal program';\n      } else if (value === 3) {\n        return 'Aperture priority';\n      } else if (value === 4) {\n        return 'Shutter priority';\n      } else if (value === 5) {\n        return 'Creative program';\n      } else if (value === 6) {\n        return 'Action program';\n      } else if (value === 7) {\n        return 'Portrait mode';\n      } else if (value === 8) {\n        return 'Landscape mode';\n      } else if (value === 9) {\n        return 'Bulb';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x8824: 'SpectralSensitivity',\n  0x8827: 'ISOSpeedRatings',\n  0x8828: {\n    'name': 'OECF',\n    'description': function description() {\n      return '[Raw OECF table data]';\n    }\n  },\n  0x882a: 'TimeZoneOffset',\n  0x882b: 'SelfTimerMode',\n  0x8830: {\n    name: 'SensitivityType',\n    description: function description(value) {\n      return {\n        1: 'Standard Output Sensitivity',\n        2: 'Recommended Exposure Index',\n        3: 'ISO Speed',\n        4: 'Standard Output Sensitivity and Recommended Exposure Index',\n        5: 'Standard Output Sensitivity and ISO Speed',\n        6: 'Recommended Exposure Index and ISO Speed',\n        7: 'Standard Output Sensitivity, Recommended Exposure Index and ISO Speed'\n      }[value] || 'Unknown';\n    }\n  },\n  0x8831: 'StandardOutputSensitivity',\n  0x8832: 'RecommendedExposureIndex',\n  0x8833: 'ISOSpeed',\n  0x8834: 'ISOSpeedLatitudeyyy',\n  0x8835: 'ISOSpeedLatitudezzz',\n  0x9000: {\n    'name': 'ExifVersion',\n    'description': function description(value) {\n      return Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value);\n    }\n  },\n  0x9003: 'DateTimeOriginal',\n  0x9004: 'DateTimeDigitized',\n  0x9009: 'GooglePlusUploadCode',\n  0x9010: 'OffsetTime',\n  0x9011: 'OffsetTimeOriginal',\n  0x9012: 'OffsetTimeDigitized',\n  0x9101: {\n    'name': 'ComponentsConfiguration',\n    'description': function description(value) {\n      return value.map(function (character) {\n        if (character === 0x31) {\n          return 'Y';\n        } else if (character === 0x32) {\n          return 'Cb';\n        } else if (character === 0x33) {\n          return 'Cr';\n        } else if (character === 0x34) {\n          return 'R';\n        } else if (character === 0x35) {\n          return 'G';\n        } else if (character === 0x36) {\n          return 'B';\n        }\n      }).join('');\n    }\n  },\n  0x9102: 'CompressedBitsPerPixel',\n  0x9201: {\n    'name': 'ShutterSpeedValue',\n    'description': function description(value) {\n      return \"1/\".concat(Math.round(Math.pow(2, value[0] / value[1])));\n    }\n  },\n  0x9202: {\n    'name': 'ApertureValue',\n    'description': function description(value) {\n      return Math.pow(Math.sqrt(2), value[0] / value[1]).toFixed(2);\n    }\n  },\n  0x9203: 'BrightnessValue',\n  0x9204: 'ExposureBiasValue',\n  0x9205: {\n    'name': 'MaxApertureValue',\n    'description': function description(value) {\n      return Math.pow(Math.sqrt(2), value[0] / value[1]).toFixed(2);\n    }\n  },\n  0x9206: {\n    'name': 'SubjectDistance',\n    'description': function description(value) {\n      return value[0] / value[1] + ' m';\n    }\n  },\n  0x9207: {\n    'name': 'MeteringMode',\n    'description': function description(value) {\n      if (value === 1) {\n        return 'Average';\n      } else if (value === 2) {\n        return 'CenterWeightedAverage';\n      } else if (value === 3) {\n        return 'Spot';\n      } else if (value === 4) {\n        return 'MultiSpot';\n      } else if (value === 5) {\n        return 'Pattern';\n      } else if (value === 6) {\n        return 'Partial';\n      } else if (value === 255) {\n        return 'Other';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x9208: {\n    'name': 'LightSource',\n    description: _tag_names_common_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]['LightSource']\n  },\n  0x9209: {\n    'name': 'Flash',\n    'description': function description(value) {\n      if (value === 0x00) {\n        return 'Flash did not fire';\n      } else if (value === 0x01) {\n        return 'Flash fired';\n      } else if (value === 0x05) {\n        return 'Strobe return light not detected';\n      } else if (value === 0x07) {\n        return 'Strobe return light detected';\n      } else if (value === 0x09) {\n        return 'Flash fired, compulsory flash mode';\n      } else if (value === 0x0d) {\n        return 'Flash fired, compulsory flash mode, return light not detected';\n      } else if (value === 0x0f) {\n        return 'Flash fired, compulsory flash mode, return light detected';\n      } else if (value === 0x10) {\n        return 'Flash did not fire, compulsory flash mode';\n      } else if (value === 0x18) {\n        return 'Flash did not fire, auto mode';\n      } else if (value === 0x19) {\n        return 'Flash fired, auto mode';\n      } else if (value === 0x1d) {\n        return 'Flash fired, auto mode, return light not detected';\n      } else if (value === 0x1f) {\n        return 'Flash fired, auto mode, return light detected';\n      } else if (value === 0x20) {\n        return 'No flash function';\n      } else if (value === 0x41) {\n        return 'Flash fired, red-eye reduction mode';\n      } else if (value === 0x45) {\n        return 'Flash fired, red-eye reduction mode, return light not detected';\n      } else if (value === 0x47) {\n        return 'Flash fired, red-eye reduction mode, return light detected';\n      } else if (value === 0x49) {\n        return 'Flash fired, compulsory flash mode, red-eye reduction mode';\n      } else if (value === 0x4d) {\n        return 'Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected';\n      } else if (value === 0x4f) {\n        return 'Flash fired, compulsory flash mode, red-eye reduction mode, return light detected';\n      } else if (value === 0x59) {\n        return 'Flash fired, auto mode, red-eye reduction mode';\n      } else if (value === 0x5d) {\n        return 'Flash fired, auto mode, return light not detected, red-eye reduction mode';\n      } else if (value === 0x5f) {\n        return 'Flash fired, auto mode, return light detected, red-eye reduction mode';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x920a: {\n    'name': 'FocalLength',\n    'description': function description(value) {\n      return value[0] / value[1] + ' mm';\n    }\n  },\n  0x9211: 'ImageNumber',\n  0x9212: {\n    name: 'SecurityClassification',\n    description: function description(value) {\n      return {\n        'C': 'Confidential',\n        'R': 'Restricted',\n        'S': 'Secret',\n        'T': 'Top Secret',\n        'U': 'Unclassified'\n      }[value] || 'Unknown';\n    }\n  },\n  0x9213: 'ImageHistory',\n  0x9214: {\n    'name': 'SubjectArea',\n    'description': function description(value) {\n      if (value.length === 2) {\n        return \"Location; X: \".concat(value[0], \", Y: \").concat(value[1]);\n      } else if (value.length === 3) {\n        return \"Circle; X: \".concat(value[0], \", Y: \").concat(value[1], \", diameter: \").concat(value[2]);\n      } else if (value.length === 4) {\n        return \"Rectangle; X: \".concat(value[0], \", Y: \").concat(value[1], \", width: \").concat(value[2], \", height: \").concat(value[3]);\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x927c: {\n    'name': 'MakerNote',\n    'description': function description() {\n      return '[Raw maker note data]';\n    }\n  },\n  0x9286: {\n    'name': 'UserComment',\n    'description': _tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getEncodedString\"]\n  },\n  0x9290: 'SubSecTime',\n  0x9291: 'SubSecTimeOriginal',\n  0x9292: 'SubSecTimeDigitized',\n  0x9400: {\n    'name': 'AmbientTemperature',\n    'description': function description(value) {\n      return value[0] / value[1] + ' °C';\n    }\n  },\n  0x9401: {\n    'name': 'Humidity',\n    'description': function description(value) {\n      return value[0] / value[1] + ' %';\n    }\n  },\n  0x9402: {\n    'name': 'Pressure',\n    'description': function description(value) {\n      return value[0] / value[1] + ' hPa';\n    }\n  },\n  0x9403: {\n    'name': 'WaterDepth',\n    'description': function description(value) {\n      return value[0] / value[1] + ' m';\n    }\n  },\n  0x9404: {\n    'name': 'Acceleration',\n    'description': function description(value) {\n      return value[0] / value[1] + ' mGal';\n    }\n  },\n  0x9405: {\n    'name': 'CameraElevationAngle',\n    'description': function description(value) {\n      return value[0] / value[1] + ' °';\n    }\n  },\n  0xa000: {\n    'name': 'FlashpixVersion',\n    'description': function description(value) {\n      return value.map(function (charCode) {\n        return String.fromCharCode(charCode);\n      }).join('');\n    }\n  },\n  0xa001: {\n    'name': 'ColorSpace',\n    'description': function description(value) {\n      if (value === 1) {\n        return 'sRGB';\n      } else if (value === 0xffff) {\n        return 'Uncalibrated';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0xa002: 'PixelXDimension',\n  0xa003: 'PixelYDimension',\n  0xa004: 'RelatedSoundFile',\n  0xa005: 'Interoperability IFD Pointer',\n  0xa20b: 'FlashEnergy',\n  0xa20c: {\n    'name': 'SpatialFrequencyResponse',\n    'description': function description() {\n      return '[Raw SFR table data]';\n    }\n  },\n  0xa20e: 'FocalPlaneXResolution',\n  0xa20f: 'FocalPlaneYResolution',\n  0xa210: {\n    'name': 'FocalPlaneResolutionUnit',\n    'description': function description(value) {\n      if (value === 2) {\n        return 'inches';\n      } else if (value === 3) {\n        return 'centimeters';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0xa214: {\n    'name': 'SubjectLocation',\n    'description': function description(_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          x = _ref2[0],\n          y = _ref2[1];\n\n      return \"X: \".concat(x, \", Y: \").concat(y);\n    }\n  },\n  0xa215: 'ExposureIndex',\n  0xa217: {\n    'name': 'SensingMethod',\n    'description': function description(value) {\n      if (value === 1) {\n        return 'Undefined';\n      } else if (value === 2) {\n        return 'One-chip color area sensor';\n      } else if (value === 3) {\n        return 'Two-chip color area sensor';\n      } else if (value === 4) {\n        return 'Three-chip color area sensor';\n      } else if (value === 5) {\n        return 'Color sequential area sensor';\n      } else if (value === 7) {\n        return 'Trilinear sensor';\n      } else if (value === 8) {\n        return 'Color sequential linear sensor';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0xa300: {\n    'name': 'FileSource',\n    'description': function description(value) {\n      if (value === 3) {\n        return 'DSC';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0xa301: {\n    'name': 'SceneType',\n    'description': function description(value) {\n      if (value === 1) {\n        return 'A directly photographed image';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0xa302: {\n    'name': 'CFAPattern',\n    'description': function description() {\n      return '[Raw CFA pattern table data]';\n    }\n  },\n  0xa401: {\n    'name': 'CustomRendered',\n    'description': function description(value) {\n      if (value === 0) {\n        return 'Normal process';\n      } else if (value === 1) {\n        return 'Custom process';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0xa402: {\n    'name': 'ExposureMode',\n    'description': function description(value) {\n      if (value === 0) {\n        return 'Auto exposure';\n      } else if (value === 1) {\n        return 'Manual exposure';\n      } else if (value === 2) {\n        return 'Auto bracket';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0xa403: {\n    'name': 'WhiteBalance',\n    'description': function description(value) {\n      if (value === 0) {\n        return 'Auto white balance';\n      } else if (value === 1) {\n        return 'Manual white balance';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0xa404: {\n    'name': 'DigitalZoomRatio',\n    'description': function description(value) {\n      if (value[0] === 0) {\n        return 'Digital zoom was not used';\n      }\n\n      return '' + value[0] / value[1];\n    }\n  },\n  0xa405: {\n    'name': 'FocalLengthIn35mmFilm',\n    'description': function description(value) {\n      if (value === 0) {\n        return 'Unknown';\n      }\n\n      return value;\n    }\n  },\n  0xa406: {\n    'name': 'SceneCaptureType',\n    'description': function description(value) {\n      if (value === 0) {\n        return 'Standard';\n      } else if (value === 1) {\n        return 'Landscape';\n      } else if (value === 2) {\n        return 'Portrait';\n      } else if (value === 3) {\n        return 'Night scene';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0xa407: {\n    'name': 'GainControl',\n    'description': function description(value) {\n      if (value === 0) {\n        return 'None';\n      } else if (value === 1) {\n        return 'Low gain up';\n      } else if (value === 2) {\n        return 'High gain up';\n      } else if (value === 3) {\n        return 'Low gain down';\n      } else if (value === 4) {\n        return 'High gain down';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0xa408: {\n    'name': 'Contrast',\n    'description': function description(value) {\n      if (value === 0) {\n        return 'Normal';\n      } else if (value === 1) {\n        return 'Soft';\n      } else if (value === 2) {\n        return 'Hard';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0xa409: {\n    'name': 'Saturation',\n    'description': function description(value) {\n      if (value === 0) {\n        return 'Normal';\n      } else if (value === 1) {\n        return 'Low saturation';\n      } else if (value === 2) {\n        return 'High saturation';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0xa40a: {\n    'name': 'Sharpness',\n    'description': function description(value) {\n      if (value === 0) {\n        return 'Normal';\n      } else if (value === 1) {\n        return 'Soft';\n      } else if (value === 2) {\n        return 'Hard';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0xa40b: {\n    'name': 'DeviceSettingDescription',\n    'description': function description() {\n      return '[Raw device settings table data]';\n    }\n  },\n  0xa40c: {\n    'name': 'SubjectDistanceRange',\n    'description': function description(value) {\n      if (value === 1) {\n        return 'Macro';\n      } else if (value === 2) {\n        return 'Close view';\n      } else if (value === 3) {\n        return 'Distant view';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0xa420: 'ImageUniqueID',\n  0xa430: 'CameraOwnerName',\n  0xa431: 'BodySerialNumber',\n  0xa432: {\n    'name': 'LensSpecification',\n    'description': function description(value) {\n      var focalLengths = \"\".concat(value[0][0] / value[0][1], \"-\").concat(value[1][0] / value[1][1], \" mm\");\n\n      if (value[3][1] === 0) {\n        return \"\".concat(focalLengths, \" f/?\");\n      }\n\n      return \"\".concat(focalLengths, \" f/\").concat(1 / (value[2][1] / value[2][1] / (value[3][0] / value[3][1])));\n    }\n  },\n  0xa433: 'LensMake',\n  0xa434: 'LensModel',\n  0xa435: 'LensSerialNumber',\n  0xa460: {\n    name: 'CompositeImage',\n    description: function description(value) {\n      return {\n        1: 'Not a Composite Image',\n        2: 'General Composite Image',\n        3: 'Composite Image Captured While Shooting'\n      }[value] || 'Unknown';\n    }\n  },\n  0xa461: 'SourceImageNumberOfCompositeImage',\n  0xa462: 'SourceExposureTimesOfCompositeImage',\n  0xa500: 'Gamma',\n  0xea1c: 'Padding',\n  0xea1d: 'OffsetSchema',\n  0xfde8: 'OwnerName',\n  0xfde9: 'SerialNumber',\n  0xfdea: 'Lens',\n  0xfe4c: 'RawFile',\n  0xfe4d: 'Converter',\n  0xfe4e: 'WhiteBalance',\n  0xfe51: 'Exposure',\n  0xfe52: 'Shadows',\n  0xfe53: 'Brightness',\n  0xfe54: 'Contrast',\n  0xfe55: 'Saturation',\n  0xfe56: 'Sharpness',\n  0xfe57: 'Smoothness',\n  0xfe58: 'MoireFilter'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/tag-names-exif-ifd.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/tag-names-gps-ifd.js":
/*!**********************************************************!*\
  !*** ./node_modules/exifreader/src/tag-names-gps-ifd.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tag-names-utils.js */ \"./node_modules/exifreader/src/tag-names-utils.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  0x0000: {\n    'name': 'GPSVersionID',\n    'description': function description(value) {\n      if (value[0] === 2 && value[1] === 2 && value[2] === 0 && value[3] === 0) {\n        return 'Version 2.2';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x0001: {\n    'name': 'GPSLatitudeRef',\n    'description': function description(value) {\n      var ref = value.join('');\n\n      if (ref === 'N') {\n        return 'North latitude';\n      } else if (ref === 'S') {\n        return 'South latitude';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x0002: {\n    'name': 'GPSLatitude',\n    'description': _tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getCalculatedGpsValue\"]\n  },\n  0x0003: {\n    'name': 'GPSLongitudeRef',\n    'description': function description(value) {\n      var ref = value.join('');\n\n      if (ref === 'E') {\n        return 'East longitude';\n      } else if (ref === 'W') {\n        return 'West longitude';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x0004: {\n    'name': 'GPSLongitude',\n    'description': _tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getCalculatedGpsValue\"]\n  },\n  0x0005: {\n    'name': 'GPSAltitudeRef',\n    'description': function description(value) {\n      if (value === 0) {\n        return 'Sea level';\n      } else if (value === 1) {\n        return 'Sea level reference (negative value)';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x0006: {\n    'name': 'GPSAltitude',\n    'description': function description(value) {\n      return value[0] / value[1] + ' m';\n    }\n  },\n  0x0007: {\n    'name': 'GPSTimeStamp',\n    'description': function description(values) {\n      return values.map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            numerator = _ref2[0],\n            denominator = _ref2[1];\n\n        var num = numerator / denominator;\n\n        if (/^\\d(\\.|$)/.test(\"\".concat(num))) {\n          return \"0\".concat(num);\n        }\n\n        return num;\n      }).join(':');\n    }\n  },\n  0x0008: 'GPSSatellites',\n  0x0009: {\n    'name': 'GPSStatus',\n    'description': function description(value) {\n      var status = value.join('');\n\n      if (status === 'A') {\n        return 'Measurement in progress';\n      } else if (status === 'V') {\n        return 'Measurement Interoperability';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x000a: {\n    'name': 'GPSMeasureMode',\n    'description': function description(value) {\n      var mode = value.join('');\n\n      if (mode === '2') {\n        return '2-dimensional measurement';\n      } else if (mode === '3') {\n        return '3-dimensional measurement';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x000b: 'GPSDOP',\n  0x000c: {\n    'name': 'GPSSpeedRef',\n    'description': function description(value) {\n      var ref = value.join('');\n\n      if (ref === 'K') {\n        return 'Kilometers per hour';\n      } else if (ref === 'M') {\n        return 'Miles per hour';\n      } else if (ref === 'N') {\n        return 'Knots';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x000d: 'GPSSpeed',\n  0x000e: {\n    'name': 'GPSTrackRef',\n    'description': function description(value) {\n      var ref = value.join('');\n\n      if (ref === 'T') {\n        return 'True direction';\n      } else if (ref === 'M') {\n        return 'Magnetic direction';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x000f: 'GPSTrack',\n  0x0010: {\n    'name': 'GPSImgDirectionRef',\n    'description': function description(value) {\n      var ref = value.join('');\n\n      if (ref === 'T') {\n        return 'True direction';\n      } else if (ref === 'M') {\n        return 'Magnetic direction';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x0011: 'GPSImgDirection',\n  0x0012: 'GPSMapDatum',\n  0x0013: {\n    'name': 'GPSDestLatitudeRef',\n    'description': function description(value) {\n      var ref = value.join('');\n\n      if (ref === 'N') {\n        return 'North latitude';\n      } else if (ref === 'S') {\n        return 'South latitude';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x0014: {\n    'name': 'GPSDestLatitude',\n    'description': function description(value) {\n      return value[0][0] / value[0][1] + value[1][0] / value[1][1] / 60 + value[2][0] / value[2][1] / 3600;\n    }\n  },\n  0x0015: {\n    'name': 'GPSDestLongitudeRef',\n    'description': function description(value) {\n      var ref = value.join('');\n\n      if (ref === 'E') {\n        return 'East longitude';\n      } else if (ref === 'W') {\n        return 'West longitude';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x0016: {\n    'name': 'GPSDestLongitude',\n    'description': function description(value) {\n      return value[0][0] / value[0][1] + value[1][0] / value[1][1] / 60 + value[2][0] / value[2][1] / 3600;\n    }\n  },\n  0x0017: {\n    'name': 'GPSDestBearingRef',\n    'description': function description(value) {\n      var ref = value.join('');\n\n      if (ref === 'T') {\n        return 'True direction';\n      } else if (ref === 'M') {\n        return 'Magnetic direction';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x0018: 'GPSDestBearing',\n  0x0019: {\n    'name': 'GPSDestDistanceRef',\n    'description': function description(value) {\n      var ref = value.join('');\n\n      if (ref === 'K') {\n        return 'Kilometers';\n      } else if (ref === 'M') {\n        return 'Miles';\n      } else if (ref === 'N') {\n        return 'Knots';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x001a: 'GPSDestDistance',\n  0x001b: {\n    'name': 'GPSProcessingMethod',\n    'description': _tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getEncodedString\"]\n  },\n  0x001c: {\n    'name': 'GPSAreaInformation',\n    'description': _tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getEncodedString\"]\n  },\n  0x001d: 'GPSDateStamp',\n  0x001e: {\n    'name': 'GPSDifferential',\n    'description': function description(value) {\n      if (value === 0) {\n        return 'Measurement without differential correction';\n      } else if (value === 1) {\n        return 'Differential correction applied';\n      }\n\n      return 'Unknown';\n    }\n  },\n  0x001f: 'GPSHPositioningError'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/tag-names-gps-ifd.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/tag-names-interoperability-ifd.js":
/*!***********************************************************************!*\
  !*** ./node_modules/exifreader/src/tag-names-interoperability-ifd.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tag-names-utils.js */ \"./node_modules/exifreader/src/tag-names-utils.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  0x0001: 'InteroperabilityIndex',\n  0x0002: {\n    name: 'InteroperabilityVersion',\n    description: function description(value) {\n      return Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value);\n    }\n  },\n  0x1000: 'RelatedImageFileFormat',\n  0x1001: 'RelatedImageWidth',\n  0x1002: 'RelatedImageHeight'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL3RhZy1uYW1lcy1pbnRlcm9wZXJhYmlsaXR5LWlmZC5qcz81ZWIyIl0sIm5hbWVzIjpbIm5hbWUiLCJkZXNjcmlwdGlvbiIsInZhbHVlIiwiZ2V0U3RyaW5nVmFsdWUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7O0FBSUE7QUFFZTtBQUNYLFVBQVEsdUJBREc7QUFFWCxVQUFRO0FBQ0pBLFFBQUksRUFBRSx5QkFERjtBQUVKQyxlQUFXLEVBQUUscUJBQUNDLEtBQUQ7QUFBQSxhQUFXQywwRUFBYyxDQUFDRCxLQUFELENBQXpCO0FBQUE7QUFGVCxHQUZHO0FBTVgsVUFBUSx3QkFORztBQU9YLFVBQVEsbUJBUEc7QUFRWCxVQUFRO0FBUkcsQ0FBZiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9leGlmcmVhZGVyL3NyYy90YWctbmFtZXMtaW50ZXJvcGVyYWJpbGl0eS1pZmQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHtnZXRTdHJpbmdWYWx1ZX0gZnJvbSAnLi90YWctbmFtZXMtdXRpbHMuanMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgMHgwMDAxOiAnSW50ZXJvcGVyYWJpbGl0eUluZGV4JyxcbiAgICAweDAwMDI6IHtcbiAgICAgICAgbmFtZTogJ0ludGVyb3BlcmFiaWxpdHlWZXJzaW9uJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICh2YWx1ZSkgPT4gZ2V0U3RyaW5nVmFsdWUodmFsdWUpXG4gICAgfSxcbiAgICAweDEwMDA6ICdSZWxhdGVkSW1hZ2VGaWxlRm9ybWF0JyxcbiAgICAweDEwMDE6ICdSZWxhdGVkSW1hZ2VXaWR0aCcsXG4gICAgMHgxMDAyOiAnUmVsYXRlZEltYWdlSGVpZ2h0J1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/tag-names-interoperability-ifd.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/tag-names-mpf-ifd.js":
/*!**********************************************************!*\
  !*** ./node_modules/exifreader/src/tag-names-mpf-ifd.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tag-names-utils.js */ \"./node_modules/exifreader/src/tag-names-utils.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  0xb000: {\n    'name': 'MPFVersion',\n    'description': function description(value) {\n      return Object(_tag_names_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringValue\"])(value);\n    }\n  },\n  0xb001: 'NumberOfImages',\n  0xb002: 'MPEntry',\n  0xb003: 'ImageUIDList',\n  0xb004: 'TotalFrames'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL3RhZy1uYW1lcy1tcGYtaWZkLmpzPzI4OWQiXSwibmFtZXMiOlsidmFsdWUiLCJnZXRTdHJpbmdWYWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBOzs7QUFJQTtBQUVlO0FBQ1gsVUFBUTtBQUNKLFlBQVEsWUFESjtBQUVKLG1CQUFlLHFCQUFDQSxLQUFEO0FBQUEsYUFBV0MsMEVBQWMsQ0FBQ0QsS0FBRCxDQUF6QjtBQUFBO0FBRlgsR0FERztBQUtYLFVBQVEsZ0JBTEc7QUFNWCxVQUFRLFNBTkc7QUFPWCxVQUFRLGNBUEc7QUFRWCxVQUFRO0FBUkcsQ0FBZiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9leGlmcmVhZGVyL3NyYy90YWctbmFtZXMtbXBmLWlmZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwczovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQge2dldFN0cmluZ1ZhbHVlfSBmcm9tICcuL3RhZy1uYW1lcy11dGlscy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICAweGIwMDA6IHtcbiAgICAgICAgJ25hbWUnOiAnTVBGVmVyc2lvbicsXG4gICAgICAgICdkZXNjcmlwdGlvbic6ICh2YWx1ZSkgPT4gZ2V0U3RyaW5nVmFsdWUodmFsdWUpXG4gICAgfSxcbiAgICAweGIwMDE6ICdOdW1iZXJPZkltYWdlcycsXG4gICAgMHhiMDAyOiAnTVBFbnRyeScsXG4gICAgMHhiMDAzOiAnSW1hZ2VVSURMaXN0JyxcbiAgICAweGIwMDQ6ICdUb3RhbEZyYW1lcydcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/tag-names-mpf-ifd.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/tag-names-utils.js":
/*!********************************************************!*\
  !*** ./node_modules/exifreader/src/tag-names-utils.js ***!
  \********************************************************/
/*! exports provided: getStringValue, getEncodedString, getCalculatedGpsValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getStringValue\", function() { return getStringValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getEncodedString\", function() { return getEncodedString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCalculatedGpsValue\", function() { return getCalculatedGpsValue; });\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\nfunction getStringValue(value) {\n  return value.map(function (charCode) {\n    return String.fromCharCode(charCode);\n  }).join('');\n}\nfunction getEncodedString(value) {\n  if (value.length >= 8) {\n    var encoding = getStringValue(value.slice(0, 8));\n\n    if (encoding === 'ASCII\\x00\\x00\\x00') {\n      return getStringValue(value.slice(8));\n    } else if (encoding === 'JIS\\x00\\x00\\x00\\x00\\x00') {\n      return '[JIS encoded text]';\n    } else if (encoding === 'UNICODE\\x00') {\n      return '[Unicode encoded text]';\n    } else if (encoding === '\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00') {\n      return '[Undefined encoding]';\n    }\n  }\n\n  return 'Undefined';\n}\nfunction getCalculatedGpsValue(value) {\n  return value[0][0] / value[0][1] + value[1][0] / value[1][1] / 60 + value[2][0] / value[2][1] / 3600;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL3RhZy1uYW1lcy11dGlscy5qcz83NzI0Il0sIm5hbWVzIjpbImdldFN0cmluZ1ZhbHVlIiwidmFsdWUiLCJtYXAiLCJjaGFyQ29kZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImpvaW4iLCJnZXRFbmNvZGVkU3RyaW5nIiwibGVuZ3RoIiwiZW5jb2RpbmciLCJzbGljZSIsImdldENhbGN1bGF0ZWRHcHNWYWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FBSU8sU0FBU0EsY0FBVCxDQUF3QkMsS0FBeEIsRUFBK0I7QUFDbEMsU0FBT0EsS0FBSyxDQUFDQyxHQUFOLENBQVUsVUFBQ0MsUUFBRDtBQUFBLFdBQWNDLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQkYsUUFBcEIsQ0FBZDtBQUFBLEdBQVYsRUFBdURHLElBQXZELENBQTRELEVBQTVELENBQVA7QUFDSDtBQUVNLFNBQVNDLGdCQUFULENBQTBCTixLQUExQixFQUFpQztBQUNwQyxNQUFJQSxLQUFLLENBQUNPLE1BQU4sSUFBZ0IsQ0FBcEIsRUFBdUI7QUFDbkIsUUFBTUMsUUFBUSxHQUFHVCxjQUFjLENBQUNDLEtBQUssQ0FBQ1MsS0FBTixDQUFZLENBQVosRUFBZSxDQUFmLENBQUQsQ0FBL0I7O0FBRUEsUUFBSUQsUUFBUSxLQUFLLG1CQUFqQixFQUFzQztBQUNsQyxhQUFPVCxjQUFjLENBQUNDLEtBQUssQ0FBQ1MsS0FBTixDQUFZLENBQVosQ0FBRCxDQUFyQjtBQUNILEtBRkQsTUFFTyxJQUFJRCxRQUFRLEtBQUsseUJBQWpCLEVBQTRDO0FBQy9DLGFBQU8sb0JBQVA7QUFDSCxLQUZNLE1BRUEsSUFBSUEsUUFBUSxLQUFLLGFBQWpCLEVBQWdDO0FBQ25DLGFBQU8sd0JBQVA7QUFDSCxLQUZNLE1BRUEsSUFBSUEsUUFBUSxLQUFLLGtDQUFqQixFQUFxRDtBQUN4RCxhQUFPLHNCQUFQO0FBQ0g7QUFDSjs7QUFFRCxTQUFPLFdBQVA7QUFDSDtBQUVNLFNBQVNFLHFCQUFULENBQStCVixLQUEvQixFQUFzQztBQUN6QyxTQUFRQSxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVMsQ0FBVCxJQUFjQSxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVMsQ0FBVCxDQUFmLEdBQStCQSxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVMsQ0FBVCxJQUFjQSxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVMsQ0FBVCxDQUFmLEdBQThCLEVBQTVELEdBQWtFQSxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVMsQ0FBVCxJQUFjQSxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVMsQ0FBVCxDQUFmLEdBQThCLElBQXRHO0FBQ0giLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXhpZnJlYWRlci9zcmMvdGFnLW5hbWVzLXV0aWxzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICogZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHBzOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHJpbmdWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoKGNoYXJDb2RlKSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKSkuam9pbignJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbmNvZGVkU3RyaW5nKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA+PSA4KSB7XG4gICAgICAgIGNvbnN0IGVuY29kaW5nID0gZ2V0U3RyaW5nVmFsdWUodmFsdWUuc2xpY2UoMCwgOCkpO1xuXG4gICAgICAgIGlmIChlbmNvZGluZyA9PT0gJ0FTQ0lJXFx4MDBcXHgwMFxceDAwJykge1xuICAgICAgICAgICAgcmV0dXJuIGdldFN0cmluZ1ZhbHVlKHZhbHVlLnNsaWNlKDgpKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbmNvZGluZyA9PT0gJ0pJU1xceDAwXFx4MDBcXHgwMFxceDAwXFx4MDAnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tKSVMgZW5jb2RlZCB0ZXh0XSc7XG4gICAgICAgIH0gZWxzZSBpZiAoZW5jb2RpbmcgPT09ICdVTklDT0RFXFx4MDAnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tVbmljb2RlIGVuY29kZWQgdGV4dF0nO1xuICAgICAgICB9IGVsc2UgaWYgKGVuY29kaW5nID09PSAnXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMCcpIHtcbiAgICAgICAgICAgIHJldHVybiAnW1VuZGVmaW5lZCBlbmNvZGluZ10nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICdVbmRlZmluZWQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FsY3VsYXRlZEdwc1ZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZVswXVswXSAvIHZhbHVlWzBdWzFdKSArICh2YWx1ZVsxXVswXSAvIHZhbHVlWzFdWzFdKSAvIDYwICsgKHZhbHVlWzJdWzBdIC8gdmFsdWVbMl1bMV0pIC8gMzYwMDtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/tag-names-utils.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/tag-names.js":
/*!**************************************************!*\
  !*** ./node_modules/exifreader/src/tag-names.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/exifreader/src/utils.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/exifreader/src/constants.js\");\n/* harmony import */ var _tag_names_0th_ifd_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tag-names-0th-ifd.js */ \"./node_modules/exifreader/src/tag-names-0th-ifd.js\");\n/* harmony import */ var _tag_names_exif_ifd_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tag-names-exif-ifd.js */ \"./node_modules/exifreader/src/tag-names-exif-ifd.js\");\n/* harmony import */ var _tag_names_gps_ifd_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tag-names-gps-ifd.js */ \"./node_modules/exifreader/src/tag-names-gps-ifd.js\");\n/* harmony import */ var _tag_names_interoperability_ifd_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tag-names-interoperability-ifd.js */ \"./node_modules/exifreader/src/tag-names-interoperability-ifd.js\");\n/* harmony import */ var _tag_names_mpf_ifd_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tag-names-mpf-ifd.js */ \"./node_modules/exifreader/src/tag-names-mpf-ifd.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n\n\n\n\n\n\nvar tagNames0thExifIfds = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])({}, _tag_names_0th_ifd_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"], _tag_names_exif_ifd_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  '0th': tagNames0thExifIfds,\n  'exif': tagNames0thExifIfds,\n  'gps': _tag_names_gps_ifd_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n  'interoperability': _tag_names_interoperability_ifd_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n  'mpf': _constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].USE_MPF ? _tag_names_mpf_ifd_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"] : {}\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL3RhZy1uYW1lcy5qcz85NjMxIl0sIm5hbWVzIjpbInRhZ05hbWVzMHRoRXhpZklmZHMiLCJvYmplY3RBc3NpZ24iLCJUYWdOYW1lczB0aElmZCIsIlRhZ05hbWVzRXhpZklmZCIsIlRhZ05hbWVzR3BzSWZkIiwiVGFnTmFtZXNJbnRlcm9wZXJhYmlsaXR5SWZkIiwiQ29uc3RhbnRzIiwiVVNFX01QRiIsIlRhZ05hbWVzTXBmSWZkIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBTUEsbUJBQW1CLEdBQUdDLDhEQUFZLENBQUMsRUFBRCxFQUFLQyw2REFBTCxFQUFxQkMsOERBQXJCLENBQXhDO0FBRWU7QUFDWCxTQUFPSCxtQkFESTtBQUVYLFVBQVFBLG1CQUZHO0FBR1gsU0FBT0ksNkRBSEk7QUFJWCxzQkFBb0JDLDBFQUpUO0FBS1gsU0FBT0MscURBQVMsQ0FBQ0MsT0FBVixHQUFvQkMsNkRBQXBCLEdBQXFDO0FBTGpDLENBQWYiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXhpZnJlYWRlci9zcmMvdGFnLW5hbWVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICogZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHBzOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7b2JqZWN0QXNzaWdufSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCBDb25zdGFudHMgZnJvbSAnLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IFRhZ05hbWVzMHRoSWZkIGZyb20gJy4vdGFnLW5hbWVzLTB0aC1pZmQuanMnO1xuaW1wb3J0IFRhZ05hbWVzRXhpZklmZCBmcm9tICcuL3RhZy1uYW1lcy1leGlmLWlmZC5qcyc7XG5pbXBvcnQgVGFnTmFtZXNHcHNJZmQgZnJvbSAnLi90YWctbmFtZXMtZ3BzLWlmZC5qcyc7XG5pbXBvcnQgVGFnTmFtZXNJbnRlcm9wZXJhYmlsaXR5SWZkIGZyb20gJy4vdGFnLW5hbWVzLWludGVyb3BlcmFiaWxpdHktaWZkLmpzJztcbmltcG9ydCBUYWdOYW1lc01wZklmZCBmcm9tICcuL3RhZy1uYW1lcy1tcGYtaWZkLmpzJztcblxuY29uc3QgdGFnTmFtZXMwdGhFeGlmSWZkcyA9IG9iamVjdEFzc2lnbih7fSwgVGFnTmFtZXMwdGhJZmQsIFRhZ05hbWVzRXhpZklmZCk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICAnMHRoJzogdGFnTmFtZXMwdGhFeGlmSWZkcyxcbiAgICAnZXhpZic6IHRhZ05hbWVzMHRoRXhpZklmZHMsXG4gICAgJ2dwcyc6IFRhZ05hbWVzR3BzSWZkLFxuICAgICdpbnRlcm9wZXJhYmlsaXR5JzogVGFnTmFtZXNJbnRlcm9wZXJhYmlsaXR5SWZkLFxuICAgICdtcGYnOiBDb25zdGFudHMuVVNFX01QRiA/IFRhZ05hbWVzTXBmSWZkIDoge30sXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/tag-names.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/tags.js":
/*!*********************************************!*\
  !*** ./node_modules/exifreader/src/tags.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/exifreader/src/constants.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/exifreader/src/utils.js\");\n/* harmony import */ var _byte_order_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./byte-order.js */ \"./node_modules/exifreader/src/byte-order.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"./node_modules/exifreader/src/types.js\");\n/* harmony import */ var _tag_names_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tag-names.js */ \"./node_modules/exifreader/src/tag-names.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n\n\n\n\n\nvar EXIF_IFD_POINTER_KEY = 'Exif IFD Pointer';\nvar GPS_INFO_IFD_POINTER_KEY = 'GPS Info IFD Pointer';\nvar INTEROPERABILITY_IFD_POINTER_KEY = 'Interoperability IFD Pointer';\nvar getTagValueAt = {\n  1: _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getByteAt,\n  2: _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getAsciiAt,\n  3: _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getShortAt,\n  4: _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getLongAt,\n  5: _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getRationalAt,\n  7: _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getUndefinedAt,\n  9: _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getSlongAt,\n  10: _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getSrationalAt,\n  13: _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getIfdPointerAt\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  read: read,\n  readMpf: readMpf\n});\n\nfunction read(dataView, tiffHeaderOffset) {\n  var byteOrder = _byte_order_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getByteOrder(dataView, tiffHeaderOffset);\n  var tags = read0thIfd(dataView, tiffHeaderOffset, byteOrder);\n  tags = readExifIfd(tags, dataView, tiffHeaderOffset, byteOrder);\n  tags = readGpsIfd(tags, dataView, tiffHeaderOffset, byteOrder);\n  tags = readInteroperabilityIfd(tags, dataView, tiffHeaderOffset, byteOrder);\n  return tags;\n}\n\nfunction read0thIfd(dataView, tiffHeaderOffset, byteOrder) {\n  return readIfd(dataView, '0th', tiffHeaderOffset, get0thIfdOffset(dataView, tiffHeaderOffset, byteOrder), byteOrder);\n}\n\nfunction get0thIfdOffset(dataView, tiffHeaderOffset, byteOrder) {\n  return tiffHeaderOffset + _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getLongAt(dataView, tiffHeaderOffset + 4, byteOrder);\n}\n\nfunction readExifIfd(tags, dataView, tiffHeaderOffset, byteOrder) {\n  if (tags[EXIF_IFD_POINTER_KEY] !== undefined) {\n    return Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"objectAssign\"])(tags, readIfd(dataView, 'exif', tiffHeaderOffset, tiffHeaderOffset + tags[EXIF_IFD_POINTER_KEY].value, byteOrder));\n  }\n\n  return tags;\n}\n\nfunction readGpsIfd(tags, dataView, tiffHeaderOffset, byteOrder) {\n  if (tags[GPS_INFO_IFD_POINTER_KEY] !== undefined) {\n    return Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"objectAssign\"])(tags, readIfd(dataView, 'gps', tiffHeaderOffset, tiffHeaderOffset + tags[GPS_INFO_IFD_POINTER_KEY].value, byteOrder));\n  }\n\n  return tags;\n}\n\nfunction readInteroperabilityIfd(tags, dataView, tiffHeaderOffset, byteOrder) {\n  if (tags[INTEROPERABILITY_IFD_POINTER_KEY] !== undefined) {\n    return Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"objectAssign\"])(tags, readIfd(dataView, 'interoperability', tiffHeaderOffset, tiffHeaderOffset + tags[INTEROPERABILITY_IFD_POINTER_KEY].value, byteOrder));\n  }\n\n  return tags;\n}\n\nfunction readMpf(dataView, dataOffset) {\n  var byteOrder = _byte_order_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getByteOrder(dataView, dataOffset);\n  var tags = readIfd(dataView, 'mpf', dataOffset, get0thIfdOffset(dataView, dataOffset, byteOrder), byteOrder);\n  return addMpfImages(dataView, dataOffset, tags, byteOrder);\n}\n\nfunction addMpfImages(dataView, dataOffset, tags, byteOrder) {\n  var ENTRY_SIZE = 16;\n\n  if (!tags['MPEntry']) {\n    return tags;\n  }\n\n  var images = [];\n\n  for (var i = 0; i < Math.ceil(tags['MPEntry'].value.length / ENTRY_SIZE); i++) {\n    images[i] = {};\n    var attributes = getImageNumberValue(tags['MPEntry'].value, i * ENTRY_SIZE, _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTypeSize('LONG'), byteOrder);\n    images[i]['ImageFlags'] = getImageFlags(attributes);\n    images[i]['ImageFormat'] = getImageFormat(attributes);\n    images[i]['ImageType'] = getImageType(attributes);\n    var imageSize = getImageNumberValue(tags['MPEntry'].value, i * ENTRY_SIZE + 4, _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTypeSize('LONG'), byteOrder);\n    images[i]['ImageSize'] = {\n      value: imageSize,\n      description: '' + imageSize\n    };\n    var imageOffset = isFirstIndividualImage(i) ? 0 : getImageNumberValue(tags['MPEntry'].value, i * ENTRY_SIZE + 8, _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTypeSize('LONG'), byteOrder) + dataOffset;\n    images[i]['ImageOffset'] = {\n      value: imageOffset,\n      description: '' + imageOffset\n    };\n    var dependentImage1EntryNumber = getImageNumberValue(tags['MPEntry'].value, i * ENTRY_SIZE + 12, _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTypeSize('SHORT'), byteOrder);\n    images[i]['DependentImage1EntryNumber'] = {\n      value: dependentImage1EntryNumber,\n      description: '' + dependentImage1EntryNumber\n    };\n    var dependentImage2EntryNumber = getImageNumberValue(tags['MPEntry'].value, i * ENTRY_SIZE + 14, _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTypeSize('SHORT'), byteOrder);\n    images[i]['DependentImage2EntryNumber'] = {\n      value: dependentImage2EntryNumber,\n      description: '' + dependentImage2EntryNumber\n    };\n    images[i].image = dataView.buffer.slice(imageOffset, imageOffset + imageSize);\n    Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"deferInit\"])(images[i], 'base64', function () {\n      return Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"getBase64Image\"])(this.image);\n    });\n  }\n\n  tags['Images'] = images;\n  return tags;\n}\n\nfunction getImageNumberValue(entries, offset, size, byteOrder) {\n  if (byteOrder === _byte_order_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].LITTLE_ENDIAN) {\n    var _value = 0;\n\n    for (var i = 0; i < size; i++) {\n      _value += entries[offset + i] << 8 * i;\n    }\n\n    return _value;\n  }\n\n  var value = 0;\n\n  for (var _i = 0; _i < size; _i++) {\n    value += entries[offset + _i] << 8 * (size - 1 - _i);\n  }\n\n  return value;\n}\n\nfunction getImageFlags(attributes) {\n  var flags = [attributes >> 31 & 0x1, attributes >> 30 & 0x1, attributes >> 29 & 0x1];\n  var flagsDescription = [];\n\n  if (flags[0]) {\n    flagsDescription.push('Dependent Parent Image');\n  }\n\n  if (flags[1]) {\n    flagsDescription.push('Dependent Child Image');\n  }\n\n  if (flags[2]) {\n    flagsDescription.push('Representative Image');\n  }\n\n  return {\n    value: flags,\n    description: flagsDescription.join(', ') || 'None'\n  };\n}\n\nfunction getImageFormat(attributes) {\n  var imageFormat = attributes >> 24 & 0x7;\n  return {\n    value: imageFormat,\n    description: imageFormat === 0 ? 'JPEG' : 'Unknown'\n  };\n}\n\nfunction getImageType(attributes) {\n  var type = attributes & 0xffffff;\n  var descriptions = {\n    0x30000: 'Baseline MP Primary Image',\n    0x10001: 'Large Thumbnail (VGA equivalent)',\n    0x10002: 'Large Thumbnail (Full HD equivalent)',\n    0x20001: 'Multi-Frame Image (Panorama)',\n    0x20002: 'Multi-Frame Image (Disparity)',\n    0x20003: 'Multi-Frame Image (Multi-Angle)',\n    0x0: 'Undefined'\n  };\n  return {\n    value: type,\n    description: descriptions[type] || 'Unknown'\n  };\n}\n\nfunction isFirstIndividualImage(i) {\n  return i === 0;\n}\n\nfunction readIfd(dataView, ifdType, tiffHeaderOffset, offset, byteOrder) {\n  var FIELD_COUNT_SIZE = _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTypeSize('SHORT');\n  var FIELD_SIZE = 12;\n  var tags = {};\n  var numberOfFields = getNumberOfFields(dataView, offset, byteOrder);\n  offset += FIELD_COUNT_SIZE;\n\n  for (var fieldIndex = 0; fieldIndex < numberOfFields; fieldIndex++) {\n    if (offset + FIELD_SIZE > dataView.byteLength) {\n      break;\n    }\n\n    var tag = readTag(dataView, ifdType, tiffHeaderOffset, offset, byteOrder);\n\n    if (tag !== undefined) {\n      tags[tag.name] = {\n        'id': tag.id,\n        'value': tag.value,\n        'description': tag.description\n      };\n    }\n\n    offset += FIELD_SIZE;\n  }\n\n  if (_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].USE_THUMBNAIL && offset < dataView.byteLength - _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTypeSize('LONG')) {\n    var nextIfdOffset = _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getLongAt(dataView, offset, byteOrder);\n\n    if (nextIfdOffset !== 0) {\n      tags['Thumbnail'] = readIfd(dataView, ifdType, tiffHeaderOffset, tiffHeaderOffset + nextIfdOffset, byteOrder);\n    }\n  }\n\n  return tags;\n}\n\nfunction getNumberOfFields(dataView, offset, byteOrder) {\n  if (offset + _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTypeSize('SHORT') <= dataView.byteLength) {\n    return _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getShortAt(dataView, offset, byteOrder);\n  }\n\n  return 0;\n}\n\nfunction readTag(dataView, ifdType, tiffHeaderOffset, offset, byteOrder) {\n  var TAG_CODE_IPTC_NAA = 0x83bb;\n  var TAG_TYPE_OFFSET = _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTypeSize('SHORT');\n  var TAG_COUNT_OFFSET = TAG_TYPE_OFFSET + _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTypeSize('SHORT');\n  var TAG_VALUE_OFFSET = TAG_COUNT_OFFSET + _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTypeSize('LONG');\n  var tagCode = _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getShortAt(dataView, offset, byteOrder);\n  var tagType = _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getShortAt(dataView, offset + TAG_TYPE_OFFSET, byteOrder);\n  var tagCount = _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getLongAt(dataView, offset + TAG_COUNT_OFFSET, byteOrder);\n  var tagValue;\n\n  if (_types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].typeSizes[tagType] === undefined) {\n    return undefined;\n  }\n\n  if (tagValueFitsInOffsetSlot(tagType, tagCount)) {\n    tagValue = getTagValue(dataView, offset + TAG_VALUE_OFFSET, tagType, tagCount, byteOrder);\n  } else {\n    var tagValueOffset = _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getLongAt(dataView, offset + TAG_VALUE_OFFSET, byteOrder);\n\n    if (tagValueFitsInDataView(dataView, tiffHeaderOffset, tagValueOffset, tagType, tagCount)) {\n      var forceByteType = tagCode === TAG_CODE_IPTC_NAA;\n      tagValue = getTagValue(dataView, tiffHeaderOffset + tagValueOffset, tagType, tagCount, byteOrder, forceByteType);\n    } else {\n      tagValue = '<faulty value>';\n    }\n  }\n\n  if (tagType === _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].tagTypes['ASCII']) {\n    tagValue = splitNullSeparatedAsciiString(tagValue);\n    tagValue = decodeAsciiValue(tagValue);\n  }\n\n  var tagName = \"undefined-\".concat(tagCode);\n  var tagDescription = tagValue;\n\n  if (_tag_names_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"][ifdType][tagCode] !== undefined) {\n    if (_tag_names_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"][ifdType][tagCode]['name'] !== undefined && _tag_names_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"][ifdType][tagCode]['description'] !== undefined) {\n      tagName = _tag_names_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"][ifdType][tagCode]['name'];\n\n      try {\n        tagDescription = _tag_names_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"][ifdType][tagCode]['description'](tagValue);\n      } catch (error) {\n        tagDescription = getDescriptionFromTagValue(tagValue);\n      }\n    } else if (tagType === _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].tagTypes['RATIONAL'] || tagType === _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].tagTypes['SRATIONAL']) {\n      tagName = _tag_names_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"][ifdType][tagCode];\n      tagDescription = '' + tagValue[0] / tagValue[1];\n    } else {\n      tagName = _tag_names_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"][ifdType][tagCode];\n      tagDescription = getDescriptionFromTagValue(tagValue);\n    }\n  }\n\n  return {\n    id: tagCode,\n    name: tagName,\n    value: tagValue,\n    description: tagDescription\n  };\n}\n\nfunction tagValueFitsInOffsetSlot(tagType, tagCount) {\n  return _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].typeSizes[tagType] * tagCount <= _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getTypeSize('LONG');\n}\n\nfunction getTagValue(dataView, offset, type, count, byteOrder) {\n  var forceByteType = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  var value = [];\n\n  if (forceByteType) {\n    count = count * _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].typeSizes[type];\n    type = _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].tagTypes['BYTE'];\n  }\n\n  for (var valueIndex = 0; valueIndex < count; valueIndex++) {\n    value.push(getTagValueAt[type](dataView, offset, byteOrder));\n    offset += _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].typeSizes[type];\n  }\n\n  if (type === _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].tagTypes['ASCII']) {\n    value = _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getAsciiValue(value);\n  } else if (value.length === 1) {\n    value = value[0];\n  }\n\n  return value;\n}\n\nfunction tagValueFitsInDataView(dataView, tiffHeaderOffset, tagValueOffset, tagType, tagCount) {\n  return tiffHeaderOffset + tagValueOffset + _types_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].typeSizes[tagType] * tagCount <= dataView.byteLength;\n}\n\nfunction splitNullSeparatedAsciiString(string) {\n  var tagValue = [];\n  var i = 0;\n\n  for (var j = 0; j < string.length; j++) {\n    if (string[j] === '\\x00') {\n      i++;\n      continue;\n    }\n\n    if (tagValue[i] === undefined) {\n      tagValue[i] = '';\n    }\n\n    tagValue[i] += string[j];\n  }\n\n  return tagValue;\n}\n\nfunction decodeAsciiValue(asciiValue) {\n  try {\n    return asciiValue.map(function (value) {\n      return decodeURIComponent(escape(value));\n    });\n  } catch (error) {\n    return asciiValue;\n  }\n}\n\nfunction getDescriptionFromTagValue(tagValue) {\n  if (tagValue instanceof Array) {\n    return tagValue.join(', ');\n  }\n\n  return tagValue;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/tags.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/text-decoder.js":
/*!*****************************************************!*\
  !*** ./node_modules/exifreader/src/text-decoder.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  get: get\n});\n\nfunction get() {\n  if (typeof TextDecoder !== 'undefined') {\n    return TextDecoder;\n  }\n\n  return undefined;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL3RleHQtZGVjb2Rlci5qcz81ZjE1Il0sIm5hbWVzIjpbImdldCIsIlRleHREZWNvZGVyIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBOzs7QUFJZTtBQUNYQSxLQUFHLEVBQUhBO0FBRFcsQ0FBZjs7QUFJQSxTQUFTQSxHQUFULEdBQWU7QUFDWCxNQUFJLE9BQU9DLFdBQVAsS0FBdUIsV0FBM0IsRUFBd0M7QUFDcEMsV0FBT0EsV0FBUDtBQUNIOztBQUVELFNBQU9DLFNBQVA7QUFDSCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9leGlmcmVhZGVyL3NyYy90ZXh0LWRlY29kZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGdldFxufTtcblxuZnVuY3Rpb24gZ2V0KCkge1xuICAgIGlmICh0eXBlb2YgVGV4dERlY29kZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBUZXh0RGVjb2RlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/text-decoder.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/thumbnail.js":
/*!**************************************************!*\
  !*** ./node_modules/exifreader/src/thumbnail.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/exifreader/src/utils.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n // https://exiftool.org/TagNames/EXIF.html#Compression\n\nvar COMPRESSION_JPEG = [6, 7, 99];\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  get: get\n});\n\nfunction get(dataView, thumbnailTags, tiffHeaderOffset) {\n  if (hasJpegThumbnail(thumbnailTags)) {\n    thumbnailTags.type = 'image/jpeg';\n    var offset = tiffHeaderOffset + thumbnailTags.JPEGInterchangeFormat.value;\n    thumbnailTags.image = dataView.buffer.slice(offset, offset + thumbnailTags.JPEGInterchangeFormatLength.value);\n    Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"deferInit\"])(thumbnailTags, 'base64', function () {\n      return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getBase64Image\"])(this.image);\n    });\n  } // There is a small possibility of thumbnails in TIFF format but they are\n  // not stored as a self-contained image file and would be much more\n  // difficult to extract.\n  // https://exiftool.org/forum/index.php?topic=3273.msg14778#msg14778\n\n\n  return thumbnailTags;\n}\n\nfunction hasJpegThumbnail(tags) {\n  return tags && (tags.Compression === undefined || COMPRESSION_JPEG.includes(tags.Compression.value)) && tags.JPEGInterchangeFormat && tags.JPEGInterchangeFormat.value && tags.JPEGInterchangeFormatLength && tags.JPEGInterchangeFormatLength.value;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL3RodW1ibmFpbC5qcz9hN2FlIl0sIm5hbWVzIjpbIkNPTVBSRVNTSU9OX0pQRUciLCJnZXQiLCJkYXRhVmlldyIsInRodW1ibmFpbFRhZ3MiLCJ0aWZmSGVhZGVyT2Zmc2V0IiwiaGFzSnBlZ1RodW1ibmFpbCIsInR5cGUiLCJvZmZzZXQiLCJKUEVHSW50ZXJjaGFuZ2VGb3JtYXQiLCJ2YWx1ZSIsImltYWdlIiwiYnVmZmVyIiwic2xpY2UiLCJKUEVHSW50ZXJjaGFuZ2VGb3JtYXRMZW5ndGgiLCJkZWZlckluaXQiLCJnZXRCYXNlNjRJbWFnZSIsInRhZ3MiLCJDb21wcmVzc2lvbiIsInVuZGVmaW5lZCIsImluY2x1ZGVzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7OztDQU1BOztBQUNBLElBQU1BLGdCQUFnQixHQUFHLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxFQUFQLENBQXpCO0FBRWU7QUFDWEMsS0FBRyxFQUFIQTtBQURXLENBQWY7O0FBSUEsU0FBU0EsR0FBVCxDQUFhQyxRQUFiLEVBQXVCQyxhQUF2QixFQUFzQ0MsZ0JBQXRDLEVBQXdEO0FBQ3BELE1BQUlDLGdCQUFnQixDQUFDRixhQUFELENBQXBCLEVBQXFDO0FBQ2pDQSxpQkFBYSxDQUFDRyxJQUFkLEdBQXFCLFlBQXJCO0FBQ0EsUUFBTUMsTUFBTSxHQUFHSCxnQkFBZ0IsR0FBR0QsYUFBYSxDQUFDSyxxQkFBZCxDQUFvQ0MsS0FBdEU7QUFDQU4saUJBQWEsQ0FBQ08sS0FBZCxHQUFzQlIsUUFBUSxDQUFDUyxNQUFULENBQWdCQyxLQUFoQixDQUFzQkwsTUFBdEIsRUFBOEJBLE1BQU0sR0FBR0osYUFBYSxDQUFDVSwyQkFBZCxDQUEwQ0osS0FBakYsQ0FBdEI7QUFDQUssK0RBQVMsQ0FBQ1gsYUFBRCxFQUFnQixRQUFoQixFQUEwQixZQUFZO0FBQzNDLGFBQU9ZLGdFQUFjLENBQUMsS0FBS0wsS0FBTixDQUFyQjtBQUNILEtBRlEsQ0FBVDtBQUdILEdBUm1ELENBVXBEO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQSxTQUFPUCxhQUFQO0FBQ0g7O0FBRUQsU0FBU0UsZ0JBQVQsQ0FBMEJXLElBQTFCLEVBQWdDO0FBQzVCLFNBQU9BLElBQUksS0FBTUEsSUFBSSxDQUFDQyxXQUFMLEtBQXFCQyxTQUF0QixJQUFxQ2xCLGdCQUFnQixDQUFDbUIsUUFBakIsQ0FBMEJILElBQUksQ0FBQ0MsV0FBTCxDQUFpQlIsS0FBM0MsQ0FBMUMsQ0FBSixJQUNBTyxJQUFJLENBQUNSLHFCQURMLElBQzhCUSxJQUFJLENBQUNSLHFCQUFMLENBQTJCQyxLQUR6RCxJQUVBTyxJQUFJLENBQUNILDJCQUZMLElBRW9DRyxJQUFJLENBQUNILDJCQUFMLENBQWlDSixLQUY1RTtBQUdIIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL3RodW1ibmFpbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwczovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQge2RlZmVySW5pdCwgZ2V0QmFzZTY0SW1hZ2V9IGZyb20gJy4vdXRpbHMuanMnO1xuXG4vLyBodHRwczovL2V4aWZ0b29sLm9yZy9UYWdOYW1lcy9FWElGLmh0bWwjQ29tcHJlc3Npb25cbmNvbnN0IENPTVBSRVNTSU9OX0pQRUcgPSBbNiwgNywgOTldO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgZ2V0LFxufTtcblxuZnVuY3Rpb24gZ2V0KGRhdGFWaWV3LCB0aHVtYm5haWxUYWdzLCB0aWZmSGVhZGVyT2Zmc2V0KSB7XG4gICAgaWYgKGhhc0pwZWdUaHVtYm5haWwodGh1bWJuYWlsVGFncykpIHtcbiAgICAgICAgdGh1bWJuYWlsVGFncy50eXBlID0gJ2ltYWdlL2pwZWcnO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aWZmSGVhZGVyT2Zmc2V0ICsgdGh1bWJuYWlsVGFncy5KUEVHSW50ZXJjaGFuZ2VGb3JtYXQudmFsdWU7XG4gICAgICAgIHRodW1ibmFpbFRhZ3MuaW1hZ2UgPSBkYXRhVmlldy5idWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyB0aHVtYm5haWxUYWdzLkpQRUdJbnRlcmNoYW5nZUZvcm1hdExlbmd0aC52YWx1ZSk7XG4gICAgICAgIGRlZmVySW5pdCh0aHVtYm5haWxUYWdzLCAnYmFzZTY0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEJhc2U2NEltYWdlKHRoaXMuaW1hZ2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBUaGVyZSBpcyBhIHNtYWxsIHBvc3NpYmlsaXR5IG9mIHRodW1ibmFpbHMgaW4gVElGRiBmb3JtYXQgYnV0IHRoZXkgYXJlXG4gICAgLy8gbm90IHN0b3JlZCBhcyBhIHNlbGYtY29udGFpbmVkIGltYWdlIGZpbGUgYW5kIHdvdWxkIGJlIG11Y2ggbW9yZVxuICAgIC8vIGRpZmZpY3VsdCB0byBleHRyYWN0LlxuICAgIC8vIGh0dHBzOi8vZXhpZnRvb2wub3JnL2ZvcnVtL2luZGV4LnBocD90b3BpYz0zMjczLm1zZzE0Nzc4I21zZzE0Nzc4XG5cbiAgICByZXR1cm4gdGh1bWJuYWlsVGFncztcbn1cblxuZnVuY3Rpb24gaGFzSnBlZ1RodW1ibmFpbCh0YWdzKSB7XG4gICAgcmV0dXJuIHRhZ3MgJiYgKCh0YWdzLkNvbXByZXNzaW9uID09PSB1bmRlZmluZWQpIHx8IChDT01QUkVTU0lPTl9KUEVHLmluY2x1ZGVzKHRhZ3MuQ29tcHJlc3Npb24udmFsdWUpKSlcbiAgICAgICAgJiYgdGFncy5KUEVHSW50ZXJjaGFuZ2VGb3JtYXQgJiYgdGFncy5KUEVHSW50ZXJjaGFuZ2VGb3JtYXQudmFsdWVcbiAgICAgICAgJiYgdGFncy5KUEVHSW50ZXJjaGFuZ2VGb3JtYXRMZW5ndGggJiYgdGFncy5KUEVHSW50ZXJjaGFuZ2VGb3JtYXRMZW5ndGgudmFsdWU7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/thumbnail.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/types.js":
/*!**********************************************!*\
  !*** ./node_modules/exifreader/src/types.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _byte_order_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte-order.js */ \"./node_modules/exifreader/src/byte-order.js\");\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nvar typeSizes = {\n  1: 1,\n  // BYTE\n  2: 1,\n  // ASCII\n  3: 2,\n  // SHORT\n  4: 4,\n  // LONG\n  5: 8,\n  // RATIONAL\n  7: 1,\n  // UNDEFINED\n  9: 4,\n  // SLONG\n  10: 8,\n  // SRATIONAL\n  13: 4 // IFD\n\n};\nvar tagTypes = {\n  'BYTE': 1,\n  'ASCII': 2,\n  'SHORT': 3,\n  'LONG': 4,\n  'RATIONAL': 5,\n  'UNDEFINED': 7,\n  'SLONG': 9,\n  'SRATIONAL': 10,\n  'IFD': 13\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  getAsciiValue: getAsciiValue,\n  getByteAt: getByteAt,\n  getAsciiAt: getAsciiAt,\n  getShortAt: getShortAt,\n  getLongAt: getLongAt,\n  getRationalAt: getRationalAt,\n  getUndefinedAt: getUndefinedAt,\n  getSlongAt: getSlongAt,\n  getSrationalAt: getSrationalAt,\n  getIfdPointerAt: getIfdPointerAt,\n  typeSizes: typeSizes,\n  tagTypes: tagTypes,\n  getTypeSize: getTypeSize\n});\n\nfunction getAsciiValue(charArray) {\n  return charArray.map(function (charCode) {\n    return String.fromCharCode(charCode);\n  });\n}\n\nfunction getByteAt(dataView, offset) {\n  return dataView.getUint8(offset);\n}\n\nfunction getAsciiAt(dataView, offset) {\n  return dataView.getUint8(offset);\n}\n\nfunction getShortAt(dataView, offset, byteOrder) {\n  return dataView.getUint16(offset, byteOrder === _byte_order_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].LITTLE_ENDIAN);\n}\n\nfunction getLongAt(dataView, offset, byteOrder) {\n  return dataView.getUint32(offset, byteOrder === _byte_order_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].LITTLE_ENDIAN);\n}\n\nfunction getRationalAt(dataView, offset, byteOrder) {\n  return [getLongAt(dataView, offset, byteOrder), getLongAt(dataView, offset + 4, byteOrder)];\n}\n\nfunction getUndefinedAt(dataView, offset) {\n  return getByteAt(dataView, offset);\n}\n\nfunction getSlongAt(dataView, offset, byteOrder) {\n  return dataView.getInt32(offset, byteOrder === _byte_order_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].LITTLE_ENDIAN);\n}\n\nfunction getSrationalAt(dataView, offset, byteOrder) {\n  return [getSlongAt(dataView, offset, byteOrder), getSlongAt(dataView, offset + 4, byteOrder)];\n}\n\nfunction getIfdPointerAt(dataView, offset, byteOrder) {\n  return getLongAt(dataView, offset, byteOrder);\n}\n\nfunction getTypeSize(typeName) {\n  if (tagTypes[typeName] === undefined) {\n    throw new Error('No such type found.');\n  }\n\n  return typeSizes[tagTypes[typeName]];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL3R5cGVzLmpzP2E4NGMiXSwibmFtZXMiOlsidHlwZVNpemVzIiwidGFnVHlwZXMiLCJnZXRBc2NpaVZhbHVlIiwiZ2V0Qnl0ZUF0IiwiZ2V0QXNjaWlBdCIsImdldFNob3J0QXQiLCJnZXRMb25nQXQiLCJnZXRSYXRpb25hbEF0IiwiZ2V0VW5kZWZpbmVkQXQiLCJnZXRTbG9uZ0F0IiwiZ2V0U3JhdGlvbmFsQXQiLCJnZXRJZmRQb2ludGVyQXQiLCJnZXRUeXBlU2l6ZSIsImNoYXJBcnJheSIsIm1hcCIsImNoYXJDb2RlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiZGF0YVZpZXciLCJvZmZzZXQiLCJnZXRVaW50OCIsImJ5dGVPcmRlciIsImdldFVpbnQxNiIsIkJ5dGVPcmRlciIsIkxJVFRMRV9FTkRJQU4iLCJnZXRVaW50MzIiLCJnZXRJbnQzMiIsInR5cGVOYW1lIiwidW5kZWZpbmVkIiwiRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7O0FBSUE7QUFFQSxJQUFNQSxTQUFTLEdBQUc7QUFDZCxLQUFHLENBRFc7QUFDUjtBQUNOLEtBQUcsQ0FGVztBQUVSO0FBQ04sS0FBRyxDQUhXO0FBR1I7QUFDTixLQUFHLENBSlc7QUFJUjtBQUNOLEtBQUcsQ0FMVztBQUtSO0FBQ04sS0FBRyxDQU5XO0FBTVI7QUFDTixLQUFHLENBUFc7QUFPUjtBQUNOLE1BQUksQ0FSVTtBQVFQO0FBQ1AsTUFBSSxDQVRVLENBU1I7O0FBVFEsQ0FBbEI7QUFZQSxJQUFNQyxRQUFRLEdBQUc7QUFDYixVQUFRLENBREs7QUFFYixXQUFTLENBRkk7QUFHYixXQUFTLENBSEk7QUFJYixVQUFRLENBSks7QUFLYixjQUFZLENBTEM7QUFNYixlQUFhLENBTkE7QUFPYixXQUFTLENBUEk7QUFRYixlQUFhLEVBUkE7QUFTYixTQUFPO0FBVE0sQ0FBakI7QUFZZTtBQUNYQyxlQUFhLEVBQWJBLGFBRFc7QUFFWEMsV0FBUyxFQUFUQSxTQUZXO0FBR1hDLFlBQVUsRUFBVkEsVUFIVztBQUlYQyxZQUFVLEVBQVZBLFVBSlc7QUFLWEMsV0FBUyxFQUFUQSxTQUxXO0FBTVhDLGVBQWEsRUFBYkEsYUFOVztBQU9YQyxnQkFBYyxFQUFkQSxjQVBXO0FBUVhDLFlBQVUsRUFBVkEsVUFSVztBQVNYQyxnQkFBYyxFQUFkQSxjQVRXO0FBVVhDLGlCQUFlLEVBQWZBLGVBVlc7QUFXWFgsV0FBUyxFQUFUQSxTQVhXO0FBWVhDLFVBQVEsRUFBUkEsUUFaVztBQWFYVyxhQUFXLEVBQVhBO0FBYlcsQ0FBZjs7QUFnQkEsU0FBU1YsYUFBVCxDQUF1QlcsU0FBdkIsRUFBa0M7QUFDOUIsU0FBT0EsU0FBUyxDQUFDQyxHQUFWLENBQWMsVUFBQ0MsUUFBRDtBQUFBLFdBQWNDLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQkYsUUFBcEIsQ0FBZDtBQUFBLEdBQWQsQ0FBUDtBQUNIOztBQUVELFNBQVNaLFNBQVQsQ0FBbUJlLFFBQW5CLEVBQTZCQyxNQUE3QixFQUFxQztBQUNqQyxTQUFPRCxRQUFRLENBQUNFLFFBQVQsQ0FBa0JELE1BQWxCLENBQVA7QUFDSDs7QUFFRCxTQUFTZixVQUFULENBQW9CYyxRQUFwQixFQUE4QkMsTUFBOUIsRUFBc0M7QUFDbEMsU0FBT0QsUUFBUSxDQUFDRSxRQUFULENBQWtCRCxNQUFsQixDQUFQO0FBQ0g7O0FBRUQsU0FBU2QsVUFBVCxDQUFvQmEsUUFBcEIsRUFBOEJDLE1BQTlCLEVBQXNDRSxTQUF0QyxFQUFpRDtBQUM3QyxTQUFPSCxRQUFRLENBQUNJLFNBQVQsQ0FBbUJILE1BQW5CLEVBQTJCRSxTQUFTLEtBQUtFLHNEQUFTLENBQUNDLGFBQW5ELENBQVA7QUFDSDs7QUFFRCxTQUFTbEIsU0FBVCxDQUFtQlksUUFBbkIsRUFBNkJDLE1BQTdCLEVBQXFDRSxTQUFyQyxFQUFnRDtBQUM1QyxTQUFPSCxRQUFRLENBQUNPLFNBQVQsQ0FBbUJOLE1BQW5CLEVBQTJCRSxTQUFTLEtBQUtFLHNEQUFTLENBQUNDLGFBQW5ELENBQVA7QUFDSDs7QUFFRCxTQUFTakIsYUFBVCxDQUF1QlcsUUFBdkIsRUFBaUNDLE1BQWpDLEVBQXlDRSxTQUF6QyxFQUFvRDtBQUNoRCxTQUFPLENBQUNmLFNBQVMsQ0FBQ1ksUUFBRCxFQUFXQyxNQUFYLEVBQW1CRSxTQUFuQixDQUFWLEVBQXlDZixTQUFTLENBQUNZLFFBQUQsRUFBV0MsTUFBTSxHQUFHLENBQXBCLEVBQXVCRSxTQUF2QixDQUFsRCxDQUFQO0FBQ0g7O0FBRUQsU0FBU2IsY0FBVCxDQUF3QlUsUUFBeEIsRUFBa0NDLE1BQWxDLEVBQTBDO0FBQ3RDLFNBQU9oQixTQUFTLENBQUNlLFFBQUQsRUFBV0MsTUFBWCxDQUFoQjtBQUNIOztBQUVELFNBQVNWLFVBQVQsQ0FBb0JTLFFBQXBCLEVBQThCQyxNQUE5QixFQUFzQ0UsU0FBdEMsRUFBaUQ7QUFDN0MsU0FBT0gsUUFBUSxDQUFDUSxRQUFULENBQWtCUCxNQUFsQixFQUEwQkUsU0FBUyxLQUFLRSxzREFBUyxDQUFDQyxhQUFsRCxDQUFQO0FBQ0g7O0FBRUQsU0FBU2QsY0FBVCxDQUF3QlEsUUFBeEIsRUFBa0NDLE1BQWxDLEVBQTBDRSxTQUExQyxFQUFxRDtBQUNqRCxTQUFPLENBQUNaLFVBQVUsQ0FBQ1MsUUFBRCxFQUFXQyxNQUFYLEVBQW1CRSxTQUFuQixDQUFYLEVBQTBDWixVQUFVLENBQUNTLFFBQUQsRUFBV0MsTUFBTSxHQUFHLENBQXBCLEVBQXVCRSxTQUF2QixDQUFwRCxDQUFQO0FBQ0g7O0FBRUQsU0FBU1YsZUFBVCxDQUF5Qk8sUUFBekIsRUFBbUNDLE1BQW5DLEVBQTJDRSxTQUEzQyxFQUFzRDtBQUNsRCxTQUFPZixTQUFTLENBQUNZLFFBQUQsRUFBV0MsTUFBWCxFQUFtQkUsU0FBbkIsQ0FBaEI7QUFDSDs7QUFFRCxTQUFTVCxXQUFULENBQXFCZSxRQUFyQixFQUErQjtBQUMzQixNQUFJMUIsUUFBUSxDQUFDMEIsUUFBRCxDQUFSLEtBQXVCQyxTQUEzQixFQUFzQztBQUNsQyxVQUFNLElBQUlDLEtBQUosQ0FBVSxxQkFBVixDQUFOO0FBQ0g7O0FBRUQsU0FBTzdCLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDMEIsUUFBRCxDQUFULENBQWhCO0FBQ0giLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXhpZnJlYWRlci9zcmMvdHlwZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IEJ5dGVPcmRlciBmcm9tICcuL2J5dGUtb3JkZXIuanMnO1xuXG5jb25zdCB0eXBlU2l6ZXMgPSB7XG4gICAgMTogMSwgLy8gQllURVxuICAgIDI6IDEsIC8vIEFTQ0lJXG4gICAgMzogMiwgLy8gU0hPUlRcbiAgICA0OiA0LCAvLyBMT05HXG4gICAgNTogOCwgLy8gUkFUSU9OQUxcbiAgICA3OiAxLCAvLyBVTkRFRklORURcbiAgICA5OiA0LCAvLyBTTE9OR1xuICAgIDEwOiA4LCAvLyBTUkFUSU9OQUxcbiAgICAxMzogNCAvLyBJRkRcbn07XG5cbmNvbnN0IHRhZ1R5cGVzID0ge1xuICAgICdCWVRFJzogMSxcbiAgICAnQVNDSUknOiAyLFxuICAgICdTSE9SVCc6IDMsXG4gICAgJ0xPTkcnOiA0LFxuICAgICdSQVRJT05BTCc6IDUsXG4gICAgJ1VOREVGSU5FRCc6IDcsXG4gICAgJ1NMT05HJzogOSxcbiAgICAnU1JBVElPTkFMJzogMTAsXG4gICAgJ0lGRCc6IDEzXG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgZ2V0QXNjaWlWYWx1ZSxcbiAgICBnZXRCeXRlQXQsXG4gICAgZ2V0QXNjaWlBdCxcbiAgICBnZXRTaG9ydEF0LFxuICAgIGdldExvbmdBdCxcbiAgICBnZXRSYXRpb25hbEF0LFxuICAgIGdldFVuZGVmaW5lZEF0LFxuICAgIGdldFNsb25nQXQsXG4gICAgZ2V0U3JhdGlvbmFsQXQsXG4gICAgZ2V0SWZkUG9pbnRlckF0LFxuICAgIHR5cGVTaXplcyxcbiAgICB0YWdUeXBlcyxcbiAgICBnZXRUeXBlU2l6ZVxufTtcblxuZnVuY3Rpb24gZ2V0QXNjaWlWYWx1ZShjaGFyQXJyYXkpIHtcbiAgICByZXR1cm4gY2hhckFycmF5Lm1hcCgoY2hhckNvZGUpID0+IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpKTtcbn1cblxuZnVuY3Rpb24gZ2V0Qnl0ZUF0KGRhdGFWaWV3LCBvZmZzZXQpIHtcbiAgICByZXR1cm4gZGF0YVZpZXcuZ2V0VWludDgob2Zmc2V0KTtcbn1cblxuZnVuY3Rpb24gZ2V0QXNjaWlBdChkYXRhVmlldywgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCk7XG59XG5cbmZ1bmN0aW9uIGdldFNob3J0QXQoZGF0YVZpZXcsIG9mZnNldCwgYnl0ZU9yZGVyKSB7XG4gICAgcmV0dXJuIGRhdGFWaWV3LmdldFVpbnQxNihvZmZzZXQsIGJ5dGVPcmRlciA9PT0gQnl0ZU9yZGVyLkxJVFRMRV9FTkRJQU4pO1xufVxuXG5mdW5jdGlvbiBnZXRMb25nQXQoZGF0YVZpZXcsIG9mZnNldCwgYnl0ZU9yZGVyKSB7XG4gICAgcmV0dXJuIGRhdGFWaWV3LmdldFVpbnQzMihvZmZzZXQsIGJ5dGVPcmRlciA9PT0gQnl0ZU9yZGVyLkxJVFRMRV9FTkRJQU4pO1xufVxuXG5mdW5jdGlvbiBnZXRSYXRpb25hbEF0KGRhdGFWaWV3LCBvZmZzZXQsIGJ5dGVPcmRlcikge1xuICAgIHJldHVybiBbZ2V0TG9uZ0F0KGRhdGFWaWV3LCBvZmZzZXQsIGJ5dGVPcmRlciksIGdldExvbmdBdChkYXRhVmlldywgb2Zmc2V0ICsgNCwgYnl0ZU9yZGVyKV07XG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZEF0KGRhdGFWaWV3LCBvZmZzZXQpIHtcbiAgICByZXR1cm4gZ2V0Qnl0ZUF0KGRhdGFWaWV3LCBvZmZzZXQpO1xufVxuXG5mdW5jdGlvbiBnZXRTbG9uZ0F0KGRhdGFWaWV3LCBvZmZzZXQsIGJ5dGVPcmRlcikge1xuICAgIHJldHVybiBkYXRhVmlldy5nZXRJbnQzMihvZmZzZXQsIGJ5dGVPcmRlciA9PT0gQnl0ZU9yZGVyLkxJVFRMRV9FTkRJQU4pO1xufVxuXG5mdW5jdGlvbiBnZXRTcmF0aW9uYWxBdChkYXRhVmlldywgb2Zmc2V0LCBieXRlT3JkZXIpIHtcbiAgICByZXR1cm4gW2dldFNsb25nQXQoZGF0YVZpZXcsIG9mZnNldCwgYnl0ZU9yZGVyKSwgZ2V0U2xvbmdBdChkYXRhVmlldywgb2Zmc2V0ICsgNCwgYnl0ZU9yZGVyKV07XG59XG5cbmZ1bmN0aW9uIGdldElmZFBvaW50ZXJBdChkYXRhVmlldywgb2Zmc2V0LCBieXRlT3JkZXIpIHtcbiAgICByZXR1cm4gZ2V0TG9uZ0F0KGRhdGFWaWV3LCBvZmZzZXQsIGJ5dGVPcmRlcik7XG59XG5cbmZ1bmN0aW9uIGdldFR5cGVTaXplKHR5cGVOYW1lKSB7XG4gICAgaWYgKHRhZ1R5cGVzW3R5cGVOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc3VjaCB0eXBlIGZvdW5kLicpO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlU2l6ZXNbdGFnVHlwZXNbdHlwZU5hbWVdXTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/types.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/exifreader/src/utils.js ***!
  \**********************************************/
/*! exports provided: getStringFromDataView, getUnicodeStringFromDataView, getStringValueFromArray, getCharacterArray, objectAssign, deferInit, getBase64Image */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getStringFromDataView\", function() { return getStringFromDataView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getUnicodeStringFromDataView\", function() { return getUnicodeStringFromDataView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getStringValueFromArray\", function() { return getStringValueFromArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCharacterArray\", function() { return getCharacterArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"objectAssign\", function() { return objectAssign; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deferInit\", function() { return deferInit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getBase64Image\", function() { return getBase64Image; });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\nfunction getStringFromDataView(dataView, offset, length) {\n  var chars = [];\n\n  for (var i = 0; i < length && offset + i < dataView.byteLength; i++) {\n    chars.push(dataView.getUint8(offset + i));\n  }\n\n  return getStringValueFromArray(chars);\n}\nfunction getUnicodeStringFromDataView(dataView, offset, length) {\n  var chars = [];\n\n  for (var i = 0; i < length && offset + i < dataView.byteLength; i += 2) {\n    chars.push(dataView.getUint16(offset + i));\n  }\n\n  return getStringValueFromArray(chars);\n}\nfunction getStringValueFromArray(charArray) {\n  return charArray.map(function (charCode) {\n    return String.fromCharCode(charCode);\n  }).join('');\n}\nfunction getCharacterArray(string) {\n  return string.split('').map(function (character) {\n    return character.charCodeAt(0);\n  });\n}\nfunction objectAssign() {\n  for (var i = 1; i < arguments.length; i++) {\n    for (var property in arguments[i]) {\n      arguments[0][property] = arguments[i][property];\n    }\n  }\n\n  return arguments[0];\n}\nfunction deferInit(object, key, initializer) {\n  var initialized = false;\n  Object.defineProperty(object, key, {\n    get: function get() {\n      if (!initialized) {\n        initialized = true;\n        Object.defineProperty(object, key, {\n          configurable: true,\n          enumerable: true,\n          value: initializer.apply(object),\n          writable: true\n        });\n      }\n\n      return object[key];\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\nfunction getBase64Image(image) {\n  if (typeof btoa !== 'undefined') {\n    // IE11- does not implement reduce on the Uint8Array prototype.\n    return btoa(Array.prototype.reduce.call(new Uint8Array(image), function (data, byte) {\n      return data + String.fromCharCode(byte);\n    }, ''));\n  }\n\n  if (typeof Buffer === 'undefined') {\n    return undefined;\n  }\n\n  if (_typeof(Buffer.from) !== undefined) {\n    // eslint-disable-line no-undef\n    return Buffer.from(image).toString('base64'); // eslint-disable-line no-undef\n  }\n\n  return new Buffer(image).toString('base64'); // eslint-disable-line no-undef\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL3V0aWxzLmpzP2FjMDMiXSwibmFtZXMiOlsiZ2V0U3RyaW5nRnJvbURhdGFWaWV3IiwiZGF0YVZpZXciLCJvZmZzZXQiLCJsZW5ndGgiLCJjaGFycyIsImkiLCJieXRlTGVuZ3RoIiwicHVzaCIsImdldFVpbnQ4IiwiZ2V0U3RyaW5nVmFsdWVGcm9tQXJyYXkiLCJnZXRVbmljb2RlU3RyaW5nRnJvbURhdGFWaWV3IiwiZ2V0VWludDE2IiwiY2hhckFycmF5IiwibWFwIiwiY2hhckNvZGUiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJqb2luIiwiZ2V0Q2hhcmFjdGVyQXJyYXkiLCJzdHJpbmciLCJzcGxpdCIsImNoYXJhY3RlciIsImNoYXJDb2RlQXQiLCJvYmplY3RBc3NpZ24iLCJhcmd1bWVudHMiLCJwcm9wZXJ0eSIsImRlZmVySW5pdCIsIm9iamVjdCIsImtleSIsImluaXRpYWxpemVyIiwiaW5pdGlhbGl6ZWQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJ2YWx1ZSIsImFwcGx5Iiwid3JpdGFibGUiLCJnZXRCYXNlNjRJbWFnZSIsImltYWdlIiwiYnRvYSIsIkFycmF5IiwicHJvdG90eXBlIiwicmVkdWNlIiwiY2FsbCIsIlVpbnQ4QXJyYXkiLCJkYXRhIiwiYnl0ZSIsIkJ1ZmZlciIsInVuZGVmaW5lZCIsImZyb20iLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7QUFJTyxTQUFTQSxxQkFBVCxDQUErQkMsUUFBL0IsRUFBeUNDLE1BQXpDLEVBQWlEQyxNQUFqRCxFQUF5RDtBQUM1RCxNQUFNQyxLQUFLLEdBQUcsRUFBZDs7QUFDQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLE1BQUosSUFBY0QsTUFBTSxHQUFHRyxDQUFULEdBQWFKLFFBQVEsQ0FBQ0ssVUFBcEQsRUFBZ0VELENBQUMsRUFBakUsRUFBcUU7QUFDakVELFNBQUssQ0FBQ0csSUFBTixDQUFXTixRQUFRLENBQUNPLFFBQVQsQ0FBa0JOLE1BQU0sR0FBR0csQ0FBM0IsQ0FBWDtBQUNIOztBQUNELFNBQU9JLHVCQUF1QixDQUFDTCxLQUFELENBQTlCO0FBQ0g7QUFFTSxTQUFTTSw0QkFBVCxDQUFzQ1QsUUFBdEMsRUFBZ0RDLE1BQWhELEVBQXdEQyxNQUF4RCxFQUFnRTtBQUNuRSxNQUFNQyxLQUFLLEdBQUcsRUFBZDs7QUFDQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLE1BQUosSUFBY0QsTUFBTSxHQUFHRyxDQUFULEdBQWFKLFFBQVEsQ0FBQ0ssVUFBcEQsRUFBZ0VELENBQUMsSUFBSSxDQUFyRSxFQUF3RTtBQUNwRUQsU0FBSyxDQUFDRyxJQUFOLENBQVdOLFFBQVEsQ0FBQ1UsU0FBVCxDQUFtQlQsTUFBTSxHQUFHRyxDQUE1QixDQUFYO0FBQ0g7O0FBQ0QsU0FBT0ksdUJBQXVCLENBQUNMLEtBQUQsQ0FBOUI7QUFDSDtBQUVNLFNBQVNLLHVCQUFULENBQWlDRyxTQUFqQyxFQUE0QztBQUMvQyxTQUFPQSxTQUFTLENBQUNDLEdBQVYsQ0FBYyxVQUFDQyxRQUFEO0FBQUEsV0FBY0MsTUFBTSxDQUFDQyxZQUFQLENBQW9CRixRQUFwQixDQUFkO0FBQUEsR0FBZCxFQUEyREcsSUFBM0QsQ0FBZ0UsRUFBaEUsQ0FBUDtBQUNIO0FBRU0sU0FBU0MsaUJBQVQsQ0FBMkJDLE1BQTNCLEVBQW1DO0FBQ3RDLFNBQU9BLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhLEVBQWIsRUFBaUJQLEdBQWpCLENBQXFCLFVBQUNRLFNBQUQ7QUFBQSxXQUFlQSxTQUFTLENBQUNDLFVBQVYsQ0FBcUIsQ0FBckIsQ0FBZjtBQUFBLEdBQXJCLENBQVA7QUFDSDtBQUVNLFNBQVNDLFlBQVQsR0FBd0I7QUFDM0IsT0FBSyxJQUFJbEIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR21CLFNBQVMsQ0FBQ3JCLE1BQTlCLEVBQXNDRSxDQUFDLEVBQXZDLEVBQTJDO0FBQ3ZDLFNBQUssSUFBTW9CLFFBQVgsSUFBdUJELFNBQVMsQ0FBQ25CLENBQUQsQ0FBaEMsRUFBcUM7QUFDakNtQixlQUFTLENBQUMsQ0FBRCxDQUFULENBQWFDLFFBQWIsSUFBeUJELFNBQVMsQ0FBQ25CLENBQUQsQ0FBVCxDQUFhb0IsUUFBYixDQUF6QjtBQUNIO0FBQ0o7O0FBRUQsU0FBT0QsU0FBUyxDQUFDLENBQUQsQ0FBaEI7QUFDSDtBQUVNLFNBQVNFLFNBQVQsQ0FBbUJDLE1BQW5CLEVBQTJCQyxHQUEzQixFQUFnQ0MsV0FBaEMsRUFBNkM7QUFDaEQsTUFBSUMsV0FBVyxHQUFHLEtBQWxCO0FBQ0FDLFFBQU0sQ0FBQ0MsY0FBUCxDQUFzQkwsTUFBdEIsRUFBOEJDLEdBQTlCLEVBQW1DO0FBQy9CSyxPQUQrQixpQkFDekI7QUFDRixVQUFJLENBQUNILFdBQUwsRUFBa0I7QUFDZEEsbUJBQVcsR0FBRyxJQUFkO0FBQ0FDLGNBQU0sQ0FBQ0MsY0FBUCxDQUFzQkwsTUFBdEIsRUFBOEJDLEdBQTlCLEVBQW1DO0FBQy9CTSxzQkFBWSxFQUFFLElBRGlCO0FBRS9CQyxvQkFBVSxFQUFFLElBRm1CO0FBRy9CQyxlQUFLLEVBQUVQLFdBQVcsQ0FBQ1EsS0FBWixDQUFrQlYsTUFBbEIsQ0FId0I7QUFJL0JXLGtCQUFRLEVBQUU7QUFKcUIsU0FBbkM7QUFNSDs7QUFDRCxhQUFPWCxNQUFNLENBQUNDLEdBQUQsQ0FBYjtBQUNILEtBWjhCO0FBYS9CTSxnQkFBWSxFQUFFLElBYmlCO0FBYy9CQyxjQUFVLEVBQUU7QUFkbUIsR0FBbkM7QUFnQkg7QUFFTSxTQUFTSSxjQUFULENBQXdCQyxLQUF4QixFQUErQjtBQUNsQyxNQUFJLE9BQU9DLElBQVAsS0FBZ0IsV0FBcEIsRUFBaUM7QUFDN0I7QUFDQSxXQUFPQSxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsTUFBaEIsQ0FBdUJDLElBQXZCLENBQTRCLElBQUlDLFVBQUosQ0FBZU4sS0FBZixDQUE1QixFQUFtRCxVQUFDTyxJQUFELEVBQU9DLElBQVA7QUFBQSxhQUFnQkQsSUFBSSxHQUFHaEMsTUFBTSxDQUFDQyxZQUFQLENBQW9CZ0MsSUFBcEIsQ0FBdkI7QUFBQSxLQUFuRCxFQUFxRyxFQUFyRyxDQUFELENBQVg7QUFDSDs7QUFDRCxNQUFJLE9BQU9DLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDL0IsV0FBT0MsU0FBUDtBQUNIOztBQUNELE1BQUksUUFBT0QsTUFBTSxDQUFDRSxJQUFkLE1BQXVCRCxTQUEzQixFQUFzQztBQUFFO0FBQ3BDLFdBQU9ELE1BQU0sQ0FBQ0UsSUFBUCxDQUFZWCxLQUFaLEVBQW1CWSxRQUFuQixDQUE0QixRQUE1QixDQUFQLENBRGtDLENBQ1k7QUFDakQ7O0FBQ0QsU0FBUSxJQUFJSCxNQUFKLENBQVdULEtBQVgsQ0FBRCxDQUFvQlksUUFBcEIsQ0FBNkIsUUFBN0IsQ0FBUCxDQVhrQyxDQVdhO0FBQ2xELEMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXhpZnJlYWRlci9zcmMvdXRpbHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0cmluZ0Zyb21EYXRhVmlldyhkYXRhVmlldywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICBjb25zdCBjaGFycyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoICYmIG9mZnNldCArIGkgPCBkYXRhVmlldy5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hhcnMucHVzaChkYXRhVmlldy5nZXRVaW50OChvZmZzZXQgKyBpKSk7XG4gICAgfVxuICAgIHJldHVybiBnZXRTdHJpbmdWYWx1ZUZyb21BcnJheShjaGFycyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVbmljb2RlU3RyaW5nRnJvbURhdGFWaWV3KGRhdGFWaWV3LCBvZmZzZXQsIGxlbmd0aCkge1xuICAgIGNvbnN0IGNoYXJzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGggJiYgb2Zmc2V0ICsgaSA8IGRhdGFWaWV3LmJ5dGVMZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBjaGFycy5wdXNoKGRhdGFWaWV3LmdldFVpbnQxNihvZmZzZXQgKyBpKSk7XG4gICAgfVxuICAgIHJldHVybiBnZXRTdHJpbmdWYWx1ZUZyb21BcnJheShjaGFycyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHJpbmdWYWx1ZUZyb21BcnJheShjaGFyQXJyYXkpIHtcbiAgICByZXR1cm4gY2hhckFycmF5Lm1hcCgoY2hhckNvZGUpID0+IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpKS5qb2luKCcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoYXJhY3RlckFycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJycpLm1hcCgoY2hhcmFjdGVyKSA9PiBjaGFyYWN0ZXIuY2hhckNvZGVBdCgwKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvYmplY3RBc3NpZ24oKSB7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBhcmd1bWVudHNbaV0pIHtcbiAgICAgICAgICAgIGFyZ3VtZW50c1swXVtwcm9wZXJ0eV0gPSBhcmd1bWVudHNbaV1bcHJvcGVydHldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmVySW5pdChvYmplY3QsIGtleSwgaW5pdGlhbGl6ZXIpIHtcbiAgICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgaWYgKCFpbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaW5pdGlhbGl6ZXIuYXBwbHkob2JqZWN0KSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCYXNlNjRJbWFnZShpbWFnZSkge1xuICAgIGlmICh0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gSUUxMS0gZG9lcyBub3QgaW1wbGVtZW50IHJlZHVjZSBvbiB0aGUgVWludDhBcnJheSBwcm90b3R5cGUuXG4gICAgICAgIHJldHVybiBidG9hKEFycmF5LnByb3RvdHlwZS5yZWR1Y2UuY2FsbChuZXcgVWludDhBcnJheShpbWFnZSksIChkYXRhLCBieXRlKSA9PiBkYXRhICsgU3RyaW5nLmZyb21DaGFyQ29kZShieXRlKSwgJycpKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBCdWZmZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgQnVmZmVyLmZyb20gIT09IHVuZGVmaW5lZCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShpbWFnZSkudG9TdHJpbmcoJ2Jhc2U2NCcpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gICAgfVxuICAgIHJldHVybiAobmV3IEJ1ZmZlcihpbWFnZSkpLnRvU3RyaW5nKCdiYXNlNjQnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/utils.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/xmp-tag-names.js":
/*!******************************************************!*\
  !*** ./node_modules/exifreader/src/xmp-tag-names.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  'tiff:Orientation': function tiffOrientation(value) {\n    if (value === '1') {\n      return 'Horizontal (normal)';\n    }\n\n    if (value === '2') {\n      return 'Mirror horizontal';\n    }\n\n    if (value === '3') {\n      return 'Rotate 180';\n    }\n\n    if (value === '4') {\n      return 'Mirror vertical';\n    }\n\n    if (value === '5') {\n      return 'Mirror horizontal and rotate 270 CW';\n    }\n\n    if (value === '6') {\n      return 'Rotate 90 CW';\n    }\n\n    if (value === '7') {\n      return 'Mirror horizontal and rotate 90 CW';\n    }\n\n    if (value === '8') {\n      return 'Rotate 270 CW';\n    }\n\n    return value;\n  },\n  'exif:GPSLatitude': calculateGPSValue,\n  'exif:GPSLongitude': calculateGPSValue\n});\n\nfunction calculateGPSValue(value) {\n  var _value$split = value.split(','),\n      _value$split2 = _slicedToArray(_value$split, 2),\n      degreesString = _value$split2[0],\n      minutesString = _value$split2[1];\n\n  if (degreesString !== undefined && minutesString !== undefined) {\n    var degrees = parseFloat(degreesString);\n    var minutes = parseFloat(minutesString);\n    var ref = minutesString.charAt(minutesString.length - 1);\n\n    if (!Number.isNaN(degrees) && !Number.isNaN(minutes)) {\n      return '' + (degrees + minutes / 60) + ref;\n    }\n  }\n\n  return value;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2V4aWZyZWFkZXIvc3JjL3htcC10YWctbmFtZXMuanM/YTJkNiJdLCJuYW1lcyI6WyJ2YWx1ZSIsImNhbGN1bGF0ZUdQU1ZhbHVlIiwic3BsaXQiLCJkZWdyZWVzU3RyaW5nIiwibWludXRlc1N0cmluZyIsInVuZGVmaW5lZCIsImRlZ3JlZXMiLCJwYXJzZUZsb2F0IiwibWludXRlcyIsInJlZiIsImNoYXJBdCIsImxlbmd0aCIsIk51bWJlciIsImlzTmFOIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7OztBQUllO0FBQ1gsb0JBRFcsMkJBQ1FBLEtBRFIsRUFDZTtBQUN0QixRQUFJQSxLQUFLLEtBQUssR0FBZCxFQUFtQjtBQUNmLGFBQU8scUJBQVA7QUFDSDs7QUFDRCxRQUFJQSxLQUFLLEtBQUssR0FBZCxFQUFtQjtBQUNmLGFBQU8sbUJBQVA7QUFDSDs7QUFDRCxRQUFJQSxLQUFLLEtBQUssR0FBZCxFQUFtQjtBQUNmLGFBQU8sWUFBUDtBQUNIOztBQUNELFFBQUlBLEtBQUssS0FBSyxHQUFkLEVBQW1CO0FBQ2YsYUFBTyxpQkFBUDtBQUNIOztBQUNELFFBQUlBLEtBQUssS0FBSyxHQUFkLEVBQW1CO0FBQ2YsYUFBTyxxQ0FBUDtBQUNIOztBQUNELFFBQUlBLEtBQUssS0FBSyxHQUFkLEVBQW1CO0FBQ2YsYUFBTyxjQUFQO0FBQ0g7O0FBQ0QsUUFBSUEsS0FBSyxLQUFLLEdBQWQsRUFBbUI7QUFDZixhQUFPLG9DQUFQO0FBQ0g7O0FBQ0QsUUFBSUEsS0FBSyxLQUFLLEdBQWQsRUFBbUI7QUFDZixhQUFPLGVBQVA7QUFDSDs7QUFDRCxXQUFPQSxLQUFQO0FBQ0gsR0EzQlU7QUE0Qlgsc0JBQW9CQyxpQkE1QlQ7QUE2QlgsdUJBQXFCQTtBQTdCVixDQUFmOztBQWdDQSxTQUFTQSxpQkFBVCxDQUEyQkQsS0FBM0IsRUFBa0M7QUFBQSxxQkFDU0EsS0FBSyxDQUFDRSxLQUFOLENBQVksR0FBWixDQURUO0FBQUE7QUFBQSxNQUN2QkMsYUFEdUI7QUFBQSxNQUNSQyxhQURROztBQUU5QixNQUFLRCxhQUFhLEtBQUtFLFNBQW5CLElBQWtDRCxhQUFhLEtBQUtDLFNBQXhELEVBQW9FO0FBQ2hFLFFBQU1DLE9BQU8sR0FBR0MsVUFBVSxDQUFDSixhQUFELENBQTFCO0FBQ0EsUUFBTUssT0FBTyxHQUFHRCxVQUFVLENBQUNILGFBQUQsQ0FBMUI7QUFDQSxRQUFNSyxHQUFHLEdBQUdMLGFBQWEsQ0FBQ00sTUFBZCxDQUFxQk4sYUFBYSxDQUFDTyxNQUFkLEdBQXVCLENBQTVDLENBQVo7O0FBQ0EsUUFBSyxDQUFDQyxNQUFNLENBQUNDLEtBQVAsQ0FBYVAsT0FBYixDQUFGLElBQTZCLENBQUNNLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhTCxPQUFiLENBQWxDLEVBQTBEO0FBQ3RELGFBQU8sTUFBTUYsT0FBTyxHQUFHRSxPQUFPLEdBQUcsRUFBMUIsSUFBZ0NDLEdBQXZDO0FBQ0g7QUFDSjs7QUFDRCxTQUFPVCxLQUFQO0FBQ0giLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXhpZnJlYWRlci9zcmMveG1wLXRhZy1uYW1lcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwczovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgJ3RpZmY6T3JpZW50YXRpb24nKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJzEnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0hvcml6b250YWwgKG5vcm1hbCknO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJzInKSB7XG4gICAgICAgICAgICByZXR1cm4gJ01pcnJvciBob3Jpem9udGFsJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09ICczJykge1xuICAgICAgICAgICAgcmV0dXJuICdSb3RhdGUgMTgwJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09ICc0Jykge1xuICAgICAgICAgICAgcmV0dXJuICdNaXJyb3IgdmVydGljYWwnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJzUnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ01pcnJvciBob3Jpem9udGFsIGFuZCByb3RhdGUgMjcwIENXJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09ICc2Jykge1xuICAgICAgICAgICAgcmV0dXJuICdSb3RhdGUgOTAgQ1cnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJzcnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ01pcnJvciBob3Jpem9udGFsIGFuZCByb3RhdGUgOTAgQ1cnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJzgnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1JvdGF0ZSAyNzAgQ1cnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgICdleGlmOkdQU0xhdGl0dWRlJzogY2FsY3VsYXRlR1BTVmFsdWUsXG4gICAgJ2V4aWY6R1BTTG9uZ2l0dWRlJzogY2FsY3VsYXRlR1BTVmFsdWVcbn07XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUdQU1ZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgW2RlZ3JlZXNTdHJpbmcsIG1pbnV0ZXNTdHJpbmddID0gdmFsdWUuc3BsaXQoJywnKTtcbiAgICBpZiAoKGRlZ3JlZXNTdHJpbmcgIT09IHVuZGVmaW5lZCkgJiYgKG1pbnV0ZXNTdHJpbmcgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgY29uc3QgZGVncmVlcyA9IHBhcnNlRmxvYXQoZGVncmVlc1N0cmluZyk7XG4gICAgICAgIGNvbnN0IG1pbnV0ZXMgPSBwYXJzZUZsb2F0KG1pbnV0ZXNTdHJpbmcpO1xuICAgICAgICBjb25zdCByZWYgPSBtaW51dGVzU3RyaW5nLmNoYXJBdChtaW51dGVzU3RyaW5nLmxlbmd0aCAtIDEpO1xuICAgICAgICBpZiAoKCFOdW1iZXIuaXNOYU4oZGVncmVlcykpICYmICghTnVtYmVyLmlzTmFOKG1pbnV0ZXMpKSkge1xuICAgICAgICAgICAgcmV0dXJuICcnICsgKGRlZ3JlZXMgKyBtaW51dGVzIC8gNjApICsgcmVmO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/xmp-tag-names.js\n");

/***/ }),

/***/ "./node_modules/exifreader/src/xmp-tags.js":
/*!*************************************************!*\
  !*** ./node_modules/exifreader/src/xmp-tags.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/exifreader/src/utils.js\");\n/* harmony import */ var _xmp_tag_names_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xmp-tag-names.js */ \"./node_modules/exifreader/src/xmp-tag-names.js\");\n/* harmony import */ var _dom_parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom-parser.js */ \"./node_modules/exifreader/src/dom-parser.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  read: read\n});\n\nfunction read(dataView, chunks) {\n  if (typeof dataView === 'string') {\n    return readTags({}, dataView);\n  }\n\n  return extractCompleteChunks(dataView, chunks).reduce(readTags, {});\n} // The first chunk is always the regular XMP document. Then there is something\n// called extended XMP. The extended XMP is also a single XMP document but it\n// can be divided into multiple chunks that need to be combined into one.\n\n\nfunction extractCompleteChunks(dataView, chunks) {\n  if (chunks.length === 0) {\n    return [];\n  }\n\n  var completeChunks = [combineChunks(dataView, chunks.slice(0, 1))];\n\n  if (chunks.length > 1) {\n    completeChunks.push(combineChunks(dataView, chunks.slice(1)));\n  }\n\n  return completeChunks;\n}\n\nfunction combineChunks(dataView, chunks) {\n  var totalLength = chunks.reduce(function (size, chunk) {\n    return size + chunk.length;\n  }, 0);\n  var combinedChunks = new Uint8Array(totalLength);\n  var offset = 0;\n\n  for (var i = 0; i < chunks.length; i++) {\n    var chunk = chunks[i];\n    var slice = dataView.buffer.slice(chunk.dataOffset, chunk.dataOffset + chunk.length);\n    combinedChunks.set(new Uint8Array(slice), offset);\n    offset += chunk.length;\n  }\n\n  return new DataView(combinedChunks.buffer);\n}\n\nfunction readTags(tags, chunkDataView) {\n  try {\n    var doc = getDocument(chunkDataView);\n    var rdf = getRDF(doc);\n    return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])(tags, parseXMPObject(convertToObject(rdf, true)));\n  } catch (error) {\n    return tags;\n  }\n}\n\nfunction getDocument(chunkDataView) {\n  var Parser = _dom_parser_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get();\n\n  if (!Parser) {\n    console.warn('Warning: DOMParser is not available. It is needed to be able to parse XMP tags.'); // eslint-disable-line no-console\n\n    throw new Error();\n  }\n\n  var domParser = new Parser();\n  var xmlString = typeof chunkDataView === 'string' ? chunkDataView : Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"getStringFromDataView\"])(chunkDataView, 0, chunkDataView.byteLength);\n  var doc = domParser.parseFromString(trimXmlSource(xmlString), 'application/xml');\n\n  if (doc.documentElement.nodeName === 'parsererror') {\n    throw new Error(doc.documentElement.textContent);\n  }\n\n  return doc;\n}\n\nfunction trimXmlSource(xmlSource) {\n  return xmlSource.replace(/^.+(<\\?xpacket begin)/, '$1').replace(/(<\\?xpacket end=\".*\"\\?>).+$/, '$1');\n}\n\nfunction getRDF(node) {\n  for (var i = 0; i < node.childNodes.length; i++) {\n    if (node.childNodes[i].tagName === 'x:xmpmeta') {\n      return getRDF(node.childNodes[i]);\n    }\n\n    if (node.childNodes[i].tagName === 'rdf:RDF') {\n      return node.childNodes[i];\n    }\n  }\n\n  throw new Error();\n}\n\nfunction convertToObject(node) {\n  var isTopNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var childNodes = getChildNodes(node);\n\n  if (hasTextOnlyContent(childNodes)) {\n    if (isTopNode) {\n      return {};\n    }\n\n    return getTextValue(childNodes[0]);\n  }\n\n  return getElementsFromNodes(childNodes);\n}\n\nfunction getChildNodes(node) {\n  var elements = [];\n\n  for (var i = 0; i < node.childNodes.length; i++) {\n    elements.push(node.childNodes[i]);\n  }\n\n  return elements;\n}\n\nfunction hasTextOnlyContent(nodes) {\n  return nodes.length === 1 && nodes[0].nodeName === '#text';\n}\n\nfunction getTextValue(node) {\n  return node.nodeValue;\n}\n\nfunction getElementsFromNodes(nodes) {\n  var elements = {};\n  nodes.forEach(function (node) {\n    if (isElement(node)) {\n      var nodeElement = getElementFromNode(node);\n\n      if (elements[node.nodeName] !== undefined) {\n        if (!Array.isArray(elements[node.nodeName])) {\n          elements[node.nodeName] = [elements[node.nodeName]];\n        }\n\n        elements[node.nodeName].push(nodeElement);\n      } else {\n        elements[node.nodeName] = nodeElement;\n      }\n    }\n  });\n  return elements;\n}\n\nfunction isElement(node) {\n  return node.nodeName && node.nodeName !== '#text';\n}\n\nfunction getElementFromNode(node) {\n  return {\n    attributes: getAttributes(node),\n    value: convertToObject(node)\n  };\n}\n\nfunction getAttributes(element) {\n  var attributes = {};\n\n  for (var i = 0; i < element.attributes.length; i++) {\n    attributes[element.attributes[i].nodeName] = decodeURIComponent(escape(element.attributes[i].value));\n  }\n\n  return attributes;\n}\n\nfunction parseXMPObject(xmpObject) {\n  var tags = {};\n\n  if (typeof xmpObject === 'string') {\n    return xmpObject;\n  }\n\n  for (var nodeName in xmpObject) {\n    var nodes = xmpObject[nodeName];\n\n    if (!Array.isArray(nodes)) {\n      nodes = [nodes];\n    }\n\n    nodes.forEach(function (node) {\n      Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])(tags, parseNodeAttributesAsTags(node.attributes));\n\n      if (_typeof(node.value) === 'object') {\n        Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])(tags, parseNodeChildrenAsTags(node.value));\n      }\n    });\n  }\n\n  return tags;\n}\n\nfunction parseNodeAttributesAsTags(attributes) {\n  var tags = {};\n\n  for (var name in attributes) {\n    if (isTagAttribute(name)) {\n      tags[getLocalName(name)] = {\n        value: attributes[name],\n        attributes: {},\n        description: getDescription(attributes[name], name)\n      };\n    }\n  }\n\n  return tags;\n}\n\nfunction isTagAttribute(name) {\n  return name !== 'rdf:parseType' && !isNamespaceDefinition(name);\n}\n\nfunction isNamespaceDefinition(name) {\n  return name.split(':')[0] === 'xmlns';\n}\n\nfunction getLocalName(name) {\n  return name.split(':')[1];\n}\n\nfunction getDescription(value) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n  if (Array.isArray(value)) {\n    return getDescriptionOfArray(value);\n  }\n\n  if (_typeof(value) === 'object') {\n    return getDescriptionOfObject(value);\n  }\n\n  try {\n    if (name && typeof _xmp_tag_names_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][name] === 'function') {\n      return _xmp_tag_names_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][name](value);\n    }\n\n    return decodeURIComponent(escape(value));\n  } catch (error) {\n    return value;\n  }\n}\n\nfunction getDescriptionOfArray(value) {\n  return value.map(function (item) {\n    if (item.value !== undefined) {\n      return getDescription(item.value);\n    }\n\n    return getDescription(item);\n  }).join(', ');\n}\n\nfunction getDescriptionOfObject(value) {\n  var descriptions = [];\n\n  for (var key in value) {\n    descriptions.push(\"\".concat(getClearTextKey(key), \": \").concat(value[key].value));\n  }\n\n  return descriptions.join('; ');\n}\n\nfunction getClearTextKey(key) {\n  if (key === 'CiAdrCity') {\n    return 'CreatorCity';\n  }\n\n  if (key === 'CiAdrCtry') {\n    return 'CreatorCountry';\n  }\n\n  if (key === 'CiAdrExtadr') {\n    return 'CreatorAddress';\n  }\n\n  if (key === 'CiAdrPcode') {\n    return 'CreatorPostalCode';\n  }\n\n  if (key === 'CiAdrRegion') {\n    return 'CreatorRegion';\n  }\n\n  if (key === 'CiEmailWork') {\n    return 'CreatorWorkEmail';\n  }\n\n  if (key === 'CiTelWork') {\n    return 'CreatorWorkPhone';\n  }\n\n  if (key === 'CiUrlWork') {\n    return 'CreatorWorkUrl';\n  }\n\n  return key;\n}\n\nfunction parseNodeChildrenAsTags(children) {\n  var tags = {};\n\n  for (var name in children) {\n    if (!isNamespaceDefinition(name)) {\n      tags[getLocalName(name)] = parseNodeAsTag(children[name], name);\n    }\n  }\n\n  return tags;\n}\n\nfunction parseNodeAsTag(node, name) {\n  if (hasNestedSimpleRdfDescription(node)) {\n    return parseNodeAsSimpleRdfDescription(node, name);\n  } else if (hasNestedStructureRdfDescription(node)) {\n    return parseNodeAsStructureRdfDescription(node, name);\n  } else if (isCompactStructure(node)) {\n    return parseNodeAsCompactStructure(node, name);\n  } else if (isArray(node)) {\n    return parseNodeAsArray(node, name);\n  }\n\n  return parseNodeAsSimpleValue(node, name);\n}\n\nfunction hasNestedSimpleRdfDescription(node) {\n  return node.attributes['rdf:parseType'] === 'Resource' && node.value['rdf:value'] !== undefined || node.value['rdf:Description'] !== undefined && node.value['rdf:Description'].value['rdf:value'] !== undefined;\n}\n\nfunction parseNodeAsSimpleRdfDescription(node, name) {\n  var attributes = parseNodeAttributes(node);\n\n  if (node.value['rdf:Description'] !== undefined) {\n    node = node.value['rdf:Description'];\n  }\n\n  Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])(attributes, parseNodeAttributes(node), parseNodeChildrenAsAttributes(node));\n  var value = parseRdfValue(node);\n  return {\n    value: value,\n    attributes: attributes,\n    description: getDescription(value, name)\n  };\n}\n\nfunction parseNodeAttributes(node) {\n  var attributes = {};\n\n  for (var name in node.attributes) {\n    if (name !== 'rdf:parseType' && name !== 'rdf:resource' && !isNamespaceDefinition(name)) {\n      attributes[getLocalName(name)] = node.attributes[name];\n    }\n  }\n\n  return attributes;\n}\n\nfunction parseNodeChildrenAsAttributes(node) {\n  var attributes = {};\n\n  for (var name in node.value) {\n    if (name !== 'rdf:value' && !isNamespaceDefinition(name)) {\n      attributes[getLocalName(name)] = node.value[name].value;\n    }\n  }\n\n  return attributes;\n}\n\nfunction parseRdfValue(node) {\n  return getURIValue(node.value['rdf:value']) || node.value['rdf:value'].value;\n}\n\nfunction hasNestedStructureRdfDescription(node) {\n  return node.attributes['rdf:parseType'] === 'Resource' || node.value['rdf:Description'] !== undefined && node.value['rdf:Description'].value['rdf:value'] === undefined;\n}\n\nfunction parseNodeAsStructureRdfDescription(node, name) {\n  var tag = {\n    value: {},\n    attributes: {}\n  };\n\n  if (node.value['rdf:Description'] !== undefined) {\n    Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])(tag.value, parseNodeAttributesAsTags(node.value['rdf:Description'].attributes));\n    Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])(tag.attributes, parseNodeAttributes(node));\n    node = node.value['rdf:Description'];\n  }\n\n  Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"objectAssign\"])(tag.value, parseNodeChildrenAsTags(node.value));\n  tag.description = getDescription(tag.value, name);\n  return tag;\n}\n\nfunction isCompactStructure(node) {\n  return Object.keys(node.value).length === 0 && node.attributes['rdf:resource'] === undefined;\n}\n\nfunction parseNodeAsCompactStructure(node, name) {\n  var value = parseNodeAttributesAsTags(node.attributes);\n  return {\n    value: value,\n    attributes: {},\n    description: getDescription(value, name)\n  };\n}\n\nfunction isArray(node) {\n  return getArrayChild(node.value) !== undefined;\n}\n\nfunction getArrayChild(value) {\n  return value['rdf:Bag'] || value['rdf:Seq'] || value['rdf:Alt'];\n}\n\nfunction parseNodeAsArray(node, name) {\n  var items = getArrayChild(node.value).value['rdf:li'];\n  var attributes = parseNodeAttributes(node);\n  var value = [];\n\n  if (items === undefined) {\n    items = [];\n  } else if (!Array.isArray(items)) {\n    items = [items];\n  }\n\n  items.forEach(function (item) {\n    value.push(parseArrayValue(item));\n  });\n  return {\n    value: value,\n    attributes: attributes,\n    description: getDescription(value, name)\n  };\n}\n\nfunction parseArrayValue(item) {\n  if (hasNestedSimpleRdfDescription(item)) {\n    return parseNodeAsSimpleRdfDescription(item);\n  }\n\n  if (hasNestedArrayValue(item)) {\n    return parseNodeChildrenAsTags(item.value);\n  }\n\n  return {\n    value: item.value,\n    attributes: parseNodeAttributes(item),\n    description: getDescription(item.value)\n  };\n}\n\nfunction hasNestedArrayValue(node) {\n  return node.attributes['rdf:parseType'] === 'Resource';\n}\n\nfunction parseNodeAsSimpleValue(node, name) {\n  var value = getURIValue(node) || parseXMPObject(node.value);\n  return {\n    value: value,\n    attributes: parseNodeAttributes(node),\n    description: getDescription(value, name)\n  };\n}\n\nfunction getURIValue(node) {\n  return node.attributes && node.attributes['rdf:resource'];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/exifreader/src/xmp-tags.js\n");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? nBytes - 1 : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n  i += d;\n  e = s & (1 << -nBits) - 1;\n  s >>= -nBits;\n  nBits += eLen;\n\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n  var i = isLE ? 0 : nBytes - 1;\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = e << mLen | m;\n  eLen += mLen;\n\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ieee754/index.js\n");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanM/ZTNkYiJdLCJuYW1lcyI6WyJ0b1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJBcnJheSIsImlzQXJyYXkiLCJhcnIiLCJjYWxsIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxRQUFRLEdBQUcsR0FBR0EsUUFBbEI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkMsS0FBSyxDQUFDQyxPQUFOLElBQWlCLFVBQVVDLEdBQVYsRUFBZTtBQUMvQyxTQUFPTCxRQUFRLENBQUNNLElBQVQsQ0FBY0QsR0FBZCxLQUFzQixnQkFBN0I7QUFDRCxDQUZEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/isarray/index.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcz9jZDAwIl0sIm5hbWVzIjpbImciLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLENBQUosQyxDQUVBOztBQUNBQSxDQUFDLEdBQUksWUFBVztBQUNmLFNBQU8sSUFBUDtBQUNBLENBRkcsRUFBSjs7QUFJQSxJQUFJO0FBQ0g7QUFDQUEsR0FBQyxHQUFHQSxDQUFDLElBQUksSUFBSUMsUUFBSixDQUFhLGFBQWIsR0FBVDtBQUNBLENBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7QUFDWDtBQUNBLE1BQUksUUFBT0MsTUFBUCx5Q0FBT0EsTUFBUCxPQUFrQixRQUF0QixFQUFnQ0gsQ0FBQyxHQUFHRyxNQUFKO0FBQ2hDLEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLENBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./src/browser_operations.js":
/*!***********************************!*\
  !*** ./src/browser_operations.js ***!
  \***********************************/
/*! exports provided: initializeOrGetImg, initializeOrGetCanvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initializeOrGetImg\", function() { return initializeOrGetImg; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initializeOrGetCanvas\", function() { return initializeOrGetCanvas; });\nfunction initializeOrGetImg() {\n  return document.createElement('img');\n}\nfunction initializeOrGetCanvas() {\n  return document.createElement('canvas');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vc3JjL2Jyb3dzZXJfb3BlcmF0aW9ucy5qcz8xZjdkIl0sIm5hbWVzIjpbImluaXRpYWxpemVPckdldEltZyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImluaXRpYWxpemVPckdldENhbnZhcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQU8sU0FBU0Esa0JBQVQsR0FBK0I7QUFDcEMsU0FBT0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQVA7QUFDRDtBQUVNLFNBQVNDLHFCQUFULEdBQWtDO0FBQ3ZDLFNBQU9GLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixRQUF2QixDQUFQO0FBQ0QiLCJmaWxlIjoiLi9zcmMvYnJvd3Nlcl9vcGVyYXRpb25zLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVPckdldEltZyAoKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVPckdldENhbnZhcyAoKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/browser_operations.js\n");

/***/ }),

/***/ "./src/data_operations.js":
/*!********************************!*\
  !*** ./src/data_operations.js ***!
  \********************************/
/*! exports provided: dataURItoBuffer, dataURIToBlob */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dataURItoBuffer\", function() { return dataURItoBuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dataURIToBlob\", function() { return dataURIToBlob; });\nfunction dataURItoBuffer(dataURI) {\n  var byteString = atob(dataURI.split(',')[1]);\n  var ab = new ArrayBuffer(byteString.length);\n  var ia = new Uint8Array(ab);\n\n  for (var i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n\n  return ab;\n}\nfunction dataURIToBlob(dataURI) {\n  // convert base64 to raw binary data held in a string\n  // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\n  var byteString = atob(dataURI.split(',')[1]); // separate out the mime component\n\n  var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]; // write the bytes of the string to an ArrayBuffer\n\n  var ab = new ArrayBuffer(byteString.length); // create a view into the buffer\n\n  var ia = new Uint8Array(ab); // set the bytes of the buffer to the correct values\n\n  for (var i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  } // write the ArrayBuffer to a blob, and you're done\n\n\n  var blob = new Blob([ab], {\n    type: mimeString\n  });\n  return blob;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vc3JjL2RhdGFfb3BlcmF0aW9ucy5qcz83OGI2Il0sIm5hbWVzIjpbImRhdGFVUkl0b0J1ZmZlciIsImRhdGFVUkkiLCJieXRlU3RyaW5nIiwiYXRvYiIsInNwbGl0IiwiYWIiLCJBcnJheUJ1ZmZlciIsImxlbmd0aCIsImlhIiwiVWludDhBcnJheSIsImkiLCJjaGFyQ29kZUF0IiwiZGF0YVVSSVRvQmxvYiIsIm1pbWVTdHJpbmciLCJibG9iIiwiQmxvYiIsInR5cGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFPLFNBQVNBLGVBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDO0FBQ3ZDLE1BQUlDLFVBQVUsR0FBR0MsSUFBSSxDQUFDRixPQUFPLENBQUNHLEtBQVIsQ0FBYyxHQUFkLEVBQW1CLENBQW5CLENBQUQsQ0FBckI7QUFDQSxNQUFJQyxFQUFFLEdBQUcsSUFBSUMsV0FBSixDQUFnQkosVUFBVSxDQUFDSyxNQUEzQixDQUFUO0FBQ0EsTUFBSUMsRUFBRSxHQUFHLElBQUlDLFVBQUosQ0FBZUosRUFBZixDQUFUOztBQUNBLE9BQUssSUFBSUssQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR1IsVUFBVSxDQUFDSyxNQUEvQixFQUF1Q0csQ0FBQyxFQUF4QyxFQUE0QztBQUMxQ0YsTUFBRSxDQUFDRSxDQUFELENBQUYsR0FBUVIsVUFBVSxDQUFDUyxVQUFYLENBQXNCRCxDQUF0QixDQUFSO0FBQ0Q7O0FBRUQsU0FBT0wsRUFBUDtBQUNEO0FBRU0sU0FBU08sYUFBVCxDQUF1QlgsT0FBdkIsRUFBZ0M7QUFDckM7QUFDQTtBQUNBLE1BQUlDLFVBQVUsR0FBR0MsSUFBSSxDQUFDRixPQUFPLENBQUNHLEtBQVIsQ0FBYyxHQUFkLEVBQW1CLENBQW5CLENBQUQsQ0FBckIsQ0FIcUMsQ0FLckM7O0FBQ0EsTUFBSVMsVUFBVSxHQUFHWixPQUFPLENBQ3JCRyxLQURjLENBQ1IsR0FEUSxFQUNILENBREcsRUFFZEEsS0FGYyxDQUVSLEdBRlEsRUFFSCxDQUZHLEVBR2RBLEtBSGMsQ0FHUixHQUhRLEVBR0gsQ0FIRyxDQUFqQixDQU5xQyxDQVdyQzs7QUFDQSxNQUFJQyxFQUFFLEdBQUcsSUFBSUMsV0FBSixDQUFnQkosVUFBVSxDQUFDSyxNQUEzQixDQUFULENBWnFDLENBY3JDOztBQUNBLE1BQUlDLEVBQUUsR0FBRyxJQUFJQyxVQUFKLENBQWVKLEVBQWYsQ0FBVCxDQWZxQyxDQWlCckM7O0FBQ0EsT0FBSyxJQUFJSyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHUixVQUFVLENBQUNLLE1BQS9CLEVBQXVDRyxDQUFDLEVBQXhDLEVBQTRDO0FBQzFDRixNQUFFLENBQUNFLENBQUQsQ0FBRixHQUFRUixVQUFVLENBQUNTLFVBQVgsQ0FBc0JELENBQXRCLENBQVI7QUFDRCxHQXBCb0MsQ0FzQnJDOzs7QUFDQSxNQUFJSSxJQUFJLEdBQUcsSUFBSUMsSUFBSixDQUFTLENBQUNWLEVBQUQsQ0FBVCxFQUFlO0FBQUVXLFFBQUksRUFBRUg7QUFBUixHQUFmLENBQVg7QUFDQSxTQUFPQyxJQUFQO0FBQ0QiLCJmaWxlIjoiLi9zcmMvZGF0YV9vcGVyYXRpb25zLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGRhdGFVUkl0b0J1ZmZlcihkYXRhVVJJKSB7XG4gIGxldCBieXRlU3RyaW5nID0gYXRvYihkYXRhVVJJLnNwbGl0KCcsJylbMV0pO1xuICBsZXQgYWIgPSBuZXcgQXJyYXlCdWZmZXIoYnl0ZVN0cmluZy5sZW5ndGgpO1xuICBsZXQgaWEgPSBuZXcgVWludDhBcnJheShhYik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZVN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgIGlhW2ldID0gYnl0ZVN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICB9XG5cbiAgcmV0dXJuIGFiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YVVSSVRvQmxvYihkYXRhVVJJKSB7XG4gIC8vIGNvbnZlcnQgYmFzZTY0IHRvIHJhdyBiaW5hcnkgZGF0YSBoZWxkIGluIGEgc3RyaW5nXG4gIC8vIGRvZXNuJ3QgaGFuZGxlIFVSTEVuY29kZWQgRGF0YVVSSXMgLSBzZWUgU08gYW5zd2VyICM2ODUwMjc2IGZvciBjb2RlIHRoYXQgZG9lcyB0aGlzXG4gIGxldCBieXRlU3RyaW5nID0gYXRvYihkYXRhVVJJLnNwbGl0KCcsJylbMV0pO1xuXG4gIC8vIHNlcGFyYXRlIG91dCB0aGUgbWltZSBjb21wb25lbnRcbiAgbGV0IG1pbWVTdHJpbmcgPSBkYXRhVVJJXG4gICAgLnNwbGl0KCcsJylbMF1cbiAgICAuc3BsaXQoJzonKVsxXVxuICAgIC5zcGxpdCgnOycpWzBdO1xuXG4gIC8vIHdyaXRlIHRoZSBieXRlcyBvZiB0aGUgc3RyaW5nIHRvIGFuIEFycmF5QnVmZmVyXG4gIGxldCBhYiA9IG5ldyBBcnJheUJ1ZmZlcihieXRlU3RyaW5nLmxlbmd0aCk7XG5cbiAgLy8gY3JlYXRlIGEgdmlldyBpbnRvIHRoZSBidWZmZXJcbiAgbGV0IGlhID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xuXG4gIC8vIHNldCB0aGUgYnl0ZXMgb2YgdGhlIGJ1ZmZlciB0byB0aGUgY29ycmVjdCB2YWx1ZXNcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlU3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgaWFbaV0gPSBieXRlU3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gIH1cblxuICAvLyB3cml0ZSB0aGUgQXJyYXlCdWZmZXIgdG8gYSBibG9iLCBhbmQgeW91J3JlIGRvbmVcbiAgbGV0IGJsb2IgPSBuZXcgQmxvYihbYWJdLCB7IHR5cGU6IG1pbWVTdHJpbmcgfSk7XG4gIHJldHVybiBibG9iO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/data_operations.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: readAndCompressImage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"readAndCompressImage\", function() { return readAndCompressImage; });\n/* harmony import */ var exifreader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! exifreader */ \"./node_modules/exifreader/src/exif-reader.js\");\n/* harmony import */ var _browser_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./browser_operations */ \"./src/browser_operations.js\");\n/* harmony import */ var _scaling_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scaling_operations */ \"./src/scaling_operations.js\");\n/* harmony import */ var _data_operations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data_operations */ \"./src/data_operations.js\");\n\n\n\n\nvar DEFAULT_CONFIG = {\n  quality: 0.5,\n  maxWidth: 800,\n  maxHeight: 600,\n  autoRotate: true,\n  debug: false,\n  mimeType: 'image/jpeg'\n};\nfunction readAndCompressImage(file, userConfig) {\n  return new Promise(function (resolve, reject) {\n    var img = Object(_browser_operations__WEBPACK_IMPORTED_MODULE_1__[\"initializeOrGetImg\"])();\n    var reader = new FileReader();\n    var config = Object.assign({}, DEFAULT_CONFIG, userConfig);\n\n    reader.onload = function (e) {\n      img.onerror = function () {\n        reject(\"cannot load image.\");\n      };\n\n      img.onload = function () {\n        var scaleImageOptions = {\n          img: img,\n          config: config\n        };\n\n        if (config.autoRotate) {\n          if (config.debug) console.log('browser-image-resizer: detecting image orientation...');\n          var buffer = Object(_data_operations__WEBPACK_IMPORTED_MODULE_3__[\"dataURItoBuffer\"])(img.src);\n          var Orientation = {};\n\n          try {\n            var Result = exifreader__WEBPACK_IMPORTED_MODULE_0__[\"default\"].load(buffer);\n            Orientation = Result.Orientation || {};\n          } catch (err) {\n            console.error('browser-image-resizer: Error getting orientation');\n            console.error(err);\n          }\n\n          if (config.debug) {\n            console.log('browser-image-resizer: image orientation from EXIF tag = ' + Orientation);\n          }\n\n          scaleImageOptions.orientation = Orientation.value;\n        } else if (config.debug) {\n          console.log('browser-image-resizer: ignoring EXIF orientation tag because autoRotate is false...');\n        }\n\n        try {\n          var blob = Object(_scaling_operations__WEBPACK_IMPORTED_MODULE_2__[\"scaleImage\"])(scaleImageOptions);\n          resolve(blob);\n        } catch (err) {\n          reject(err);\n        }\n      };\n\n      img.src = e.target.result;\n    };\n\n    try {\n      reader.onerror = function () {\n        reject(\"cannot read image file.\");\n      };\n\n      reader.readAsDataURL(file);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ccm93c2VySW1hZ2VSZXNpemVyLy4vc3JjL2luZGV4LmpzP2I2MzUiXSwibmFtZXMiOlsiREVGQVVMVF9DT05GSUciLCJxdWFsaXR5IiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJhdXRvUm90YXRlIiwiZGVidWciLCJtaW1lVHlwZSIsInJlYWRBbmRDb21wcmVzc0ltYWdlIiwiZmlsZSIsInVzZXJDb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImltZyIsImluaXRpYWxpemVPckdldEltZyIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJjb25maWciLCJPYmplY3QiLCJhc3NpZ24iLCJvbmxvYWQiLCJlIiwib25lcnJvciIsInNjYWxlSW1hZ2VPcHRpb25zIiwiY29uc29sZSIsImxvZyIsImJ1ZmZlciIsImRhdGFVUkl0b0J1ZmZlciIsInNyYyIsIk9yaWVudGF0aW9uIiwiUmVzdWx0IiwiRXhpZlJlYWRlciIsImxvYWQiLCJlcnIiLCJlcnJvciIsIm9yaWVudGF0aW9uIiwidmFsdWUiLCJibG9iIiwic2NhbGVJbWFnZSIsInRhcmdldCIsInJlc3VsdCIsInJlYWRBc0RhdGFVUkwiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBTUEsY0FBYyxHQUFHO0FBQ3JCQyxTQUFPLEVBQUUsR0FEWTtBQUVyQkMsVUFBUSxFQUFFLEdBRlc7QUFHckJDLFdBQVMsRUFBRSxHQUhVO0FBSXJCQyxZQUFVLEVBQUUsSUFKUztBQUtyQkMsT0FBSyxFQUFFLEtBTGM7QUFNckJDLFVBQVEsRUFBRTtBQU5XLENBQXZCO0FBU08sU0FBU0Msb0JBQVQsQ0FBOEJDLElBQTlCLEVBQW9DQyxVQUFwQyxFQUFnRDtBQUNyRCxTQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdEMsUUFBSUMsR0FBRyxHQUFHQyw4RUFBa0IsRUFBNUI7QUFDQSxRQUFJQyxNQUFNLEdBQUcsSUFBSUMsVUFBSixFQUFiO0FBQ0EsUUFBSUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCbkIsY0FBbEIsRUFBa0NTLFVBQWxDLENBQWI7O0FBRUFNLFVBQU0sQ0FBQ0ssTUFBUCxHQUFnQixVQUFTQyxDQUFULEVBQVk7QUFDMUJSLFNBQUcsQ0FBQ1MsT0FBSixHQUFjLFlBQVc7QUFDdkJWLGNBQU0sQ0FBQyxvQkFBRCxDQUFOO0FBQ0QsT0FGRDs7QUFHQUMsU0FBRyxDQUFDTyxNQUFKLEdBQWEsWUFBVztBQUN0QixZQUFJRyxpQkFBaUIsR0FBRztBQUFFVixhQUFHLEVBQUhBLEdBQUY7QUFBT0ksZ0JBQU0sRUFBTkE7QUFBUCxTQUF4Qjs7QUFDQSxZQUFJQSxNQUFNLENBQUNiLFVBQVgsRUFBdUI7QUFDckIsY0FBSWEsTUFBTSxDQUFDWixLQUFYLEVBQ0VtQixPQUFPLENBQUNDLEdBQVIsQ0FDRSx1REFERjtBQUdGLGNBQUlDLE1BQU0sR0FBR0Msd0VBQWUsQ0FBQ2QsR0FBRyxDQUFDZSxHQUFMLENBQTVCO0FBQ0EsY0FBSUMsV0FBVyxHQUFHLEVBQWxCOztBQUNBLGNBQUk7QUFDRixnQkFBTUMsTUFBTSxHQUFHQyxrREFBVSxDQUFDQyxJQUFYLENBQWdCTixNQUFoQixDQUFmO0FBQ0FHLHVCQUFXLEdBQUdDLE1BQU0sQ0FBQ0QsV0FBUCxJQUFzQixFQUFwQztBQUNELFdBSEQsQ0FHRSxPQUFPSSxHQUFQLEVBQVk7QUFDWlQsbUJBQU8sQ0FBQ1UsS0FBUixDQUFjLGtEQUFkO0FBQ0FWLG1CQUFPLENBQUNVLEtBQVIsQ0FBY0QsR0FBZDtBQUNEOztBQUNELGNBQUloQixNQUFNLENBQUNaLEtBQVgsRUFBa0I7QUFDaEJtQixtQkFBTyxDQUFDQyxHQUFSLENBQ0UsOERBQ0VJLFdBRko7QUFJRDs7QUFDRE4sMkJBQWlCLENBQUNZLFdBQWxCLEdBQWdDTixXQUFXLENBQUNPLEtBQTVDO0FBQ0QsU0FyQkQsTUFxQk8sSUFBSW5CLE1BQU0sQ0FBQ1osS0FBWCxFQUFrQjtBQUNyQm1CLGlCQUFPLENBQUNDLEdBQVIsQ0FDRSxxRkFERjtBQUdIOztBQUNELFlBQUk7QUFDRixjQUFJWSxJQUFJLEdBQUdDLHNFQUFVLENBQUNmLGlCQUFELENBQXJCO0FBQ0FaLGlCQUFPLENBQUMwQixJQUFELENBQVA7QUFDRCxTQUhELENBR0UsT0FBT0osR0FBUCxFQUFZO0FBQ1pyQixnQkFBTSxDQUFDcUIsR0FBRCxDQUFOO0FBQ0Q7QUFDRixPQWxDRDs7QUFtQ0FwQixTQUFHLENBQUNlLEdBQUosR0FBVVAsQ0FBQyxDQUFDa0IsTUFBRixDQUFTQyxNQUFuQjtBQUNELEtBeENEOztBQTBDQSxRQUFJO0FBQ0Z6QixZQUFNLENBQUNPLE9BQVAsR0FBaUIsWUFBVztBQUMxQlYsY0FBTSxDQUFDLHlCQUFELENBQU47QUFDRCxPQUZEOztBQUdBRyxZQUFNLENBQUMwQixhQUFQLENBQXFCakMsSUFBckI7QUFDRCxLQUxELENBS0UsT0FBT3lCLEdBQVAsRUFBWTtBQUNackIsWUFBTSxDQUFDcUIsR0FBRCxDQUFOO0FBQ0Q7QUFDRixHQXZETSxDQUFQO0FBd0REIiwiZmlsZSI6Ii4vc3JjL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEV4aWZSZWFkZXIgZnJvbSAnZXhpZnJlYWRlcic7XG5pbXBvcnQgeyBpbml0aWFsaXplT3JHZXRJbWcgfSBmcm9tICcuL2Jyb3dzZXJfb3BlcmF0aW9ucyc7XG5pbXBvcnQgeyBzY2FsZUltYWdlIH0gZnJvbSAnLi9zY2FsaW5nX29wZXJhdGlvbnMnO1xuaW1wb3J0IHsgZGF0YVVSSXRvQnVmZmVyIH0gZnJvbSAnLi9kYXRhX29wZXJhdGlvbnMnO1xuXG5jb25zdCBERUZBVUxUX0NPTkZJRyA9IHtcbiAgcXVhbGl0eTogMC41LFxuICBtYXhXaWR0aDogODAwLFxuICBtYXhIZWlnaHQ6IDYwMCxcbiAgYXV0b1JvdGF0ZTogdHJ1ZSxcbiAgZGVidWc6IGZhbHNlLFxuICBtaW1lVHlwZTogJ2ltYWdlL2pwZWcnXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVhZEFuZENvbXByZXNzSW1hZ2UoZmlsZSwgdXNlckNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGxldCBpbWcgPSBpbml0aWFsaXplT3JHZXRJbWcoKVxuICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGxldCBjb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0NPTkZJRywgdXNlckNvbmZpZyk7XG5cbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oZSkge1xuICAgICAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KFwiY2Fubm90IGxvYWQgaW1hZ2UuXCIpO1xuICAgICAgfVxuICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgc2NhbGVJbWFnZU9wdGlvbnMgPSB7IGltZywgY29uZmlnIH1cbiAgICAgICAgaWYgKGNvbmZpZy5hdXRvUm90YXRlKSB7XG4gICAgICAgICAgaWYgKGNvbmZpZy5kZWJ1ZylcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAnYnJvd3Nlci1pbWFnZS1yZXNpemVyOiBkZXRlY3RpbmcgaW1hZ2Ugb3JpZW50YXRpb24uLi4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGxldCBidWZmZXIgPSBkYXRhVVJJdG9CdWZmZXIoaW1nLnNyYyk7XG4gICAgICAgICAgbGV0IE9yaWVudGF0aW9uID0ge307XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IFJlc3VsdCA9IEV4aWZSZWFkZXIubG9hZChidWZmZXIpO1xuICAgICAgICAgICAgT3JpZW50YXRpb24gPSBSZXN1bHQuT3JpZW50YXRpb24gfHwge307XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdicm93c2VyLWltYWdlLXJlc2l6ZXI6IEVycm9yIGdldHRpbmcgb3JpZW50YXRpb24nKVxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb25maWcuZGVidWcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAnYnJvd3Nlci1pbWFnZS1yZXNpemVyOiBpbWFnZSBvcmllbnRhdGlvbiBmcm9tIEVYSUYgdGFnID0gJyArXG4gICAgICAgICAgICAgICAgT3JpZW50YXRpb25cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNjYWxlSW1hZ2VPcHRpb25zLm9yaWVudGF0aW9uID0gT3JpZW50YXRpb24udmFsdWVcbiAgICAgICAgfSBlbHNlIGlmIChjb25maWcuZGVidWcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAnYnJvd3Nlci1pbWFnZS1yZXNpemVyOiBpZ25vcmluZyBFWElGIG9yaWVudGF0aW9uIHRhZyBiZWNhdXNlIGF1dG9Sb3RhdGUgaXMgZmFsc2UuLi4nXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbGV0IGJsb2IgPSBzY2FsZUltYWdlKHNjYWxlSW1hZ2VPcHRpb25zKVxuICAgICAgICAgIHJlc29sdmUoYmxvYilcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycikgXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBpbWcuc3JjID0gZS50YXJnZXQucmVzdWx0O1xuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KFwiY2Fubm90IHJlYWQgaW1hZ2UgZmlsZS5cIik7XG4gICAgICB9XG4gICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJlamVjdChlcnIpXG4gICAgfVxuICB9KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scaling_operations.js":
/*!***********************************!*\
  !*** ./src/scaling_operations.js ***!
  \***********************************/
/*! exports provided: scaleImage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scaleImage\", function() { return scaleImage; });\n/* harmony import */ var _data_operations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data_operations */ \"./src/data_operations.js\");\n/* harmony import */ var _browser_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./browser_operations */ \"./src/browser_operations.js\");\n\n\n\nfunction findMaxWidth(config, canvas) {\n  //Let's find the max available width for scaled image\n  var ratio = canvas.width / canvas.height;\n  var mWidth = Math.min(canvas.width, config.maxWidth, ratio * config.maxHeight);\n  if (config.maxSize > 0 && config.maxSize < canvas.width * canvas.height / 1000) mWidth = Math.min(mWidth, Math.floor(config.maxSize * 1000 / canvas.height));\n  if (!!config.scaleRatio) mWidth = Math.min(mWidth, Math.floor(config.scaleRatio * canvas.width));\n\n  if (config.debug) {\n    console.log('browser-image-resizer: original image size = ' + canvas.width + ' px (width) X ' + canvas.height + ' px (height)');\n    console.log('browser-image-resizer: scaled image size = ' + mWidth + ' px (width) X ' + Math.floor(mWidth / ratio) + ' px (height)');\n  }\n\n  if (mWidth <= 0) {\n    mWidth = 1;\n    console.warn(\"browser-image-resizer: image size is too small\");\n  }\n\n  return mWidth;\n}\n\nfunction exifApplied(canvas, ctx, orientation, img) {\n  var width = canvas.width;\n  var styleWidth = canvas.style.width;\n  var height = canvas.height;\n  var styleHeight = canvas.style.height;\n\n  if (orientation > 4) {\n    canvas.width = height;\n    canvas.style.width = styleHeight;\n    canvas.height = width;\n    canvas.style.height = styleWidth;\n  }\n\n  switch (orientation) {\n    case 2:\n      ctx.translate(width, 0);\n      ctx.scale(-1, 1);\n      break;\n\n    case 3:\n      ctx.translate(width, height);\n      ctx.rotate(Math.PI);\n      break;\n\n    case 4:\n      ctx.translate(0, height);\n      ctx.scale(1, -1);\n      break;\n\n    case 5:\n      ctx.rotate(0.5 * Math.PI);\n      ctx.scale(1, -1);\n      break;\n\n    case 6:\n      ctx.rotate(0.5 * Math.PI);\n      ctx.translate(0, -height);\n      break;\n\n    case 7:\n      ctx.rotate(0.5 * Math.PI);\n      ctx.translate(width, -height);\n      ctx.scale(-1, 1);\n      break;\n\n    case 8:\n      ctx.rotate(-0.5 * Math.PI);\n      ctx.translate(-width, 0);\n      break;\n  }\n\n  ctx.drawImage(img, 0, 0);\n  ctx.restore();\n}\n\nfunction scaleCanvasWithAlgorithm(canvas, config) {\n  var scaledCanvas = document.createElement('canvas');\n  var scale = config.outputWidth / canvas.width;\n  scaledCanvas.width = canvas.width * scale;\n  scaledCanvas.height = canvas.height * scale;\n  var srcImgData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\n  var destImgData = scaledCanvas.getContext('2d').createImageData(scaledCanvas.width, scaledCanvas.height);\n  applyBilinearInterpolation(srcImgData, destImgData, scale);\n  scaledCanvas.getContext('2d').putImageData(destImgData, 0, 0);\n  return scaledCanvas;\n}\n\nfunction getHalfScaleCanvas(canvas) {\n  var halfCanvas = document.createElement('canvas');\n  halfCanvas.width = canvas.width / 2;\n  halfCanvas.height = canvas.height / 2;\n  halfCanvas.getContext('2d').drawImage(canvas, 0, 0, halfCanvas.width, halfCanvas.height);\n  return halfCanvas;\n}\n\nfunction applyBilinearInterpolation(srcCanvasData, destCanvasData, scale) {\n  function inner(f00, f10, f01, f11, x, y) {\n    var un_x = 1.0 - x;\n    var un_y = 1.0 - y;\n    return f00 * un_x * un_y + f10 * x * un_y + f01 * un_x * y + f11 * x * y;\n  }\n\n  var i, j;\n  var iyv, iy0, iy1, ixv, ix0, ix1;\n  var idxD, idxS00, idxS10, idxS01, idxS11;\n  var dx, dy;\n  var r, g, b, a;\n\n  for (i = 0; i < destCanvasData.height; ++i) {\n    iyv = i / scale;\n    iy0 = Math.floor(iyv); // Math.ceil can go over bounds\n\n    iy1 = Math.ceil(iyv) > srcCanvasData.height - 1 ? srcCanvasData.height - 1 : Math.ceil(iyv);\n\n    for (j = 0; j < destCanvasData.width; ++j) {\n      ixv = j / scale;\n      ix0 = Math.floor(ixv); // Math.ceil can go over bounds\n\n      ix1 = Math.ceil(ixv) > srcCanvasData.width - 1 ? srcCanvasData.width - 1 : Math.ceil(ixv);\n      idxD = (j + destCanvasData.width * i) * 4; // matrix to vector indices\n\n      idxS00 = (ix0 + srcCanvasData.width * iy0) * 4;\n      idxS10 = (ix1 + srcCanvasData.width * iy0) * 4;\n      idxS01 = (ix0 + srcCanvasData.width * iy1) * 4;\n      idxS11 = (ix1 + srcCanvasData.width * iy1) * 4; // overall coordinates to unit square\n\n      dx = ixv - ix0;\n      dy = iyv - iy0; // I let the r, g, b, a on purpose for debugging\n\n      r = inner(srcCanvasData.data[idxS00], srcCanvasData.data[idxS10], srcCanvasData.data[idxS01], srcCanvasData.data[idxS11], dx, dy);\n      destCanvasData.data[idxD] = r;\n      g = inner(srcCanvasData.data[idxS00 + 1], srcCanvasData.data[idxS10 + 1], srcCanvasData.data[idxS01 + 1], srcCanvasData.data[idxS11 + 1], dx, dy);\n      destCanvasData.data[idxD + 1] = g;\n      b = inner(srcCanvasData.data[idxS00 + 2], srcCanvasData.data[idxS10 + 2], srcCanvasData.data[idxS01 + 2], srcCanvasData.data[idxS11 + 2], dx, dy);\n      destCanvasData.data[idxD + 2] = b;\n      a = inner(srcCanvasData.data[idxS00 + 3], srcCanvasData.data[idxS10 + 3], srcCanvasData.data[idxS01 + 3], srcCanvasData.data[idxS11 + 3], dx, dy);\n      destCanvasData.data[idxD + 3] = a;\n    }\n  }\n}\n\nfunction scaleImage() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      img = _ref.img,\n      config = _ref.config,\n      _ref$orientation = _ref.orientation,\n      orientation = _ref$orientation === void 0 ? 1 : _ref$orientation;\n\n  var canvas = Object(_browser_operations__WEBPACK_IMPORTED_MODULE_1__[\"initializeOrGetCanvas\"])();\n  canvas.width = img.width;\n  canvas.height = img.height;\n  var ctx = canvas.getContext('2d');\n  ctx.save(); // EXIF\n\n  exifApplied(canvas, ctx, orientation, img);\n  var maxWidth = findMaxWidth(config, canvas);\n\n  while (canvas.width >= 2 * maxWidth) {\n    canvas = getHalfScaleCanvas(canvas);\n  }\n\n  if (canvas.width > maxWidth) {\n    canvas = scaleCanvasWithAlgorithm(canvas, Object.assign(config, {\n      outputWidth: maxWidth\n    }));\n  }\n\n  var imageData = canvas.toDataURL(config.mimeType, config.quality);\n  if (typeof config.onScale === 'function') config.onScale(imageData);\n  return Object(_data_operations__WEBPACK_IMPORTED_MODULE_0__[\"dataURIToBlob\"])(imageData);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scaling_operations.js\n");

/***/ })

/******/ });
});